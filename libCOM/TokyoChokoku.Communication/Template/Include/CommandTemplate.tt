<#@ template language="C#" hostSpecific="true"#>
<#@ output  extension=".cs" #>
<#@ include file="$(ProjectDir)/DesignTemplate/Include/Assembly.tt" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="TokyoChokoku.Communication" #>
<#@ import namespace="TokyoChokoku.Communication.CommandGenerateKit" #>
<#@ include file="$(ProjectDir)/DesignTemplate/Include/ProjectDir.tt" #>
<#+
    // ProjectDir is defined by ProjectPath.tt.
    static readonly string IncludeDir = Path.Combine(ProjectDir, "Template", "Include");
    static readonly string ScriptDir  = Path.Combine(ProjectDir, "Template", "Script");
    static readonly string WriteCommandFile = Path.Combine(ScriptDir, "WriteCommand.json");
    static readonly string ReadCommandFile  = Path.Combine(ScriptDir, "ReadCommand.json");
#>
<#+
    // foreach
    void Generate<T>( IEnumerable<T> seq, Action<T> action ) 
    {
        foreach( var item in seq ) { action(item); }
    }

    // ヘッダ
    void GenerateHeader() {
#>
// 
// This code is generated by <#= Path.GetFileName(this.Host.TemplateFile) #>
// 
<#+ 
    } 

    // ネームスペース定義とクラスの定義までを隠蔽する
    void GenerateCommandExecutor(Action content) {
#>
namespace TokyoChokoku.Communication
{

using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using TokyoChokoku.Communication;
using TokyoChokoku.Text;
using TokyoChokoku.Structure;
using TokyoChokoku.Structure.Binary.FileFormat;
using TokyoChokoku.MarkinBox.Sketchbook;

public partial class CommandExecutor
{
<#+ content(); #>
}}
<#+
    } 
#>
