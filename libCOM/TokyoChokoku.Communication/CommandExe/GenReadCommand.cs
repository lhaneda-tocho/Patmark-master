// 
// This code is generated by GenReadCommand.tt
// 
namespace TokyoChokoku.Communication
{

using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using TokyoChokoku.Communication;
using TokyoChokoku.Text;
using TokyoChokoku.Structure;
using TokyoChokoku.Structure.Binary.FileFormat;
using TokyoChokoku.MarkinBox.Sketchbook;

public partial class CommandExecutor
{
    // Read Commands
        public async Task<Response> ReadCommandSurvival(WritingCommandBuilder builder)
        {
            Console.WriteLine("Core Command ReadCommandSurvival");

            // data
            MemoryAddress address = new MemoryAddress(builder.DataType, builder.Addr);
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = 1;

            var res = new Response(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                    .Build(timeout, retryCount)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }
        public async Task<ResponseShort> ReadRevision()
        {
            Console.WriteLine("Core Command ReadRevision");

            // data
            MemoryAddress address = Addresses.Revision;
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = 1;

            var res = new ResponseShort(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                    .Build(timeout, retryCount)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }
        public async Task<ResponseShort> ReadVersion()
        {
            Console.WriteLine("Core Command ReadVersion");

            // data
            MemoryAddress address = Addresses.Versions;
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = 1;

            var res = new ResponseShort(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                    .Build(timeout, retryCount)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }
        public async Task<ResponseShort> ReadAlert()
        {
            Console.WriteLine("Core Command ReadAlert");

            // data
            MemoryAddress address = Addresses.Alert;
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = 1;

            var res = new ResponseShort(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                    .Build(timeout, retryCount)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }
        public async Task<ResponseShort> ReadMarkingStatus()
        {
            Console.WriteLine("Core Command ReadMarkingStatus");

            // data
            MemoryAddress address = Addresses.MarkingStatus;
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = 1;

            var res = new ResponseShort(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                    .Build(timeout, retryCount)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }
        public async Task<ResponseByte> ReadMarkingPausingStatus()
        {
            Console.WriteLine("Core Command ReadMarkingPausingStatus");

            // data
            MemoryAddress address = Addresses.MarkingPausingStatus;
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = 1;

            var res = new ResponseByte(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                    .Build(timeout, retryCount)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }
        public async Task<ResponseShort> ReadMarkingResult()
        {
            Console.WriteLine("Core Command ReadMarkingResult");

            // data
            MemoryAddress address = Addresses.MarkingResult;
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = 1;

            var res = new ResponseShort(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                    .Build(timeout, retryCount)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }
        public async Task<ResponseShort> ReadExclusion(bool enableBeforeExcluding = false)
        {
            Console.WriteLine("Core Command ReadExclusion");

            // data
            MemoryAddress address = Addresses.Exclusion;
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = 1;

            var res = new ResponseShort(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                .Build(timeout, retryCount, enableBeforeExcluding: enableBeforeExcluding)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }
        public async Task<ResponseShort> ReadNumOfFieldInCurrentFile()
        {
            Console.WriteLine("Core Command ReadNumOfFieldInCurrentFile");

            // data
            MemoryAddress address = Addresses.NumOfFieldOfCurrentFile;
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = 1;

            var res = new ResponseShort(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                    .Build(timeout, retryCount)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }
        public async Task<ResponseMBData> ReadFieldOfCurrentFile(int indexOfField)
        {
            Console.WriteLine("Core Command ReadFieldOfCurrentFile");

            // data
            MemoryAddress address = Addresses.CurrentFile.Increment(indexOfField * MBDataFileSize.WordCount);
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = (short)MBDataFileSize.WordCount;

            var res = new ResponseMBData(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                    .Build(timeout, retryCount)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }
        public async Task<ResponseShort> ReadPermanentMarkingFileNo()
        {
            Console.WriteLine("Core Command ReadPermanentMarkingFileNo");

            // data
            MemoryAddress address = Addresses.PermanentMarkingFileNo;
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = 1;

            var res = new ResponseShort(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                    .Build(timeout, retryCount)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }
        public async Task<ResponseShort> ReadFlagFileLoadedFromSdCard()
        {
            Console.WriteLine("Core Command ReadFlagFileLoadedFromSdCard");

            // data
            MemoryAddress address = Addresses.FilesDidLoadFromSdCard;
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = 1;

            var res = new ResponseShort(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                    .Build(timeout, retryCount)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }
        public async Task<ResponseShort> ReadRemoteFileMap(int fileIndex)
        {
            Console.WriteLine("Core Command ReadRemoteFileMap");

            // data
            MemoryAddress address = Addresses.RemoteFileMaps.Increment(fileIndex);
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = (short)1;

            var res = new ResponseShort(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                    .Build(timeout, retryCount)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }
        public async Task<ResponseShorts> ReadRemoteFileMaps()
        {
            Console.WriteLine("Core Command ReadRemoteFileMaps");

            // data
            MemoryAddress address = Addresses.RemoteFileMaps;
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = (short)Sizes.NumOfRemoteFile;

            var res = new ResponseShorts(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                    .Build(timeout, retryCount)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }
        public async Task<ResponseRemoteFileNames> ReadRemoteFileNames()
        {
            Console.WriteLine("Core Command ReadRemoteFileNames");

            // data
            MemoryAddress address = Addresses.RemoteFileNames;
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = (short)(Sizes.NumOfRemoteFile * Sizes.BytesOfRemoteFileName);

            var res = new ResponseRemoteFileNames(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                    .Build(timeout, retryCount)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }

        /// <summary>
        /// ツール番号を読み込む
        /// </summary>
        /// <returns></returns>
        public async Task<ResponseShort> ReadMachineModelNo()
        {
            Console.WriteLine("Core Command ReadMachineModelNo (same as Tool No)");

            // data
            MemoryAddress address = Addresses.MachineModelNo;
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = 1;

            var res = new ResponseShort(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                    .Build(timeout, retryCount)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }
        public async Task<ResponseShort> ReadMarkingHeadPinIsAtOrigin()
        {
            Console.WriteLine("Core Command ReadMarkingHeadPinIsAtOrigin");

            // data
            MemoryAddress address = Addresses.MarkingHeadPinIsAtOrigin;
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = 1;

            var res = new ResponseShort(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                    .Build(timeout, retryCount)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }
        public async Task<ResponseShort> ReadBSDEnabled()
        {
            Console.WriteLine("Core Command ReadBSDEnabled");

            // data
            MemoryAddress address = Addresses.BSDEnabled;
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = 1;

            var res = new ResponseShort(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                    .Build(timeout, retryCount)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }
        public async Task<ResponseAscii> ReadCalendarDayReplacements()
        {
            Console.WriteLine("Core Command ReadCalendarDayReplacements");

            // data
            MemoryAddress address = Addresses.CalendarDayReplacements;
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = TokyoChokoku.MarkinBox.MBCalendar.CharsOfDayReplacements;

            var res = new ResponseAscii(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                    .Build(timeout, retryCount)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }
        public async Task<ResponseAscii> ReadCalendarMonthReplacements()
        {
            Console.WriteLine("Core Command ReadCalendarMonthReplacements");

            // data
            MemoryAddress address = Addresses.CalendarMonthReplacements;
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = TokyoChokoku.MarkinBox.MBCalendar.CharsOfMonthReplacements;

            var res = new ResponseAscii(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                    .Build(timeout, retryCount)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }
        public async Task<ResponseAscii> ReadCalendarYearReplacements()
        {
            Console.WriteLine("Core Command ReadCalendarYearReplacements");

            // data
            MemoryAddress address = Addresses.CalendarYearReplacements;
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = TokyoChokoku.MarkinBox.MBCalendar.CharsOfYearReplacements;

            var res = new ResponseAscii(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                    .Build(timeout, retryCount)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }
        public async Task<ResponseMBCalendarShiftData> ReadCalendarShiftReplacements()
        {
            Console.WriteLine("Core Command ReadCalendarShiftReplacements");

            // data
            MemoryAddress address = Addresses.CalendarShiftReplacements;
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = TokyoChokoku.MarkinBox.MBCalendar.TotalBytesOfShifts;

            var res = new ResponseMBCalendarShiftData(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                    .Build(timeout, retryCount)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }
        public async Task<ResponseMBSerialSettingData> ReadSerialSettings()
        {
            Console.WriteLine("Core Command ReadSerialSettings");

            // data
            MemoryAddress address = Addresses.SerialSettings;
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = MarkinBox.MBSerial.NumOfSerial * MarkinBox.MBSerial.WordsOfSerialSetting;

            var res = new ResponseMBSerialSettingData(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                    .Build(timeout, retryCount)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }
        public async Task<ResponseMBSerialCounterData> ReadSerialCounters()
        {
            Console.WriteLine("Core Command ReadSerialCounters");

            // data
            MemoryAddress address = Addresses.SerialCounters;
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = MarkinBox.MBSerial.NumOfSerial * MarkinBox.MBSerial.WordsOfSerialCounter;

            var res = new ResponseMBSerialCounterData(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                    .Build(timeout, retryCount)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }
        public async Task<ResponseShort> ReadTextValidationStart()
        {
            Console.WriteLine("Core Command ReadTextValidationStart");

            // data
            MemoryAddress address = Addresses.TextValidationStart;
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = 1;

            var res = new ResponseShort(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                    .Build(timeout, retryCount)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }
        public async Task<ResponseShort> ReadTextValidationError()
        {
            Console.WriteLine("Core Command ReadTextValidationError");

            // data
            MemoryAddress address = Addresses.TextValidationError;
            var           timeout = 2000;
            var        retryCount = 3;
            short        dataSize = 1;

            var res = new ResponseShort(await Read(
                    new ReadingCommandBuilder(address, dataSize)
                    .Build(timeout, retryCount)
                    , address
            ));

            await Task.Delay(10);
            return res;
        }
}}
