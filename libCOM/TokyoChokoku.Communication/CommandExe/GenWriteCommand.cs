// 
// This code is generated by GenWriteCommand.tt
// 
namespace TokyoChokoku.Communication
{

using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using TokyoChokoku.Communication;
using TokyoChokoku.Text;
using TokyoChokoku.Structure;
using TokyoChokoku.Structure.Binary.FileFormat;
using TokyoChokoku.MarkinBox.Sketchbook;
    using TokyoChokoku.SerialModule.Counter;

    public partial class CommandExecutor
{
        // Write Commands
        public async Task<WriteResponse> LoadFieldFromSdCard()
        {
            Console.WriteLine("CoreCommand: LoadFieldFromSdCard");

            // data 
            MemoryAddress address = Addresses.CommonOperation;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = ByteOf(151);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(200);
            await WaitToFinishWriting(builder);
            return res;
        }
        public async Task<WriteResponse> LoadFileNamesFromSdCard()
        {
            Console.WriteLine("CoreCommand: LoadFileNamesFromSdCard");

            // data 
            MemoryAddress address = Addresses.CommonOperation;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = ByteOf(19);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(200);
            await WaitToFinishWriting(builder);
            return res;
        }
        public async Task<WriteResponse> LoadFileMapFromSdCard()
        {
            Console.WriteLine("CoreCommand: LoadFileMapFromSdCard");

            // data 
            MemoryAddress address = Addresses.CommonOperation;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = ByteOf(13);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(200);
            await WaitToFinishWriting(builder);
            return res;
        }
        public async Task<WriteResponse> LoadFileMapBlockFromSdCard()
        {
            Console.WriteLine("CoreCommand: LoadFileMapBlockFromSdCard");

            // data 
            MemoryAddress address = Addresses.CommonOperation;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = ByteOf(2);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(200);
            await WaitToFinishWriting(builder);
            return res;
        }
        [Obsolete("これは Communication プロジェクトの内部 API です。アプリケーションロジックでは使用しないでください。", false)]
        public async Task<WriteResponse> LoadValueFromSdCard()
        {
            Console.WriteLine("CoreCommand: LoadValueFromSdCard <INTERNAL>");

            // data 
            MemoryAddress address = Addresses.CommonOperation;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = ByteOf(3);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(200);
            await WaitToFinishWriting(builder);
            return res;
        }
        public async Task<WriteResponse> MoveMarkingHeadToOrigin()
        {
            Console.WriteLine("CoreCommand: MoveMarkingHeadToOrigin");

            // data 
            MemoryAddress address = Addresses.MovingHeadToOrigin;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = WordOf(0x0014);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> SaveFileNameToSdCard()
        {
            Console.WriteLine("CoreCommand: SaveFileNameToSdCard");

            // data 
            MemoryAddress address = Addresses.CommonOperation;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = ByteOf(18);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(500);
            await WaitToFinishWriting(builder);
            return res;
        }
        [Obsolete("これは Communication プロジェクトの内部 API です。アプリケーションロジックでは使用しないでください。", false)]
        public async Task<WriteResponse> SetFileMapToWorkSpace(int fileIndex, byte numOfField)
        {
            Console.WriteLine("CoreCommand: SetFileMapToWorkSpace <INTERNAL>");

            // data 
            MemoryAddress address = Addresses.SdCardDataExchangeArea.FileMap.Increment(fileIndex % Sizes.SdCard.FileMapBlock.NumOfMapInBlock);
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = WordOf((ushort)numOfField);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> SaveFileMapBlockToSdCard()
        {
            Console.WriteLine("CoreCommand: SaveFileMapBlockToSdCard");

            // data 
            MemoryAddress address = Addresses.CommonOperation;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = ByteOf(4);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(300);
            await WaitToFinishWriting(builder);
            return res;
        }
        public async Task<WriteResponse> SaveBasiceSettingsToSdCard()
        {
            Console.WriteLine("CoreCommand: SaveBasiceSettingsToSdCard");

            // data 
            MemoryAddress address = Addresses.CommonOperation;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = ByteOf(10);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(200);
            await WaitToFinishWriting(builder);
            return res;
        }
        public async Task<WriteResponse> SetSerialSettingsFileNo(short no)
        {
            Console.WriteLine("CoreCommand: SetSerialSettingsFileNo");

            // data 
            MemoryAddress address = Addresses.SerialSettingsFileNo;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = WordOf(no);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> LoadSerialSettingsOfFileFromSdCard()
        {
            Console.WriteLine("CoreCommand: LoadSerialSettingsOfFileFromSdCard");

            // data 
            MemoryAddress address = Addresses.CommonOperation;
            var     needsResponse = true;
            var           timeout = 10000;
            var        retryCount = 3;
            Programmer       data = ByteOf(22);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(200);
            await WaitToFinishWriting(builder);
            return res;
        }
        public async Task<WriteResponse> SaveSerialSettingsOfFileToSdCard()
        {
            Console.WriteLine("CoreCommand: SaveSerialSettingsOfFileToSdCard");

            // data 
            MemoryAddress address = Addresses.CommonOperation;
            var     needsResponse = true;
            var           timeout = 10000;
            var        retryCount = 3;
            Programmer       data = ByteOf(23);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(200);
            await WaitToFinishWriting(builder);
            return res;
        }
        [Obsolete("これは Communication プロジェクトの内部 API です。アプリケーションロジックでは使用しないでください。", false)]
        public async Task<WriteResponse> SaveValueToSdCard()
        {
            Console.WriteLine("CoreCommand: SaveValueToSdCard <INTERNAL>");

            // data 
            MemoryAddress address = Addresses.CommonOperation;
            var     needsResponse = true;
            var           timeout = 10000;
            var        retryCount = 3;
            Programmer       data = ByteOf(20);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(300);
            await WaitToFinishWriting(builder);
            return res;
        }
        public async Task<WriteResponse> SetAlert(MBAlert alert)
        {
            Console.WriteLine("CoreCommand: SetAlert");

            // data 
            MemoryAddress address = Addresses.Alert;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = WordOf( (short)alert );

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> SetCurrentMarkingField(int index, MBData field)
        {
            Console.WriteLine("CoreCommand: SetCurrentMarkingField");

            // data 
            MemoryAddress address = Addresses.CurrentFile.Increment(index * MBDataFileSize.WordCount);
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = CreateMBDataBinarizer(field).Data;

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> SetFieldIndexOfRemoteSdCardFile(short fieldIndex)
        {
            Console.WriteLine("CoreCommand: SetFieldIndexOfRemoteSdCardFile");

            // data 
            MemoryAddress address = Addresses.FieldIndexOfRemoteSdCardFile;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = WordOf(fieldIndex);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(30);
            return res;
        }
        public async Task<WriteResponse> SetFlagFileLoadedFromSdCard(short value)
        {
            Console.WriteLine("CoreCommand: SetFlagFileLoadedFromSdCard");

            // data 
            MemoryAddress address = Addresses.FilesDidLoadFromSdCard;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = WordOf(value);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        [Obsolete("これは Communication プロジェクトの内部 API です。アプリケーションロジックでは使用しないでください。", false)]
        public async Task<WriteResponse> SetFileToSdCardDataExchangeArea(int fieldIndex, MBData field)
        {
            Console.WriteLine("CoreCommand: SetFileToSdCardDataExchangeArea <INTERNAL>");

            // data 
            MemoryAddress address = Addresses.SdCardDataExchangeArea.Field(fieldIndex);
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = CreateMBDataBinarizer(field).Data;

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> SetHeadButtonMarkingAbility(MBHeadButtonMarkingAbility ability)
        {
            Console.WriteLine("CoreCommand: SetHeadButtonMarkingAbility");

            // data 
            MemoryAddress address = Addresses.HeadButtonMarkingAbility;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = WordOf((short)ability);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> SetMachineModelNo(short number)
        {
            Console.WriteLine("CoreCommand: SetMachineModelNo");

            // data 
            MemoryAddress address = Addresses.MachineModelNo;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = WordOf(number);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> SetMachineModelNoToSdCard()
        {
            Console.WriteLine("CoreCommand: SetMachineModelNoToSdCard");

            // data 
            MemoryAddress address = Addresses.SettingMachineModelNoToSdCard;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = WordOf(0x0001);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> SetMarkingMode(MBMarkingMode mode)
        {
            Console.WriteLine("CoreCommand: SetMarkingMode");

            // data 
            MemoryAddress address = Addresses.MarkingMode;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = ByteOf( (byte)mode );

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> SetMarkingPausingStatus(MBMarkingPausingStatus status)
        {
            Console.WriteLine("CoreCommand: SetMarkingPausingStatus");

            // data 
            MemoryAddress address = Addresses.MarkingPausingStatus;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = ByteOf( (byte)status );

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> SetMarkingPowerOfCurrentMarkingField(int index, short power)
        {
            Console.WriteLine("CoreCommand: SetMarkingPowerOfCurrentMarkingField");

            // data 
            MemoryAddress address = Addresses.CurrentFile.Increment((index * MBDataFileSize.WordCount) + Addresses.MarkingPowerIndexInField);
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = WordOf(power);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> SetMarkingSpeedOfCurrentMarkingField(int index, short speed)
        {
            Console.WriteLine("CoreCommand: SetMarkingSpeedOfCurrentMarkingField");

            // data 
            MemoryAddress address = Addresses.CurrentFile.Increment((index * MBDataFileSize.WordCount) + Addresses.MarkingSpeedIndexInField);
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = WordOf(speed);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> SetMarkingStatus(MBMarkingStatus status)
        {
            Console.WriteLine("CoreCommand: SetMarkingStatus");

            // data 
            MemoryAddress address = Addresses.MarkingStatus;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = WordOf((short)status);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> SetPermanentMarkingFileNo(short number)
        {
            Console.WriteLine("CoreCommand: SetPermanentMarkingFileNo");

            // data 
            MemoryAddress address = Addresses.PermanentMarkingFileNo;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = WordOf(number);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> ClearPermanentMarkingFileNo()
        {
            Console.WriteLine("CoreCommand: ClearPermanentMarkingFileNo");

            // data 
            MemoryAddress address = Addresses.PermanentMarkingFileNo;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = WordOf(0);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> SetPermanentMarkingFileNoToSdCard()
        {
            Console.WriteLine("CoreCommand: SetPermanentMarkingFileNoToSdCard");

            // data 
            MemoryAddress address = Addresses.SettingPermanentMarkingFileNoToSdCard;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = WordOf((short)11);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(100);
            return res;
        }
        public async Task<WriteResponse> SetNumOfFieldOfCurrentMarkingFile(short number)
        {
            Console.WriteLine("CoreCommand: SetNumOfFieldOfCurrentMarkingFile");

            // data 
            MemoryAddress address = Addresses.NumOfFieldOfCurrentFile;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = WordOf(number);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> SetNumOfFieldToSdCardDataExchangeArea(int fileIndex, short numOfField)
        {
            Console.WriteLine("CoreCommand: SetNumOfFieldToSdCardDataExchangeArea");

            // data 
            MemoryAddress address = Addresses.SdCardDataExchangeArea.FileMap.Increment(Sizes.SdCard.FileMapBlock.FileMapIndexInBlock(fileIndex) * Sizes.BytesOfMemoryUnitC);
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = RevWordOf(numOfField);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        [Obsolete("これは Communication プロジェクトの内部 API です。アプリケーションロジックでは使用しないでください。", false)]
        public async Task<WriteResponse> SetRemoteFileMap(int fileIndex, short num)
        {
            Console.WriteLine($"CoreCommand: SetRemoteFileMap({fileIndex}, {num}) <INTERNAL>");

            // data 
            MemoryAddress address = Addresses.RemoteFileMaps.Increment(fileIndex);
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = WordOf(num);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(30);
            return res;
        }
        [Obsolete("これは Communication プロジェクトの内部 API です。アプリケーションロジックでは使用しないでください。", false)]
        public async Task<WriteResponse> SetRemoteFileName(short fileIndex, string name)
        {
            Console.WriteLine("CoreCommand: SetRemoteFileName <INTERNAL>");

            // data 
            MemoryAddress address = Addresses.RemoteFileNames.Increment(fileIndex * Sizes.BytesOfRemoteFileName);
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = MonoTextOf(name, Sizes.BytesOfRemoteFileName);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(30);
            return res;
        }
        public async Task<WriteResponse> SetRemoteMarkingFileNo(short no)
        {
            Console.WriteLine("CoreCommand: SetRemoteMarkingFileNo");

            // data 
            MemoryAddress address = Addresses.RemoteMarkingFileNo;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = WordOf(no);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        [Obsolete("これは Communication プロジェクトの内部 API です。アプリケーションロジックでは使用しないでください。", false)]
        public async Task<WriteResponse> SetSdCardDataWritingInfo(int addressOfSdCard, int addressOfWorkingSpace, int writingSize)
        {
            Console.WriteLine("CoreCommand: SetSdCardDataWritingInfo <INTERNAL>");

            // data 
            MemoryAddress address = Addresses.SdCardDataWritingInfo;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = DWordsOf(addressOfSdCard, addressOfWorkingSpace, 0, writingSize);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> SetBarcode1WayMarkingMode(bool is1Way)
        {
            Console.WriteLine("CoreCommand: SetBarcode1WayMarkingMode");

            // data 
            MemoryAddress address = Addresses.Barcode1WayMarkingMode;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = ByteOf(
                                        (byte) ((is1Way) ? 0x1 : 0x0 )
                                    );

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> SetBSDEnabled(bool isEnabled)
        {
            Console.WriteLine("CoreCommand: SetBSDEnabled");

            // data 
            MemoryAddress address = Addresses.BSDEnabled;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = WordOf (
                                        (short)(isEnabled ? 0x1 : 0x0)
                                    );

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> SetExclusion(bool isEnabled, bool enableBeforeExcluding=false)
        {
            Console.WriteLine("CoreCommand: SetExclusion");

            // data 
            MemoryAddress address = Addresses.Exclusion;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = WordOf(
                                        (short)(isEnabled ? 0x1 : 0x0)
                                    );

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount, enableBeforeExcluding: enableBeforeExcluding)
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> SetOptionsOfPinMoving(short xPulse, short yPulse, short speed, short mode = 1, short interval = 0)
        {
            Console.WriteLine("CoreCommand: SetOptionsOfPinMoving");

            // data 
            MemoryAddress address = Addresses.OptionsOfPinMoving;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = WordsOf(xPulse, yPulse, speed, mode, interval);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> StartToMovePin()
        {
            Console.WriteLine("CoreCommand: StartToMovePin");

            // data 
            MemoryAddress address = Addresses.PinIsMoving;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = WordOf( (short)14 );

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> SetCalendarShiftReplacements(MarkinBox.MBCalendarData cdata)
        {
            Console.WriteLine("CoreCommand: SetCalendarShiftReplacements");

            // data 
            MemoryAddress address = Addresses.NumOfCalendarShiftReplacements;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = CreateMBCalendarShiftDataBinarizer(cdata).Data;

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> SetCalendarYmdReplacements(MarkinBox.MBCalendarData cdata)
        {
            Console.WriteLine("CoreCommand: SetCalendarYmdReplacements");

            // data 
            MemoryAddress address = Addresses.CalendarYmdReplacements;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = CreateMBCalendarYmdDataBinarizer(cdata).Data;

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> SetSerialCounters(SCCountStateList sdata)
        {
            Console.WriteLine("CoreCommand: SetSerialCounters");

            // data 
            MemoryAddress address = Addresses.SerialCounters;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = CreateMBSerialCounterDataBinarizer(sdata).Data;

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> SetSerialSettings(IEnumerable<MarkinBox.MBSerialData> sdata)
        {
            Console.WriteLine("CoreCommand: SetSerialSettings");

            // data 
            MemoryAddress address = Addresses.SerialSettings;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = CreateMBSerialSettingDataBinarizer(sdata).Data;

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
        public async Task<WriteResponse> StartTextValidation(string text)
        {
            Console.WriteLine("CoreCommand: StartTextValidation");

            // data 
            MemoryAddress address = Addresses.TextValidationStore;
            var     needsResponse = true;
            var           timeout = 2000;
            var        retryCount = 3;
            Programmer       data = OnControllerTextValidation.TextValidationMemory.From(Formatter, text);

            var builder = readyWrite(address, data);
            var res     = await Write(
                builder.Build( needsResponse, timeout, retryCount )
            );
            await Task.Delay(10);
            return res;
        }
}}
