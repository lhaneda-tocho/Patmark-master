// 
// This code is generated by "EditorTemplate.tt"
// Not allowed to modify this code because your changes are deleted when in regeration.
// 


namespace TokyoChokoku.MarkinBox.Sketchbook.Fields
{
	using System;
	using System.Collections.Generic;

	using TokyoChokoku.MarkinBox.Sketchbook.Parameters;

	
	public sealed partial class Editor
	{
		public static Editor Create (MBData raw) {
			if ( !FieldTypeExt.IsDefined (raw.Type) ) {
				string errorMessage = "No such field type : " + raw.Type;
				var text = HorizontalText.Mutable.Create ();
				text.Parameter.Text = errorMessage;
				return Editor.Create ( text );
			}

			var fieldType = (FieldType)raw.Type;

			switch ( fieldType ) {
			case FieldType.HorizontalText:
				return new Editor (HorizontalText.Mutable.Create (raw));

			case FieldType.YVerticalText:
				return new Editor (YVerticalText.Mutable.Create (raw));

			case FieldType.XVerticalText:
				return new Editor (XVerticalText.Mutable.Create (raw));

			case FieldType.InnerArcText:
				return new Editor (InnerArcText.Mutable.Create (raw));

			case FieldType.OuterArcText:
				return new Editor (OuterArcText.Mutable.Create (raw));

			case FieldType.QrCode:
				return new Editor (QrCode.Mutable.Create (raw));

			case FieldType.DataMatrix:
				return new Editor (DataMatrix.Mutable.Create (raw));

			case FieldType.Rectangle:
				return new Editor (Rectangle.Mutable.Create (raw));

			case FieldType.Triangle:
				return new Editor (Triangle.Mutable.Create (raw));

			case FieldType.Circle:
				return new Editor (Circle.Mutable.Create (raw));

			case FieldType.Line:
				return new Editor (Line.Mutable.Create (raw));

			case FieldType.Bypass:
				return new Editor (Bypass.Mutable.Create (raw));

			case FieldType.Ellipse:
				return new Editor (Ellipse.Mutable.Create (raw));

			default:
				throw new ForgottenToImplementFactoryException ();
			}
		}


	}
}