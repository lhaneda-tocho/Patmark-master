﻿// 
// This code is generated by "MutableParameterTemplate.tt"
// Not allowed to modify this code because your changes are deleted when in regeration.
// 

namespace TokyoChokoku.MarkinBox.Sketchbook.Properties.Stores {
    using TokyoChokoku.MarkinBox.Sketchbook.Properties;
    using TokyoChokoku.MarkinBox.Sketchbook.Validators;
    using System.Linq;
    using System.Collections.Generic;

    public class CalendarYearStore : Store<char>
    {
        public CalendarYearStore(
            ValidatorDelegate<char> validator,
            Getter<char> Getter,
            Setter<char> Setter
        ) : base (validator, Getter, Setter)
        {
        }
    }
    public class CalendarMonthStore : Store<char>
    {
        public CalendarMonthStore(
            ValidatorDelegate<char> validator,
            Getter<char> Getter,
            Setter<char> Setter
        ) : base (validator, Getter, Setter)
        {
        }
    }
    public class CalendarDayStore : Store<char>
    {
        public CalendarDayStore(
            ValidatorDelegate<char> validator,
            Getter<char> Getter,
            Setter<char> Setter
        ) : base (validator, Getter, Setter)
        {
        }
    }

    public class CalendarShiftCodeStore : Store<char>
    {
        public CalendarShiftCodeStore(
            ValidatorDelegate<char> validator,
            Getter<char> Getter,
            Setter<char> Setter
        ) : base (validator, Getter, Setter)
        {
        }
    }
    public class CalendarShiftStartingHourStore : Store<byte>
    {
        public CalendarShiftStartingHourStore(
            ValidatorDelegate<byte> validator,
            Getter<byte> Getter,
            Setter<byte> Setter
        ) : base (validator, Getter, Setter)
        {
        }
    }
    public class CalendarShiftStartingMinuteStore : Store<byte>
    {
        public CalendarShiftStartingMinuteStore(
            ValidatorDelegate<byte> validator,
            Getter<byte> Getter,
            Setter<byte> Setter
        ) : base (validator, Getter, Setter)
        {
        }
    }
    public class CalendarShiftEndingHourStore : Store<byte>
    {
        public CalendarShiftEndingHourStore(
            ValidatorDelegate<byte> validator,
            Getter<byte> Getter,
            Setter<byte> Setter
        ) : base (validator, Getter, Setter)
        {
        }
    }
    public class CalendarShiftEndingMinuteStore : Store<byte>
    {
        public CalendarShiftEndingMinuteStore(
            ValidatorDelegate<byte> validator,
            Getter<byte> Getter,
            Setter<byte> Setter
        ) : base (validator, Getter, Setter)
        {
        }
    }

    public class CalendarShiftStore
    {
                public CalendarShiftCodeStore CodeStore;
                public CalendarShiftStartingHourStore StartingHourStore;
                public CalendarShiftStartingMinuteStore StartingMinuteStore;
                public CalendarShiftEndingHourStore EndingHourStore;
                public CalendarShiftEndingMinuteStore EndingMinuteStore;
        
        public CalendarShiftStore (
            MBCalendarShiftData data
        )
        {
                        this.CodeStore = new CalendarShiftCodeStore(
                new CalendarShiftCodeValidator().Validate,
                new Getter<char>(()=> {return data.Code;}),
                new Setter<char>((char value)=> {data.Code = value;})
            );
                        this.StartingHourStore = new CalendarShiftStartingHourStore(
                new CalendarShiftStartingHourValidator().Validate,
                new Getter<byte>(()=> {return data.StartingHour;}),
                new Setter<byte>((byte value)=> {data.StartingHour = value;})
            );
                        this.StartingMinuteStore = new CalendarShiftStartingMinuteStore(
                new CalendarShiftStartingMinuteValidator().Validate,
                new Getter<byte>(()=> {return data.StartingMinute;}),
                new Setter<byte>((byte value)=> {data.StartingMinute = value;})
            );
                        this.EndingHourStore = new CalendarShiftEndingHourStore(
                new CalendarShiftEndingHourValidator().Validate,
                new Getter<byte>(()=> {return data.EndingHour;}),
                new Setter<byte>((byte value)=> {data.EndingHour = value;})
            );
                        this.EndingMinuteStore = new CalendarShiftEndingMinuteStore(
                new CalendarShiftEndingMinuteValidator().Validate,
                new Getter<byte>(()=> {return data.EndingMinute;}),
                new Setter<byte>((byte value)=> {data.EndingMinute = value;})
            );
                    }
    }

    public static class CalendarYearStoresFactory
    {
        public static List<CalendarYearStore> Create(MBCalendarData data){
            var stores = new List<CalendarYearStore>();
                        stores.Add(new CalendarYearStore(
                new CalendarYearValidator().Validate,
                new Getter<char>(()=> {return data.YearReplacements["0"];}),
                new Setter<char>((char value)=> {data.YearReplacements["0"] = value;})
            ));
                        stores.Add(new CalendarYearStore(
                new CalendarYearValidator().Validate,
                new Getter<char>(()=> {return data.YearReplacements["1"];}),
                new Setter<char>((char value)=> {data.YearReplacements["1"] = value;})
            ));
                        stores.Add(new CalendarYearStore(
                new CalendarYearValidator().Validate,
                new Getter<char>(()=> {return data.YearReplacements["2"];}),
                new Setter<char>((char value)=> {data.YearReplacements["2"] = value;})
            ));
                        stores.Add(new CalendarYearStore(
                new CalendarYearValidator().Validate,
                new Getter<char>(()=> {return data.YearReplacements["3"];}),
                new Setter<char>((char value)=> {data.YearReplacements["3"] = value;})
            ));
                        stores.Add(new CalendarYearStore(
                new CalendarYearValidator().Validate,
                new Getter<char>(()=> {return data.YearReplacements["4"];}),
                new Setter<char>((char value)=> {data.YearReplacements["4"] = value;})
            ));
                        stores.Add(new CalendarYearStore(
                new CalendarYearValidator().Validate,
                new Getter<char>(()=> {return data.YearReplacements["5"];}),
                new Setter<char>((char value)=> {data.YearReplacements["5"] = value;})
            ));
                        stores.Add(new CalendarYearStore(
                new CalendarYearValidator().Validate,
                new Getter<char>(()=> {return data.YearReplacements["6"];}),
                new Setter<char>((char value)=> {data.YearReplacements["6"] = value;})
            ));
                        stores.Add(new CalendarYearStore(
                new CalendarYearValidator().Validate,
                new Getter<char>(()=> {return data.YearReplacements["7"];}),
                new Setter<char>((char value)=> {data.YearReplacements["7"] = value;})
            ));
                        stores.Add(new CalendarYearStore(
                new CalendarYearValidator().Validate,
                new Getter<char>(()=> {return data.YearReplacements["8"];}),
                new Setter<char>((char value)=> {data.YearReplacements["8"] = value;})
            ));
                        stores.Add(new CalendarYearStore(
                new CalendarYearValidator().Validate,
                new Getter<char>(()=> {return data.YearReplacements["9"];}),
                new Setter<char>((char value)=> {data.YearReplacements["9"] = value;})
            ));
                        return stores;
        }
    }
    public static class CalendarMonthStoresFactory
    {
        public static List<CalendarMonthStore> Create(MBCalendarData data){
            var stores = new List<CalendarMonthStore>();
                        stores.Add(new CalendarMonthStore(
                new CalendarMonthValidator().Validate,
                new Getter<char>(()=> {return data.MonthReplacements["1"];}),
                new Setter<char>((char value)=> {data.MonthReplacements["1"] = value;})
            ));
                        stores.Add(new CalendarMonthStore(
                new CalendarMonthValidator().Validate,
                new Getter<char>(()=> {return data.MonthReplacements["2"];}),
                new Setter<char>((char value)=> {data.MonthReplacements["2"] = value;})
            ));
                        stores.Add(new CalendarMonthStore(
                new CalendarMonthValidator().Validate,
                new Getter<char>(()=> {return data.MonthReplacements["3"];}),
                new Setter<char>((char value)=> {data.MonthReplacements["3"] = value;})
            ));
                        stores.Add(new CalendarMonthStore(
                new CalendarMonthValidator().Validate,
                new Getter<char>(()=> {return data.MonthReplacements["4"];}),
                new Setter<char>((char value)=> {data.MonthReplacements["4"] = value;})
            ));
                        stores.Add(new CalendarMonthStore(
                new CalendarMonthValidator().Validate,
                new Getter<char>(()=> {return data.MonthReplacements["5"];}),
                new Setter<char>((char value)=> {data.MonthReplacements["5"] = value;})
            ));
                        stores.Add(new CalendarMonthStore(
                new CalendarMonthValidator().Validate,
                new Getter<char>(()=> {return data.MonthReplacements["6"];}),
                new Setter<char>((char value)=> {data.MonthReplacements["6"] = value;})
            ));
                        stores.Add(new CalendarMonthStore(
                new CalendarMonthValidator().Validate,
                new Getter<char>(()=> {return data.MonthReplacements["7"];}),
                new Setter<char>((char value)=> {data.MonthReplacements["7"] = value;})
            ));
                        stores.Add(new CalendarMonthStore(
                new CalendarMonthValidator().Validate,
                new Getter<char>(()=> {return data.MonthReplacements["8"];}),
                new Setter<char>((char value)=> {data.MonthReplacements["8"] = value;})
            ));
                        stores.Add(new CalendarMonthStore(
                new CalendarMonthValidator().Validate,
                new Getter<char>(()=> {return data.MonthReplacements["9"];}),
                new Setter<char>((char value)=> {data.MonthReplacements["9"] = value;})
            ));
                        stores.Add(new CalendarMonthStore(
                new CalendarMonthValidator().Validate,
                new Getter<char>(()=> {return data.MonthReplacements["10"];}),
                new Setter<char>((char value)=> {data.MonthReplacements["10"] = value;})
            ));
                        stores.Add(new CalendarMonthStore(
                new CalendarMonthValidator().Validate,
                new Getter<char>(()=> {return data.MonthReplacements["11"];}),
                new Setter<char>((char value)=> {data.MonthReplacements["11"] = value;})
            ));
                        stores.Add(new CalendarMonthStore(
                new CalendarMonthValidator().Validate,
                new Getter<char>(()=> {return data.MonthReplacements["12"];}),
                new Setter<char>((char value)=> {data.MonthReplacements["12"] = value;})
            ));
                        return stores;
        }
    }
    public static class CalendarDayStoresFactory
    {
        public static List<CalendarDayStore> Create(MBCalendarData data){
            var stores = new List<CalendarDayStore>();
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["1"];}),
                new Setter<char>((char value)=> {data.DayReplacements["1"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["2"];}),
                new Setter<char>((char value)=> {data.DayReplacements["2"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["3"];}),
                new Setter<char>((char value)=> {data.DayReplacements["3"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["4"];}),
                new Setter<char>((char value)=> {data.DayReplacements["4"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["5"];}),
                new Setter<char>((char value)=> {data.DayReplacements["5"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["6"];}),
                new Setter<char>((char value)=> {data.DayReplacements["6"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["7"];}),
                new Setter<char>((char value)=> {data.DayReplacements["7"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["8"];}),
                new Setter<char>((char value)=> {data.DayReplacements["8"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["9"];}),
                new Setter<char>((char value)=> {data.DayReplacements["9"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["10"];}),
                new Setter<char>((char value)=> {data.DayReplacements["10"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["11"];}),
                new Setter<char>((char value)=> {data.DayReplacements["11"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["12"];}),
                new Setter<char>((char value)=> {data.DayReplacements["12"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["13"];}),
                new Setter<char>((char value)=> {data.DayReplacements["13"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["14"];}),
                new Setter<char>((char value)=> {data.DayReplacements["14"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["15"];}),
                new Setter<char>((char value)=> {data.DayReplacements["15"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["16"];}),
                new Setter<char>((char value)=> {data.DayReplacements["16"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["17"];}),
                new Setter<char>((char value)=> {data.DayReplacements["17"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["18"];}),
                new Setter<char>((char value)=> {data.DayReplacements["18"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["19"];}),
                new Setter<char>((char value)=> {data.DayReplacements["19"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["20"];}),
                new Setter<char>((char value)=> {data.DayReplacements["20"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["21"];}),
                new Setter<char>((char value)=> {data.DayReplacements["21"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["22"];}),
                new Setter<char>((char value)=> {data.DayReplacements["22"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["23"];}),
                new Setter<char>((char value)=> {data.DayReplacements["23"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["24"];}),
                new Setter<char>((char value)=> {data.DayReplacements["24"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["25"];}),
                new Setter<char>((char value)=> {data.DayReplacements["25"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["26"];}),
                new Setter<char>((char value)=> {data.DayReplacements["26"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["27"];}),
                new Setter<char>((char value)=> {data.DayReplacements["27"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["28"];}),
                new Setter<char>((char value)=> {data.DayReplacements["28"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["29"];}),
                new Setter<char>((char value)=> {data.DayReplacements["29"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["30"];}),
                new Setter<char>((char value)=> {data.DayReplacements["30"] = value;})
            ));
                        stores.Add(new CalendarDayStore(
                new CalendarDayValidator().Validate,
                new Getter<char>(()=> {return data.DayReplacements["31"];}),
                new Setter<char>((char value)=> {data.DayReplacements["31"] = value;})
            ));
                        return stores;
        }
    }

    public static class CalendarShiftStoresFactory
    {
        public static List<CalendarShiftStore> Create(MBCalendarData data){
            var stores = new List<CalendarShiftStore>();
            foreach(var shift in data.ShiftReplacements){
                stores.Add(new CalendarShiftStore(shift));
            }
            return stores;
        }
    }

}
