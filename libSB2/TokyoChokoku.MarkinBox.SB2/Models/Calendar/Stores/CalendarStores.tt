<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".designer.cs" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="TokyoChokoku.MarkinBox.Sketchbook.TemplateMeta" #>
<#@ include file="$(SolutionDir)/Global.ttinclude"#>
<#  #>
// 
// This code is generated by "MutableParameterTemplate.tt"
// Not allowed to modify this code because your changes are deleted when in regeration.
// 

namespace TokyoChokoku.MarkinBox.Sketchbook.Properties.Stores {
    using TokyoChokoku.MarkinBox.Sketchbook.Properties;
    using TokyoChokoku.MarkinBox.Sketchbook.Validators;
    using System.Linq;
    using System.Collections.Generic;

<#
foreach (var definition in MetaCalendarStores.YmdDefinitions){
#>
    public class Calendar<#= definition.Name #>Store : Store<char>
    {
        public Calendar<#= definition.Name #>Store(
            ValidatorDelegate<char> validator,
            Getter<char> Getter,
            Setter<char> Setter
        ) : base (validator, Getter, Setter)
        {
        }
    }
<#
}
#>

<#
foreach (var definition in MetaCalendarStores.ShiftDefinitions){
    var name = definition.Name;
    var typeName = definition.TypeName;
#>
    public class CalendarShift<#= name #>Store : Store<<#= typeName #>>
    {
        public CalendarShift<#= name #>Store(
            ValidatorDelegate<<#= typeName #>> validator,
            Getter<<#= typeName #>> Getter,
            Setter<<#= typeName #>> Setter
        ) : base (validator, Getter, Setter)
        {
        }
    }
<#
}
#>

    public class CalendarShiftStore
    {
        <#
        foreach (var definition in MetaCalendarStores.ShiftDefinitions){
        #>
        public CalendarShift<#= definition.Name #>Store <#= definition.Name #>Store;
        <# } #>

        public CalendarShiftStore (
            MBCalendarShiftData data
        )
        {
            <#
            foreach (var definition in MetaCalendarStores.ShiftDefinitions){
                var name = definition.Name;
                var typeName = definition.TypeName;
            #>
            this.<#= name #>Store = new CalendarShift<#= name #>Store(
                new CalendarShift<#= name #>Validator().Validate,
                new Getter<<#= typeName #>>(()=> {return data.<#= name #>;}),
                new Setter<<#= typeName #>>((<#= typeName #> value)=> {data.<#= name #> = value;})
            );
            <# } #>
        }
    }

<#
foreach (var definition in MetaCalendarStores.YmdDefinitions){
    var name = definition.Name;
#>
    public static class Calendar<#= name #>StoresFactory
    {
        public static List<Calendar<#= name #>Store> Create(MBCalendarData data){
            var stores = new List<Calendar<#= name #>Store>();
            <# foreach (int i in definition.Numbers) { #>
            stores.Add(new Calendar<#= name #>Store(
                new Calendar<#= name #>Validator().Validate,
                new Getter<char>(()=> {return data.<#= name #>Replacements["<#= i #>"];}),
                new Setter<char>((char value)=> {data.<#= name #>Replacements["<#= i #>"] = value;})
            ));
            <# } #>
            return stores;
        }
    }
<#
}
#>

    public static class CalendarShiftStoresFactory
    {
        public static List<CalendarShiftStore> Create(MBCalendarData data){
            var stores = new List<CalendarShiftStore>();
            foreach(var shift in data.ShiftReplacements){
                stores.Add(new CalendarShiftStore(shift));
            }
            return stores;
        }
    }

}
