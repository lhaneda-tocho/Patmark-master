<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".designer.cs" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="TokyoChokoku.MarkinBox.Sketchbook.TemplateMeta" #>
<#@ include file="$(SolutionDir)/Global.ttinclude"#>
<#  #>
// 
// This code is generated by "MutableParameterTemplate.tt"
// Not allowed to modify this code because your changes are deleted when in regeration.
// 

namespace TokyoChokoku.MarkinBox.Sketchbook.Properties.Stores {
    using TokyoChokoku.MarkinBox.Sketchbook.Properties;
    using TokyoChokoku.MarkinBox.Sketchbook.Validators;
    using System.Linq;
    using System.Collections.Generic;

<#
foreach (var definition in MetaSerialStores.SettingDefinitions){
    var name = definition.Name;
    var typeName = definition.Type;
#>
    public class SerialSettings<#= name #>Store : Store<<#= typeName #>>
    {
        public SerialSettings<#= name #>Store(
            MBSerialData data
        ) : base (
            new SerialSettings<#= name #>Validator().Validate,
            new Getter<<#= typeName #>>(()=> {return data.<#= name #>;}),
            new Setter<<#= typeName #>>((<#= typeName #> value)=> {data.<#= name #> = value;})
        )
        {
        }
    }
<#
}
#>

<#
foreach (var definition in MetaSerialStores.CounterDefinitions){
    var name = definition.Name;
    var typeName = definition.Type;
#>
    public class SerialCounter<#= name #>Store : Store<<#= typeName #>>
    {
        public SerialCounter<#= name #>Store(
            MBSerialCounterData data
        ) : base (
            new SerialCounter<#= name #>Validator().Validate,
            new Getter<<#= typeName #>>(()=> {return data.<#= name #>;}),
            new Setter<<#= typeName #>>((<#= typeName #> value)=> {data.<#= name #> = value;})
        )
        {
        }
    }
<#
}
#>

    public class SerialStores
    {
        <#
        foreach (var definition in MetaSerialStores.SettingDefinitions){
            var name = definition.Name;
        #>
            public SerialSettings<#= name #>Store <#= name #>Store { get; private set; }
        <#
        }
        #>

        <#
        foreach (var definition in MetaSerialStores.CounterDefinitions){
            var name = definition.Name;
        #>
            public SerialCounter<#= name #>Store Counter<#= name #>Store { get; private set; }
        <#
        }
        #>

        public SerialStores(MBSerialData data, MBSerialCounterData counterData){
            <#
            foreach (var definition in MetaSerialStores.SettingDefinitions){
                var name = definition.Name;
            #>
                <#= name #>Store = new SerialSettings<#= name #>Store(data);
            <#
            }
            #>

            <#
            foreach (var definition in MetaSerialStores.CounterDefinitions){
                var name = definition.Name;
            #>
                Counter<#= name #>Store = new SerialCounter<#= name #>Store(counterData);
            <#
            }
            #>
        }
    }


}
