﻿// 
// This code is generated by "MutableParameterTemplate.tt"
// Not allowed to modify this code because your changes are deleted when in regeration.
// 

namespace TokyoChokoku.MarkinBox.Sketchbook.Properties.Stores {
    using TokyoChokoku.MarkinBox.Sketchbook.Properties;
    using TokyoChokoku.MarkinBox.Sketchbook.Validators;
    using System.Linq;
    using System.Collections.Generic;

    public class SerialSettingsFormatStore : Store<short>
    {
        public SerialSettingsFormatStore(
            MBSerialData data
        ) : base (
            new SerialSettingsFormatValidator().Validate,
            new Getter<short>(()=> {return data.Format;}),
            new Setter<short>((short value)=> {data.Format = value;})
        )
        {
        }
    }
    public class SerialSettingsClearingConditionStore : Store<short>
    {
        public SerialSettingsClearingConditionStore(
            MBSerialData data
        ) : base (
            new SerialSettingsClearingConditionValidator().Validate,
            new Getter<short>(()=> {return data.ClearingCondition;}),
            new Setter<short>((short value)=> {data.ClearingCondition = value;})
        )
        {
        }
    }
    public class SerialSettingsMaxValueStore : Store<int>
    {
        public SerialSettingsMaxValueStore(
            MBSerialData data
        ) : base (
            new SerialSettingsMaxValueValidator().Validate,
            new Getter<int>(()=> {return data.MaxValue;}),
            new Setter<int>((int value)=> {data.MaxValue = value;})
        )
        {
        }
    }
    public class SerialSettingsMinValueStore : Store<int>
    {
        public SerialSettingsMinValueStore(
            MBSerialData data
        ) : base (
            new SerialSettingsMinValueValidator().Validate,
            new Getter<int>(()=> {return data.MinValue;}),
            new Setter<int>((int value)=> {data.MinValue = value;})
        )
        {
        }
    }
    public class SerialSettingsRepeatingCountStore : Store<byte>
    {
        public SerialSettingsRepeatingCountStore(
            MBSerialData data
        ) : base (
            new SerialSettingsRepeatingCountValidator().Validate,
            new Getter<byte>(()=> {return data.RepeatingCount;}),
            new Setter<byte>((byte value)=> {data.RepeatingCount = value;})
        )
        {
        }
    }
    public class SerialSettingsClearingTimeHHStore : Store<short>
    {
        public SerialSettingsClearingTimeHHStore(
            MBSerialData data
        ) : base (
            new SerialSettingsClearingTimeHHValidator().Validate,
            new Getter<short>(()=> {return data.ClearingTimeHH;}),
            new Setter<short>((short value)=> {data.ClearingTimeHH = value;})
        )
        {
        }
    }
    public class SerialSettingsClearingTimeMMStore : Store<short>
    {
        public SerialSettingsClearingTimeMMStore(
            MBSerialData data
        ) : base (
            new SerialSettingsClearingTimeMMValidator().Validate,
            new Getter<short>(()=> {return data.ClearingTimeMM;}),
            new Setter<short>((short value)=> {data.ClearingTimeMM = value;})
        )
        {
        }
    }

    public class SerialCounterSerialNoStore : Store<short>
    {
        public SerialCounterSerialNoStore(
            MBSerialCounterData data
        ) : base (
            new SerialCounterSerialNoValidator().Validate,
            new Getter<short>(()=> {return data.SerialNo;}),
            new Setter<short>((short value)=> {data.SerialNo = value;})
        )
        {
        }
    }
    public class SerialCounterCurrentValueStore : Store<int>
    {
        public SerialCounterCurrentValueStore(
            MBSerialCounterData data
        ) : base (
            new SerialCounterCurrentValueValidator().Validate,
            new Getter<int>(()=> {return data.CurrentValue;}),
            new Setter<int>((int value)=> {data.CurrentValue = value;})
        )
        {
        }
    }

    public class SerialStores
    {
                    public SerialSettingsFormatStore FormatStore { get; private set; }
                    public SerialSettingsClearingConditionStore ClearingConditionStore { get; private set; }
                    public SerialSettingsMaxValueStore MaxValueStore { get; private set; }
                    public SerialSettingsMinValueStore MinValueStore { get; private set; }
                    public SerialSettingsRepeatingCountStore RepeatingCountStore { get; private set; }
                    public SerialSettingsClearingTimeHHStore ClearingTimeHHStore { get; private set; }
                    public SerialSettingsClearingTimeMMStore ClearingTimeMMStore { get; private set; }
        
                    public SerialCounterSerialNoStore CounterSerialNoStore { get; private set; }
                    public SerialCounterCurrentValueStore CounterCurrentValueStore { get; private set; }
        
        public SerialStores(MBSerialData data, MBSerialCounterData counterData){
                            FormatStore = new SerialSettingsFormatStore(data);
                            ClearingConditionStore = new SerialSettingsClearingConditionStore(data);
                            MaxValueStore = new SerialSettingsMaxValueStore(data);
                            MinValueStore = new SerialSettingsMinValueStore(data);
                            RepeatingCountStore = new SerialSettingsRepeatingCountStore(data);
                            ClearingTimeHHStore = new SerialSettingsClearingTimeHHStore(data);
                            ClearingTimeMMStore = new SerialSettingsClearingTimeMMStore(data);
            
                            CounterSerialNoStore = new SerialCounterSerialNoStore(counterData);
                            CounterCurrentValueStore = new SerialCounterCurrentValueStore(counterData);
                    }
    }


}
