<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".designer.cs" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="TokyoChokoku.MarkinBox.Sketchbook.TemplateMeta" #>
<#@ include file="$(SolutionDir)/Global.ttinclude"#>
<#  #>
// 
// This code is generated by template.
// Not allowed to modify this code because your changes are deleted when in regeration.
// 

namespace TokyoChokoku.MarkinBox.Sketchbook.Validators {
    using System;
    using TokyoChokoku.MarkinBox.Sketchbook.Parameters;

	public abstract partial class MarkingValidator {
    
<#
foreach( var field in MetaFields.Definitions) {
    var param     = field.Parameter;
#>
        public static MarkingValidator CreateOf<#= field.Name #> (IBase<#= param.Name #> param) {
            return new Of<#= param.Name #> (param);
        }


        private class Of<#= param.Name #> : MarkingValidator {
            IBase<#= param.Name #> p;

            public Of<#= param.Name #> (IBase<#= param.Name #> p) {
                this.p = p;
            }

            protected override short Speed { get {
                return p.Speed;
            }}
            protected override short Power { get {
                return p.Power;
            }}
            protected override bool  Pause { get {
                return p.Pause;
            }}
        }


<#
}
#>
        
    }
}