<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".designer.cs" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="TokyoChokoku.MarkinBox.Sketchbook.TemplateMeta" #>
<#@ include file="$(SolutionDir)/Global.ttinclude"#>
<#  #>
// 
// This code is generated by template.
// Not allowed to modify this code because your changes are deleted when in regeration.
// 

namespace TokyoChokoku.MarkinBox.Sketchbook.Validators {
    using System;
    using TokyoChokoku.MarkinBox.Sketchbook.Parameters;

    public abstract partial class MarkupTextValidator {
    
<#
foreach( var field in MetaFields.Definitions) {
    var param     = field.Parameter;

    if (param.PropertyDefinitions
        .Where ( (obj) => {return obj.StoreTypeName.Equals ("TextStore"); } )
        .Count () != 0 ) {
#>
        public static MarkupTextValidator CreateOf<#= field.Name #> (IBase<#= param.Name #> param) {
            return new Of<#= param.Name #> (param);
        }


        private class Of<#= param.Name #> : MarkupTextValidator {
            IBase<#= param.Name #> p;

            public Of<#= param.Name #> (IBase<#= param.Name #> p) {
                this.p = p;
            }

            protected override string Text { get {
                return p.Text;
            }}
        }


<#
    }
#>
<#
}
#>
        
    }
}