﻿// 
// This code is generated by template.
// Not allowed to modify this code because your changes are deleted when in regeration.
// 

namespace TokyoChokoku.MarkinBox.Sketchbook.Validators {
    using System;
    using TokyoChokoku.MarkinBox.Sketchbook.Parameters;

    public interface IHorizontalTextGeometryValidator {
        ValidationResult ValidatePower (short newValue);
        ValidationResult ValidateSpeed (short newValue);
        ValidationResult ValidateJogging (bool newValue);
        ValidationResult ValidateReverse (bool newValue);
        ValidationResult ValidatePause (bool newValue);
        ValidationResult ValidateBasePoint (byte newValue);
        ValidationResult ValidateMirrored (bool newValue);
        ValidationResult ValidateX (decimal newValue);
        ValidationResult ValidateY (decimal newValue);
        ValidationResult ValidateText (string newValue);
        ValidationResult ValidateFont (FontMode newValue);
        ValidationResult ValidatePitch (decimal newValue);
        ValidationResult ValidateHeight (decimal newValue);
        ValidationResult ValidateAspect (decimal newValue);
        ValidationResult ValidateAngle (decimal newValue);
    }


    public partial class HorizontalTextGeometryValidator : IHorizontalTextGeometryValidator {

        IBaseHorizontalTextParameter Parameter { get; }
        
        public static HorizontalTextGeometryValidator Create (IBaseHorizontalTextParameter param) {
            return new HorizontalTextGeometryValidator (param);
        }

        private HorizontalTextGeometryValidator (IBaseHorizontalTextParameter param) {
            Parameter = param;
        }

        // テンプレートにより無効化されています
        public ValidationResult ValidatePower (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateSpeed (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateJogging (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateReverse (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidatePause (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateBasePoint (byte newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateMirrored (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateX (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateY (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateText (string newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateFont (FontMode newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidatePitch (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateHeight (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateAspect (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateAngle (decimal newValue) {
            return ValidationResult.Empty;
        }
    }


    public interface IYVerticalTextGeometryValidator {
        ValidationResult ValidatePower (short newValue);
        ValidationResult ValidateSpeed (short newValue);
        ValidationResult ValidateJogging (bool newValue);
        ValidationResult ValidateReverse (bool newValue);
        ValidationResult ValidatePause (bool newValue);
        ValidationResult ValidateBasePoint (byte newValue);
        ValidationResult ValidateMirrored (bool newValue);
        ValidationResult ValidateX (decimal newValue);
        ValidationResult ValidateY (decimal newValue);
        ValidationResult ValidateText (string newValue);
        ValidationResult ValidateFont (FontMode newValue);
        ValidationResult ValidatePitch (decimal newValue);
        ValidationResult ValidateHeight (decimal newValue);
        ValidationResult ValidateAspect (decimal newValue);
        ValidationResult ValidateAngle (decimal newValue);
    }


    public partial class YVerticalTextGeometryValidator : IYVerticalTextGeometryValidator {

        IBaseYVerticalTextParameter Parameter { get; }
        
        public static YVerticalTextGeometryValidator Create (IBaseYVerticalTextParameter param) {
            return new YVerticalTextGeometryValidator (param);
        }

        private YVerticalTextGeometryValidator (IBaseYVerticalTextParameter param) {
            Parameter = param;
        }

        // テンプレートにより無効化されています
        public ValidationResult ValidatePower (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateSpeed (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateJogging (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateReverse (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidatePause (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateBasePoint (byte newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateMirrored (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateX (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateY (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateText (string newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateFont (FontMode newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidatePitch (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateHeight (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateAspect (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateAngle (decimal newValue) {
            return ValidationResult.Empty;
        }
    }


    public interface IXVerticalTextGeometryValidator {
        ValidationResult ValidatePower (short newValue);
        ValidationResult ValidateSpeed (short newValue);
        ValidationResult ValidateJogging (bool newValue);
        ValidationResult ValidateReverse (bool newValue);
        ValidationResult ValidatePause (bool newValue);
        ValidationResult ValidateBasePoint (byte newValue);
        ValidationResult ValidateMirrored (bool newValue);
        ValidationResult ValidateX (decimal newValue);
        ValidationResult ValidateY (decimal newValue);
        ValidationResult ValidateText (string newValue);
        ValidationResult ValidateFont (FontMode newValue);
        ValidationResult ValidatePitch (decimal newValue);
        ValidationResult ValidateHeight (decimal newValue);
        ValidationResult ValidateAspect (decimal newValue);
        ValidationResult ValidateAngle (decimal newValue);
    }


    public partial class XVerticalTextGeometryValidator : IXVerticalTextGeometryValidator {

        IBaseXVerticalTextParameter Parameter { get; }
        
        public static XVerticalTextGeometryValidator Create (IBaseXVerticalTextParameter param) {
            return new XVerticalTextGeometryValidator (param);
        }

        private XVerticalTextGeometryValidator (IBaseXVerticalTextParameter param) {
            Parameter = param;
        }

        // テンプレートにより無効化されています
        public ValidationResult ValidatePower (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateSpeed (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateJogging (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateReverse (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidatePause (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateBasePoint (byte newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateMirrored (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateX (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateY (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateText (string newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateFont (FontMode newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidatePitch (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateHeight (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateAspect (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateAngle (decimal newValue) {
            return ValidationResult.Empty;
        }
    }


    public interface IInnerArcTextGeometryValidator {
        ValidationResult ValidatePower (short newValue);
        ValidationResult ValidateSpeed (short newValue);
        ValidationResult ValidateJogging (bool newValue);
        ValidationResult ValidateReverse (bool newValue);
        ValidationResult ValidatePause (bool newValue);
        ValidationResult ValidateBasePoint (byte newValue);
        ValidationResult ValidateMirrored (bool newValue);
        ValidationResult ValidateX (decimal newValue);
        ValidationResult ValidateY (decimal newValue);
        ValidationResult ValidateText (string newValue);
        ValidationResult ValidateFont (FontMode newValue);
        ValidationResult ValidatePitch (decimal newValue);
        ValidationResult ValidateHeight (decimal newValue);
        ValidationResult ValidateAspect (decimal newValue);
        ValidationResult ValidateRadius (decimal newValue);
        ValidationResult ValidateAngle (decimal newValue);
    }


    public partial class InnerArcTextGeometryValidator : IInnerArcTextGeometryValidator {

        IBaseInnerArcTextParameter Parameter { get; }
        
        public static InnerArcTextGeometryValidator Create (IBaseInnerArcTextParameter param) {
            return new InnerArcTextGeometryValidator (param);
        }

        private InnerArcTextGeometryValidator (IBaseInnerArcTextParameter param) {
            Parameter = param;
        }

        // テンプレートにより無効化されています
        public ValidationResult ValidatePower (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateSpeed (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateJogging (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateReverse (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidatePause (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateBasePoint (byte newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateMirrored (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateX (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateY (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateText (string newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateFont (FontMode newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidatePitch (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateHeight (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateAspect (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateRadius (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateAngle (decimal newValue) {
            return ValidationResult.Empty;
        }
    }


    public interface IOuterArcTextGeometryValidator {
        ValidationResult ValidatePower (short newValue);
        ValidationResult ValidateSpeed (short newValue);
        ValidationResult ValidateJogging (bool newValue);
        ValidationResult ValidateReverse (bool newValue);
        ValidationResult ValidatePause (bool newValue);
        ValidationResult ValidateBasePoint (byte newValue);
        ValidationResult ValidateMirrored (bool newValue);
        ValidationResult ValidateX (decimal newValue);
        ValidationResult ValidateY (decimal newValue);
        ValidationResult ValidateText (string newValue);
        ValidationResult ValidateFont (FontMode newValue);
        ValidationResult ValidatePitch (decimal newValue);
        ValidationResult ValidateHeight (decimal newValue);
        ValidationResult ValidateAspect (decimal newValue);
        ValidationResult ValidateRadius (decimal newValue);
        ValidationResult ValidateAngle (decimal newValue);
    }


    public partial class OuterArcTextGeometryValidator : IOuterArcTextGeometryValidator {

        IBaseOuterArcTextParameter Parameter { get; }
        
        public static OuterArcTextGeometryValidator Create (IBaseOuterArcTextParameter param) {
            return new OuterArcTextGeometryValidator (param);
        }

        private OuterArcTextGeometryValidator (IBaseOuterArcTextParameter param) {
            Parameter = param;
        }

        // テンプレートにより無効化されています
        public ValidationResult ValidatePower (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateSpeed (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateJogging (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateReverse (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidatePause (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateBasePoint (byte newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateMirrored (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateX (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateY (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateText (string newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateFont (FontMode newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidatePitch (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateHeight (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateAspect (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateRadius (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateAngle (decimal newValue) {
            return ValidationResult.Empty;
        }
    }


    public interface IQrCodeGeometryValidator {
        ValidationResult ValidatePower (short newValue);
        ValidationResult ValidateSpeed (short newValue);
        ValidationResult ValidateJogging (bool newValue);
        ValidationResult ValidateReverse (bool newValue);
        ValidationResult ValidatePause (bool newValue);
        ValidationResult ValidateBasePoint (byte newValue);
        ValidationResult ValidateMirrored (bool newValue);
        ValidationResult ValidateX (decimal newValue);
        ValidationResult ValidateY (decimal newValue);
        ValidationResult ValidateText (string newValue);
        ValidationResult ValidateHeight (decimal newValue);
        ValidationResult ValidateAngle (decimal newValue);
    }


    public partial class QrCodeGeometryValidator : IQrCodeGeometryValidator {

        IBaseQrCodeParameter Parameter { get; }
        
        public static QrCodeGeometryValidator Create (IBaseQrCodeParameter param) {
            return new QrCodeGeometryValidator (param);
        }

        private QrCodeGeometryValidator (IBaseQrCodeParameter param) {
            Parameter = param;
        }

        // テンプレートにより無効化されています
        public ValidationResult ValidatePower (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateSpeed (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateJogging (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateReverse (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidatePause (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateBasePoint (byte newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateMirrored (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateX (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateY (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateText (string newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateHeight (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateAngle (decimal newValue) {
            return ValidationResult.Empty;
        }
    }


    public interface IDataMatrixGeometryValidator {
        ValidationResult ValidatePower (short newValue);
        ValidationResult ValidateSpeed (short newValue);
        ValidationResult ValidateJogging (bool newValue);
        ValidationResult ValidateReverse (bool newValue);
        ValidationResult ValidatePause (bool newValue);
        ValidationResult ValidateBasePoint (byte newValue);
        ValidationResult ValidateMirrored (bool newValue);
        ValidationResult ValidateX (decimal newValue);
        ValidationResult ValidateY (decimal newValue);
        ValidationResult ValidateText (string newValue);
        ValidationResult ValidateHeight (decimal newValue);
        ValidationResult ValidateAngle (decimal newValue);
        ValidationResult ValidateDotCount (DotCount2D newValue);
    }


    public partial class DataMatrixGeometryValidator : IDataMatrixGeometryValidator {

        IBaseDataMatrixParameter Parameter { get; }
        
        public static DataMatrixGeometryValidator Create (IBaseDataMatrixParameter param) {
            return new DataMatrixGeometryValidator (param);
        }

        private DataMatrixGeometryValidator (IBaseDataMatrixParameter param) {
            Parameter = param;
        }

        // テンプレートにより無効化されています
        public ValidationResult ValidatePower (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateSpeed (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateJogging (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateReverse (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidatePause (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateBasePoint (byte newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateMirrored (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateX (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateY (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateText (string newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateHeight (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateAngle (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateDotCount (DotCount2D newValue) {
            return ValidationResult.Empty;
        }
    }


    public interface IRectangleGeometryValidator {
        ValidationResult ValidatePower (short newValue);
        ValidationResult ValidateSpeed (short newValue);
        ValidationResult ValidateJogging (bool newValue);
        ValidationResult ValidateReverse (bool newValue);
        ValidationResult ValidatePause (bool newValue);
        ValidationResult ValidateBasePoint (byte newValue);
        ValidationResult ValidateX (decimal newValue);
        ValidationResult ValidateY (decimal newValue);
        ValidationResult ValidateHeight (decimal newValue);
        ValidationResult ValidateAspect (decimal newValue);
        ValidationResult ValidateAngle (decimal newValue);
    }


    public partial class RectangleGeometryValidator : IRectangleGeometryValidator {

        IBaseRectangleParameter Parameter { get; }
        
        public static RectangleGeometryValidator Create (IBaseRectangleParameter param) {
            return new RectangleGeometryValidator (param);
        }

        private RectangleGeometryValidator (IBaseRectangleParameter param) {
            Parameter = param;
        }

        // テンプレートにより無効化されています
        public ValidationResult ValidatePower (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateSpeed (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateJogging (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateReverse (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidatePause (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateBasePoint (byte newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateX (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateY (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateHeight (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateAspect (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateAngle (decimal newValue) {
            return ValidationResult.Empty;
        }
    }


    public interface ITriangleGeometryValidator {
        ValidationResult ValidatePower (short newValue);
        ValidationResult ValidateSpeed (short newValue);
        ValidationResult ValidateJogging (bool newValue);
        ValidationResult ValidateReverse (bool newValue);
        ValidationResult ValidatePause (bool newValue);
        ValidationResult ValidateBasePoint (byte newValue);
        ValidationResult ValidateX (decimal newValue);
        ValidationResult ValidateY (decimal newValue);
        ValidationResult ValidateHornX (decimal newValue);
        ValidationResult ValidateHeight (decimal newValue);
        ValidationResult ValidateAspect (decimal newValue);
        ValidationResult ValidateAngle (decimal newValue);
    }


    public partial class TriangleGeometryValidator : ITriangleGeometryValidator {

        IBaseTriangleParameter Parameter { get; }
        
        public static TriangleGeometryValidator Create (IBaseTriangleParameter param) {
            return new TriangleGeometryValidator (param);
        }

        private TriangleGeometryValidator (IBaseTriangleParameter param) {
            Parameter = param;
        }

        // テンプレートにより無効化されています
        public ValidationResult ValidatePower (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateSpeed (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateJogging (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateReverse (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidatePause (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateBasePoint (byte newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateX (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateY (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateHornX (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateHeight (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateAspect (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateAngle (decimal newValue) {
            return ValidationResult.Empty;
        }
    }


    public interface ICircleGeometryValidator {
        ValidationResult ValidatePower (short newValue);
        ValidationResult ValidateSpeed (short newValue);
        ValidationResult ValidateJogging (bool newValue);
        ValidationResult ValidateReverse (bool newValue);
        ValidationResult ValidatePause (bool newValue);
        ValidationResult ValidateBasePoint (byte newValue);
        ValidationResult ValidateX (decimal newValue);
        ValidationResult ValidateY (decimal newValue);
        ValidationResult ValidateRadius (decimal newValue);
    }


    public partial class CircleGeometryValidator : ICircleGeometryValidator {

        IBaseCircleParameter Parameter { get; }
        
        public static CircleGeometryValidator Create (IBaseCircleParameter param) {
            return new CircleGeometryValidator (param);
        }

        private CircleGeometryValidator (IBaseCircleParameter param) {
            Parameter = param;
        }

        // テンプレートにより無効化されています
        public ValidationResult ValidatePower (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateSpeed (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateJogging (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateReverse (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidatePause (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateBasePoint (byte newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateX (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateY (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateRadius (decimal newValue) {
            return ValidationResult.Empty;
        }
    }


    public interface ILineGeometryValidator {
        ValidationResult ValidatePower (short newValue);
        ValidationResult ValidateSpeed (short newValue);
        ValidationResult ValidateJogging (bool newValue);
        ValidationResult ValidateReverse (bool newValue);
        ValidationResult ValidatePause (bool newValue);
        ValidationResult ValidateStartX (decimal newValue);
        ValidationResult ValidateStartY (decimal newValue);
        ValidationResult ValidateCenterX (decimal newValue);
        ValidationResult ValidateCenterY (decimal newValue);
        ValidationResult ValidateEndX (decimal newValue);
        ValidationResult ValidateEndY (decimal newValue);
        ValidationResult ValidateIsBezierCurve (bool newValue);
    }


    public partial class LineGeometryValidator : ILineGeometryValidator {

        IBaseLineParameter Parameter { get; }
        
        public static LineGeometryValidator Create (IBaseLineParameter param) {
            return new LineGeometryValidator (param);
        }

        private LineGeometryValidator (IBaseLineParameter param) {
            Parameter = param;
        }

        // テンプレートにより無効化されています
        public ValidationResult ValidatePower (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateSpeed (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateJogging (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateReverse (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidatePause (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateStartX (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateStartY (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateCenterX (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateCenterY (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateEndX (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateEndY (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateIsBezierCurve (bool newValue) {
            return ValidationResult.Empty;
        }
    }


    public interface IBypassGeometryValidator {
        ValidationResult ValidatePower (short newValue);
        ValidationResult ValidateSpeed (short newValue);
        ValidationResult ValidateJogging (bool newValue);
        ValidationResult ValidateReverse (bool newValue);
        ValidationResult ValidatePause (bool newValue);
        ValidationResult ValidateX (decimal newValue);
        ValidationResult ValidateY (decimal newValue);
    }


    public partial class BypassGeometryValidator : IBypassGeometryValidator {

        IBaseBypassParameter Parameter { get; }
        
        public static BypassGeometryValidator Create (IBaseBypassParameter param) {
            return new BypassGeometryValidator (param);
        }

        private BypassGeometryValidator (IBaseBypassParameter param) {
            Parameter = param;
        }

        // テンプレートにより無効化されています
        public ValidationResult ValidatePower (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateSpeed (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateJogging (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateReverse (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidatePause (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateX (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateY (decimal newValue) {
            return ValidationResult.Empty;
        }
    }


    public interface IEllipseGeometryValidator {
        ValidationResult ValidatePower (short newValue);
        ValidationResult ValidateSpeed (short newValue);
        ValidationResult ValidateJogging (bool newValue);
        ValidationResult ValidateReverse (bool newValue);
        ValidationResult ValidatePause (bool newValue);
        ValidationResult ValidateBasePoint (byte newValue);
        ValidationResult ValidateX (decimal newValue);
        ValidationResult ValidateY (decimal newValue);
        ValidationResult ValidateHeight (decimal newValue);
        ValidationResult ValidateAspect (decimal newValue);
        ValidationResult ValidateAngle (decimal newValue);
    }


    public partial class EllipseGeometryValidator : IEllipseGeometryValidator {

        IBaseEllipseParameter Parameter { get; }
        
        public static EllipseGeometryValidator Create (IBaseEllipseParameter param) {
            return new EllipseGeometryValidator (param);
        }

        private EllipseGeometryValidator (IBaseEllipseParameter param) {
            Parameter = param;
        }

        // テンプレートにより無効化されています
        public ValidationResult ValidatePower (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateSpeed (short newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateJogging (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateReverse (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidatePause (bool newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateBasePoint (byte newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateX (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateY (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateHeight (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateAspect (decimal newValue) {
            return ValidationResult.Empty;
        }
        public ValidationResult ValidateAngle (decimal newValue) {
            return ValidationResult.Empty;
        }
    }


}