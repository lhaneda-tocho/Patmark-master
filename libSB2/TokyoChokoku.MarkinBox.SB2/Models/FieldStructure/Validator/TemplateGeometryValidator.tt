<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".designer.cs" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="TokyoChokoku.MarkinBox.Sketchbook.TemplateMeta" #>
<#@ include file="$(SolutionDir)/Global.ttinclude"#>
<#  #>
// 
// This code is generated by template.
// Not allowed to modify this code because your changes are deleted when in regeration.
// 

namespace TokyoChokoku.MarkinBox.Sketchbook.Validators {
    using System;
    using TokyoChokoku.MarkinBox.Sketchbook.Parameters;

<#
foreach( var field in MetaFields.Definitions) {
    var param     = field.Parameter;
    var validator = GeometryValidatorDefinitions.Dictionary [field];
#>
    public interface I<#= validator.TypeName #> {
<#
    foreach( var prop in param.PropertyDefinitions) {
        var method = validator.GenValidationMethodName (prop);
        var adjust = validator.GenAdjustMethodName (prop);
#>
        ValidationResult <#= method #> (<#= prop.ContentTypeName #> newValue);
<#
    }
#>
    }


    public partial class <#= validator.TypeName #> : I<#= validator.TypeName #> {

        IBase<#= param.Name #> Parameter { get; }
        
        public static <#= validator.TypeName #> Create (IBase<#= param.Name #> param) {
            return new <#= validator.TypeName #> (param);
        }

        private <#= validator.TypeName #> (IBase<#= param.Name #> param) {
            Parameter = param;
        }

        // テンプレートにより無効化されています
<#
    foreach( var prop in param.PropertyDefinitions) {
        var method = validator.GenValidationMethodName (prop);
        var adjust = validator.GenAdjustMethodName (prop);
#>
        public ValidationResult <#= method #> (<#= prop.ContentTypeName #> newValue) {
            return ValidationResult.Empty;
        }
<#
    }
#>
    }


<#
}
#>
}