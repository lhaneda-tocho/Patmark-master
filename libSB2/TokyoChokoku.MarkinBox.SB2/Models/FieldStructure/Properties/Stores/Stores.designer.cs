﻿// 
// This code is generated by "MutableParameterTemplate.tt"
// Not allowed to modify this code because your changes are deleted when in regeration.
// 

namespace TokyoChokoku.MarkinBox.Sketchbook.Properties.Stores {
    using TokyoChokoku.MarkinBox.Sketchbook.Properties;
    using TokyoChokoku.MarkinBox.Sketchbook.Validators;

    public class TextStore : Store<string>
    {
        public TextStore (
            ValidatorDelegate <string> validator,
            Getter<string> getter,
            Setter<string> setter) : base (validator, getter, setter)
        {}
    }


    public class FontStore : Store<FontMode>
    {
        public FontStore (
            ValidatorDelegate <FontMode> validator,
            Getter<FontMode> getter,
            Setter<FontMode> setter) : base (validator, getter, setter)
        {}
    }


    public class ModeStore : Store<short>
    {
        public ModeStore (
            ValidatorDelegate <short> validator,
            Getter<short> getter,
            Setter<short> setter) : base (validator, getter, setter)
        {}
    }


    public class PrmFlStore : Store<short>
    {
        public PrmFlStore (
            ValidatorDelegate <short> validator,
            Getter<short> getter,
            Setter<short> setter) : base (validator, getter, setter)
        {}
    }


    public class IdStore : Store<short>
    {
        public IdStore (
            ValidatorDelegate <short> validator,
            Getter<short> getter,
            Setter<short> setter) : base (validator, getter, setter)
        {}
    }


    public class XStore : Store<decimal>
    {
        public XStore (
            ValidatorDelegate <decimal> validator,
            Getter<decimal> getter,
            Setter<decimal> setter) : base (validator, getter, setter)
        {}
    }


    public class YStore : Store<decimal>
    {
        public YStore (
            ValidatorDelegate <decimal> validator,
            Getter<decimal> getter,
            Setter<decimal> setter) : base (validator, getter, setter)
        {}
    }


    public class ZDepthStore : Store<short>
    {
        public ZDepthStore (
            ValidatorDelegate <short> validator,
            Getter<short> getter,
            Setter<short> setter) : base (validator, getter, setter)
        {}
    }


    public class HeightStore : Store<decimal>
    {
        public HeightStore (
            ValidatorDelegate <decimal> validator,
            Getter<decimal> getter,
            Setter<decimal> setter) : base (validator, getter, setter)
        {}
    }


    public class PitchStore : Store<decimal>
    {
        public PitchStore (
            ValidatorDelegate <decimal> validator,
            Getter<decimal> getter,
            Setter<decimal> setter) : base (validator, getter, setter)
        {}
    }


    public class AspectStore : Store<decimal>
    {
        public AspectStore (
            ValidatorDelegate <decimal> validator,
            Getter<decimal> getter,
            Setter<decimal> setter) : base (validator, getter, setter)
        {}
    }


    public class AngleStore : Store<decimal>
    {
        public AngleStore (
            ValidatorDelegate <decimal> validator,
            Getter<decimal> getter,
            Setter<decimal> setter) : base (validator, getter, setter)
        {}
    }


    public class RadiusStore : Store<decimal>
    {
        public RadiusStore (
            ValidatorDelegate <decimal> validator,
            Getter<decimal> getter,
            Setter<decimal> setter) : base (validator, getter, setter)
        {}
    }


    public class MirroredStore : Store<bool>
    {
        public MirroredStore (
            ValidatorDelegate <bool> validator,
            Getter<bool> getter,
            Setter<bool> setter) : base (validator, getter, setter)
        {}
    }


    public class SpeedStore : Store<short>
    {
        public SpeedStore (
            ValidatorDelegate <short> validator,
            Getter<short> getter,
            Setter<short> setter) : base (validator, getter, setter)
        {}
    }


    public class JoggingStore : Store<bool>
    {
        public JoggingStore (
            ValidatorDelegate <bool> validator,
            Getter<bool> getter,
            Setter<bool> setter) : base (validator, getter, setter)
        {}
    }


    public class PauseStore : Store<bool>
    {
        public PauseStore (
            ValidatorDelegate <bool> validator,
            Getter<bool> getter,
            Setter<bool> setter) : base (validator, getter, setter)
        {}
    }


    public class DensityStore : Store<short>
    {
        public DensityStore (
            ValidatorDelegate <short> validator,
            Getter<short> getter,
            Setter<short> setter) : base (validator, getter, setter)
        {}
    }


    public class PowerStore : Store<short>
    {
        public PowerStore (
            ValidatorDelegate <short> validator,
            Getter<short> getter,
            Setter<short> setter) : base (validator, getter, setter)
        {}
    }


    public class HostVersionStore : Store<ushort>
    {
        public HostVersionStore (
            ValidatorDelegate <ushort> validator,
            Getter<ushort> getter,
            Setter<ushort> setter) : base (validator, getter, setter)
        {}
    }


    public class DotCountStore : Store<DotCount2D>
    {
        public DotCountStore (
            ValidatorDelegate <DotCount2D> validator,
            Getter<DotCount2D> getter,
            Setter<DotCount2D> setter) : base (validator, getter, setter)
        {}
    }


    public class BasePointStore : Store<byte>
    {
        public BasePointStore (
            ValidatorDelegate <byte> validator,
            Getter<byte> getter,
            Setter<byte> setter) : base (validator, getter, setter)
        {}
    }


    public class TimeStore : Store<decimal>
    {
        public TimeStore (
            ValidatorDelegate <decimal> validator,
            Getter<decimal> getter,
            Setter<decimal> setter) : base (validator, getter, setter)
        {}
    }


    public class IsBezierCurveStore : Store<bool>
    {
        public IsBezierCurveStore (
            ValidatorDelegate <bool> validator,
            Getter<bool> getter,
            Setter<bool> setter) : base (validator, getter, setter)
        {}
    }


    public class ReverseStore : Store<bool>
    {
        public ReverseStore (
            ValidatorDelegate <bool> validator,
            Getter<bool> getter,
            Setter<bool> setter) : base (validator, getter, setter)
        {}
    }


}