﻿// 
// This code is generated by "CommonField.tt"
// Not allowed to modify this code because your changes are deleted when in regeration.
// 


namespace TokyoChokoku.MarkinBox.Sketchbook.Fields {

	using System;
	using System.Collections.Immutable;
	using System.Collections.Generic;

    using TokyoChokoku.MarkinBox.Sketchbook.Parameters;
    using TokyoChokoku.MarkinBox.Sketchbook.Validators;


	public abstract partial class HorizontalText : IBaseField <IBaseHorizontalTextParameter> {

		public abstract IBaseHorizontalTextParameter BaseParameter { get; }
		
		private static readonly ISet<FieldType> changeableTypes
			= ImmutableHashSet.Create<FieldType> ();


		public FieldType FieldType {
			get {
				return FieldType.HorizontalText;
			}
		}
      
        public static FieldType Type {
            get {
                return FieldType.HorizontalText;
            }
        }
		
		public ISet<FieldType> ChangeableTypes {
			get {
				return changeableTypes;
			}
		}



		public MBData ToSerializable () {
			return BaseParameter.ToSerializable ();
		}


        public ValidationResult Validate () {
            return BaseParameter.Validate ();
        }


		public IField <IConstantParameter> ConvertTo (FieldType type) {
			throw new FieldTypeExt.NotSupportedTypeException ("");
		}



		public sealed class Constant : HorizontalText, IField <HorizontalTextParameter> {
			private readonly HorizontalTextParameter parameter;

			public HorizontalTextParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseHorizontalTextParameter BaseParameter {
				get { return parameter; }
			}


			public static Constant Create () {
				return new Constant ( HorizontalTextParameter.Create () );
			}

			public static Constant Create ( IBaseHorizontalTextParameter parameter ) {
				return new Constant ( HorizontalTextParameter.CopyOf (parameter) );
			}

			public static Constant Create ( MBData raw ) {
				return new Constant ( HorizontalTextParameter.Create (raw) );
			}

			public static Constant CopyOf ( HorizontalText field ) {
				return Create ( field.BaseParameter );
			}


			private Constant ( HorizontalTextParameter parameter ) {
				this.parameter = parameter;
			}

			public Mutable ToMutable () {
				return Mutable.Create (parameter);
			}

			public IMutableField <IMutableParameter> ToGenericMutable () {
				return Mutable.Create (parameter);
			}

			public Return Accept<Return, Argument> (IFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}



		public sealed class Mutable : HorizontalText, IMutableField <MutableHorizontalTextParameter> {
			private readonly MutableHorizontalTextParameter parameter;

			public MutableHorizontalTextParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseHorizontalTextParameter BaseParameter {
				get { return parameter; }
			}


			public static Mutable Create () {
				return new Mutable ( MutableHorizontalTextParameter.Create () );
			}

			public static Mutable Create ( IBaseHorizontalTextParameter parameter ) {
				return new Mutable ( MutableHorizontalTextParameter.CopyOf (parameter) );
			}

			public static Mutable CopyOf ( HorizontalText field ) {
				return Create ( field.BaseParameter );
			}

			public static Mutable Create ( MBData raw ) {
				return new Mutable ( MutableHorizontalTextParameter.Create (raw) );
			}

			private Mutable ( MutableHorizontalTextParameter parameter ) {
				this.parameter = parameter;
			}

			public Constant ToConstant() {
				return Constant.Create (parameter);
			}

			public IField <IConstantParameter> ToGenericConstant () {
				return Constant.Create (parameter);
			}

			public Return Accept<Return, Argument> (IMutableFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}
		

	}




	public abstract partial class YVerticalText : IBaseField <IBaseYVerticalTextParameter> {

		public abstract IBaseYVerticalTextParameter BaseParameter { get; }
		
		private static readonly ISet<FieldType> changeableTypes
			= ImmutableHashSet.Create<FieldType> ();


		public FieldType FieldType {
			get {
				return FieldType.YVerticalText;
			}
		}
      
        public static FieldType Type {
            get {
                return FieldType.YVerticalText;
            }
        }
		
		public ISet<FieldType> ChangeableTypes {
			get {
				return changeableTypes;
			}
		}



		public MBData ToSerializable () {
			return BaseParameter.ToSerializable ();
		}


        public ValidationResult Validate () {
            return BaseParameter.Validate ();
        }


		public IField <IConstantParameter> ConvertTo (FieldType type) {
			throw new FieldTypeExt.NotSupportedTypeException ("");
		}



		public sealed class Constant : YVerticalText, IField <YVerticalTextParameter> {
			private readonly YVerticalTextParameter parameter;

			public YVerticalTextParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseYVerticalTextParameter BaseParameter {
				get { return parameter; }
			}


			public static Constant Create () {
				return new Constant ( YVerticalTextParameter.Create () );
			}

			public static Constant Create ( IBaseYVerticalTextParameter parameter ) {
				return new Constant ( YVerticalTextParameter.CopyOf (parameter) );
			}

			public static Constant Create ( MBData raw ) {
				return new Constant ( YVerticalTextParameter.Create (raw) );
			}

			public static Constant CopyOf ( YVerticalText field ) {
				return Create ( field.BaseParameter );
			}


			private Constant ( YVerticalTextParameter parameter ) {
				this.parameter = parameter;
			}

			public Mutable ToMutable () {
				return Mutable.Create (parameter);
			}

			public IMutableField <IMutableParameter> ToGenericMutable () {
				return Mutable.Create (parameter);
			}

			public Return Accept<Return, Argument> (IFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}



		public sealed class Mutable : YVerticalText, IMutableField <MutableYVerticalTextParameter> {
			private readonly MutableYVerticalTextParameter parameter;

			public MutableYVerticalTextParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseYVerticalTextParameter BaseParameter {
				get { return parameter; }
			}


			public static Mutable Create () {
				return new Mutable ( MutableYVerticalTextParameter.Create () );
			}

			public static Mutable Create ( IBaseYVerticalTextParameter parameter ) {
				return new Mutable ( MutableYVerticalTextParameter.CopyOf (parameter) );
			}

			public static Mutable CopyOf ( YVerticalText field ) {
				return Create ( field.BaseParameter );
			}

			public static Mutable Create ( MBData raw ) {
				return new Mutable ( MutableYVerticalTextParameter.Create (raw) );
			}

			private Mutable ( MutableYVerticalTextParameter parameter ) {
				this.parameter = parameter;
			}

			public Constant ToConstant() {
				return Constant.Create (parameter);
			}

			public IField <IConstantParameter> ToGenericConstant () {
				return Constant.Create (parameter);
			}

			public Return Accept<Return, Argument> (IMutableFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}
		

	}




	public abstract partial class XVerticalText : IBaseField <IBaseXVerticalTextParameter> {

		public abstract IBaseXVerticalTextParameter BaseParameter { get; }
		
		private static readonly ISet<FieldType> changeableTypes
			= ImmutableHashSet.Create<FieldType> ();


		public FieldType FieldType {
			get {
				return FieldType.XVerticalText;
			}
		}
      
        public static FieldType Type {
            get {
                return FieldType.XVerticalText;
            }
        }
		
		public ISet<FieldType> ChangeableTypes {
			get {
				return changeableTypes;
			}
		}



		public MBData ToSerializable () {
			return BaseParameter.ToSerializable ();
		}


        public ValidationResult Validate () {
            return BaseParameter.Validate ();
        }


		public IField <IConstantParameter> ConvertTo (FieldType type) {
			throw new FieldTypeExt.NotSupportedTypeException ("");
		}



		public sealed class Constant : XVerticalText, IField <XVerticalTextParameter> {
			private readonly XVerticalTextParameter parameter;

			public XVerticalTextParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseXVerticalTextParameter BaseParameter {
				get { return parameter; }
			}


			public static Constant Create () {
				return new Constant ( XVerticalTextParameter.Create () );
			}

			public static Constant Create ( IBaseXVerticalTextParameter parameter ) {
				return new Constant ( XVerticalTextParameter.CopyOf (parameter) );
			}

			public static Constant Create ( MBData raw ) {
				return new Constant ( XVerticalTextParameter.Create (raw) );
			}

			public static Constant CopyOf ( XVerticalText field ) {
				return Create ( field.BaseParameter );
			}


			private Constant ( XVerticalTextParameter parameter ) {
				this.parameter = parameter;
			}

			public Mutable ToMutable () {
				return Mutable.Create (parameter);
			}

			public IMutableField <IMutableParameter> ToGenericMutable () {
				return Mutable.Create (parameter);
			}

			public Return Accept<Return, Argument> (IFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}



		public sealed class Mutable : XVerticalText, IMutableField <MutableXVerticalTextParameter> {
			private readonly MutableXVerticalTextParameter parameter;

			public MutableXVerticalTextParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseXVerticalTextParameter BaseParameter {
				get { return parameter; }
			}


			public static Mutable Create () {
				return new Mutable ( MutableXVerticalTextParameter.Create () );
			}

			public static Mutable Create ( IBaseXVerticalTextParameter parameter ) {
				return new Mutable ( MutableXVerticalTextParameter.CopyOf (parameter) );
			}

			public static Mutable CopyOf ( XVerticalText field ) {
				return Create ( field.BaseParameter );
			}

			public static Mutable Create ( MBData raw ) {
				return new Mutable ( MutableXVerticalTextParameter.Create (raw) );
			}

			private Mutable ( MutableXVerticalTextParameter parameter ) {
				this.parameter = parameter;
			}

			public Constant ToConstant() {
				return Constant.Create (parameter);
			}

			public IField <IConstantParameter> ToGenericConstant () {
				return Constant.Create (parameter);
			}

			public Return Accept<Return, Argument> (IMutableFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}
		

	}




	public abstract partial class InnerArcText : IBaseField <IBaseInnerArcTextParameter> {

		public abstract IBaseInnerArcTextParameter BaseParameter { get; }
		
		private static readonly ISet<FieldType> changeableTypes
			= ImmutableHashSet.Create <FieldType> ( new FieldType[] {
				FieldType.OuterArcText,
			}); // end of channgableTypes


		public FieldType FieldType {
			get {
				return FieldType.InnerArcText;
			}
		}
      
        public static FieldType Type {
            get {
                return FieldType.InnerArcText;
            }
        }
		
		public ISet<FieldType> ChangeableTypes {
			get {
				return changeableTypes;
			}
		}



		public MBData ToSerializable () {
			return BaseParameter.ToSerializable ();
		}


        public ValidationResult Validate () {
            return BaseParameter.Validate ();
        }


		public IField <IConstantParameter> ConvertTo (FieldType type) {
			switch (type) {
			case FieldType.OuterArcText:
				return ToOuterArcText ();
			}

			throw new FieldTypeExt.NotSupportedTypeException ("");
		}



		public sealed class Constant : InnerArcText, IField <InnerArcTextParameter> {
			private readonly InnerArcTextParameter parameter;

			public InnerArcTextParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseInnerArcTextParameter BaseParameter {
				get { return parameter; }
			}


			public static Constant Create () {
				return new Constant ( InnerArcTextParameter.Create () );
			}

			public static Constant Create ( IBaseInnerArcTextParameter parameter ) {
				return new Constant ( InnerArcTextParameter.CopyOf (parameter) );
			}

			public static Constant Create ( MBData raw ) {
				return new Constant ( InnerArcTextParameter.Create (raw) );
			}

			public static Constant CopyOf ( InnerArcText field ) {
				return Create ( field.BaseParameter );
			}


			private Constant ( InnerArcTextParameter parameter ) {
				this.parameter = parameter;
			}

			public Mutable ToMutable () {
				return Mutable.Create (parameter);
			}

			public IMutableField <IMutableParameter> ToGenericMutable () {
				return Mutable.Create (parameter);
			}

			public Return Accept<Return, Argument> (IFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}



		public sealed class Mutable : InnerArcText, IMutableField <MutableInnerArcTextParameter> {
			private readonly MutableInnerArcTextParameter parameter;

			public MutableInnerArcTextParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseInnerArcTextParameter BaseParameter {
				get { return parameter; }
			}


			public static Mutable Create () {
				return new Mutable ( MutableInnerArcTextParameter.Create () );
			}

			public static Mutable Create ( IBaseInnerArcTextParameter parameter ) {
				return new Mutable ( MutableInnerArcTextParameter.CopyOf (parameter) );
			}

			public static Mutable CopyOf ( InnerArcText field ) {
				return Create ( field.BaseParameter );
			}

			public static Mutable Create ( MBData raw ) {
				return new Mutable ( MutableInnerArcTextParameter.Create (raw) );
			}

			private Mutable ( MutableInnerArcTextParameter parameter ) {
				this.parameter = parameter;
			}

			public Constant ToConstant() {
				return Constant.Create (parameter);
			}

			public IField <IConstantParameter> ToGenericConstant () {
				return Constant.Create (parameter);
			}

			public Return Accept<Return, Argument> (IMutableFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}
		

	}




	public abstract partial class OuterArcText : IBaseField <IBaseOuterArcTextParameter> {

		public abstract IBaseOuterArcTextParameter BaseParameter { get; }
		
		private static readonly ISet<FieldType> changeableTypes
			= ImmutableHashSet.Create <FieldType> ( new FieldType[] {
				FieldType.InnerArcText,
			}); // end of channgableTypes


		public FieldType FieldType {
			get {
				return FieldType.OuterArcText;
			}
		}
      
        public static FieldType Type {
            get {
                return FieldType.OuterArcText;
            }
        }
		
		public ISet<FieldType> ChangeableTypes {
			get {
				return changeableTypes;
			}
		}



		public MBData ToSerializable () {
			return BaseParameter.ToSerializable ();
		}


        public ValidationResult Validate () {
            return BaseParameter.Validate ();
        }


		public IField <IConstantParameter> ConvertTo (FieldType type) {
			switch (type) {
			case FieldType.InnerArcText:
				return ToInnerArcText ();
			}

			throw new FieldTypeExt.NotSupportedTypeException ("");
		}



		public sealed class Constant : OuterArcText, IField <OuterArcTextParameter> {
			private readonly OuterArcTextParameter parameter;

			public OuterArcTextParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseOuterArcTextParameter BaseParameter {
				get { return parameter; }
			}


			public static Constant Create () {
				return new Constant ( OuterArcTextParameter.Create () );
			}

			public static Constant Create ( IBaseOuterArcTextParameter parameter ) {
				return new Constant ( OuterArcTextParameter.CopyOf (parameter) );
			}

			public static Constant Create ( MBData raw ) {
				return new Constant ( OuterArcTextParameter.Create (raw) );
			}

			public static Constant CopyOf ( OuterArcText field ) {
				return Create ( field.BaseParameter );
			}


			private Constant ( OuterArcTextParameter parameter ) {
				this.parameter = parameter;
			}

			public Mutable ToMutable () {
				return Mutable.Create (parameter);
			}

			public IMutableField <IMutableParameter> ToGenericMutable () {
				return Mutable.Create (parameter);
			}

			public Return Accept<Return, Argument> (IFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}



		public sealed class Mutable : OuterArcText, IMutableField <MutableOuterArcTextParameter> {
			private readonly MutableOuterArcTextParameter parameter;

			public MutableOuterArcTextParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseOuterArcTextParameter BaseParameter {
				get { return parameter; }
			}


			public static Mutable Create () {
				return new Mutable ( MutableOuterArcTextParameter.Create () );
			}

			public static Mutable Create ( IBaseOuterArcTextParameter parameter ) {
				return new Mutable ( MutableOuterArcTextParameter.CopyOf (parameter) );
			}

			public static Mutable CopyOf ( OuterArcText field ) {
				return Create ( field.BaseParameter );
			}

			public static Mutable Create ( MBData raw ) {
				return new Mutable ( MutableOuterArcTextParameter.Create (raw) );
			}

			private Mutable ( MutableOuterArcTextParameter parameter ) {
				this.parameter = parameter;
			}

			public Constant ToConstant() {
				return Constant.Create (parameter);
			}

			public IField <IConstantParameter> ToGenericConstant () {
				return Constant.Create (parameter);
			}

			public Return Accept<Return, Argument> (IMutableFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}
		

	}




	public abstract partial class QrCode : IBaseField <IBaseQrCodeParameter> {

		public abstract IBaseQrCodeParameter BaseParameter { get; }
		
		private static readonly ISet<FieldType> changeableTypes
			= ImmutableHashSet.Create <FieldType> ( new FieldType[] {
				FieldType.DataMatrix,
			}); // end of channgableTypes


		public FieldType FieldType {
			get {
				return FieldType.QrCode;
			}
		}
      
        public static FieldType Type {
            get {
                return FieldType.QrCode;
            }
        }
		
		public ISet<FieldType> ChangeableTypes {
			get {
				return changeableTypes;
			}
		}



		public MBData ToSerializable () {
			return BaseParameter.ToSerializable ();
		}


        public ValidationResult Validate () {
            return BaseParameter.Validate ();
        }


		public IField <IConstantParameter> ConvertTo (FieldType type) {
			switch (type) {
			case FieldType.DataMatrix:
				return ToDataMatrix ();
			}

			throw new FieldTypeExt.NotSupportedTypeException ("");
		}



		public sealed class Constant : QrCode, IField <QrCodeParameter> {
			private readonly QrCodeParameter parameter;

			public QrCodeParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseQrCodeParameter BaseParameter {
				get { return parameter; }
			}


			public static Constant Create () {
				return new Constant ( QrCodeParameter.Create () );
			}

			public static Constant Create ( IBaseQrCodeParameter parameter ) {
				return new Constant ( QrCodeParameter.CopyOf (parameter) );
			}

			public static Constant Create ( MBData raw ) {
				return new Constant ( QrCodeParameter.Create (raw) );
			}

			public static Constant CopyOf ( QrCode field ) {
				return Create ( field.BaseParameter );
			}


			private Constant ( QrCodeParameter parameter ) {
				this.parameter = parameter;
			}

			public Mutable ToMutable () {
				return Mutable.Create (parameter);
			}

			public IMutableField <IMutableParameter> ToGenericMutable () {
				return Mutable.Create (parameter);
			}

			public Return Accept<Return, Argument> (IFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}



		public sealed class Mutable : QrCode, IMutableField <MutableQrCodeParameter> {
			private readonly MutableQrCodeParameter parameter;

			public MutableQrCodeParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseQrCodeParameter BaseParameter {
				get { return parameter; }
			}


			public static Mutable Create () {
				return new Mutable ( MutableQrCodeParameter.Create () );
			}

			public static Mutable Create ( IBaseQrCodeParameter parameter ) {
				return new Mutable ( MutableQrCodeParameter.CopyOf (parameter) );
			}

			public static Mutable CopyOf ( QrCode field ) {
				return Create ( field.BaseParameter );
			}

			public static Mutable Create ( MBData raw ) {
				return new Mutable ( MutableQrCodeParameter.Create (raw) );
			}

			private Mutable ( MutableQrCodeParameter parameter ) {
				this.parameter = parameter;
			}

			public Constant ToConstant() {
				return Constant.Create (parameter);
			}

			public IField <IConstantParameter> ToGenericConstant () {
				return Constant.Create (parameter);
			}

			public Return Accept<Return, Argument> (IMutableFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}
		

	}




	public abstract partial class DataMatrix : IBaseField <IBaseDataMatrixParameter> {

		public abstract IBaseDataMatrixParameter BaseParameter { get; }
		
		private static readonly ISet<FieldType> changeableTypes
			= ImmutableHashSet.Create <FieldType> ( new FieldType[] {
				FieldType.QrCode,
			}); // end of channgableTypes


		public FieldType FieldType {
			get {
				return FieldType.DataMatrix;
			}
		}
      
        public static FieldType Type {
            get {
                return FieldType.DataMatrix;
            }
        }
		
		public ISet<FieldType> ChangeableTypes {
			get {
				return changeableTypes;
			}
		}



		public MBData ToSerializable () {
			return BaseParameter.ToSerializable ();
		}


        public ValidationResult Validate () {
            return BaseParameter.Validate ();
        }


		public IField <IConstantParameter> ConvertTo (FieldType type) {
			switch (type) {
			case FieldType.QrCode:
				return ToQrCode ();
			}

			throw new FieldTypeExt.NotSupportedTypeException ("");
		}



		public sealed class Constant : DataMatrix, IField <DataMatrixParameter> {
			private readonly DataMatrixParameter parameter;

			public DataMatrixParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseDataMatrixParameter BaseParameter {
				get { return parameter; }
			}


			public static Constant Create () {
				return new Constant ( DataMatrixParameter.Create () );
			}

			public static Constant Create ( IBaseDataMatrixParameter parameter ) {
				return new Constant ( DataMatrixParameter.CopyOf (parameter) );
			}

			public static Constant Create ( MBData raw ) {
				return new Constant ( DataMatrixParameter.Create (raw) );
			}

			public static Constant CopyOf ( DataMatrix field ) {
				return Create ( field.BaseParameter );
			}


			private Constant ( DataMatrixParameter parameter ) {
				this.parameter = parameter;
			}

			public Mutable ToMutable () {
				return Mutable.Create (parameter);
			}

			public IMutableField <IMutableParameter> ToGenericMutable () {
				return Mutable.Create (parameter);
			}

			public Return Accept<Return, Argument> (IFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}



		public sealed class Mutable : DataMatrix, IMutableField <MutableDataMatrixParameter> {
			private readonly MutableDataMatrixParameter parameter;

			public MutableDataMatrixParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseDataMatrixParameter BaseParameter {
				get { return parameter; }
			}


			public static Mutable Create () {
				return new Mutable ( MutableDataMatrixParameter.Create () );
			}

			public static Mutable Create ( IBaseDataMatrixParameter parameter ) {
				return new Mutable ( MutableDataMatrixParameter.CopyOf (parameter) );
			}

			public static Mutable CopyOf ( DataMatrix field ) {
				return Create ( field.BaseParameter );
			}

			public static Mutable Create ( MBData raw ) {
				return new Mutable ( MutableDataMatrixParameter.Create (raw) );
			}

			private Mutable ( MutableDataMatrixParameter parameter ) {
				this.parameter = parameter;
			}

			public Constant ToConstant() {
				return Constant.Create (parameter);
			}

			public IField <IConstantParameter> ToGenericConstant () {
				return Constant.Create (parameter);
			}

			public Return Accept<Return, Argument> (IMutableFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}
		

	}




	public abstract partial class Rectangle : IBaseField <IBaseRectangleParameter> {

		public abstract IBaseRectangleParameter BaseParameter { get; }
		
		private static readonly ISet<FieldType> changeableTypes
			= ImmutableHashSet.Create<FieldType> ();


		public FieldType FieldType {
			get {
				return FieldType.Rectangle;
			}
		}
      
        public static FieldType Type {
            get {
                return FieldType.Rectangle;
            }
        }
		
		public ISet<FieldType> ChangeableTypes {
			get {
				return changeableTypes;
			}
		}



		public MBData ToSerializable () {
			return BaseParameter.ToSerializable ();
		}


        public ValidationResult Validate () {
            return BaseParameter.Validate ();
        }


		public IField <IConstantParameter> ConvertTo (FieldType type) {
			throw new FieldTypeExt.NotSupportedTypeException ("");
		}



		public sealed class Constant : Rectangle, IField <RectangleParameter> {
			private readonly RectangleParameter parameter;

			public RectangleParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseRectangleParameter BaseParameter {
				get { return parameter; }
			}


			public static Constant Create () {
				return new Constant ( RectangleParameter.Create () );
			}

			public static Constant Create ( IBaseRectangleParameter parameter ) {
				return new Constant ( RectangleParameter.CopyOf (parameter) );
			}

			public static Constant Create ( MBData raw ) {
				return new Constant ( RectangleParameter.Create (raw) );
			}

			public static Constant CopyOf ( Rectangle field ) {
				return Create ( field.BaseParameter );
			}


			private Constant ( RectangleParameter parameter ) {
				this.parameter = parameter;
			}

			public Mutable ToMutable () {
				return Mutable.Create (parameter);
			}

			public IMutableField <IMutableParameter> ToGenericMutable () {
				return Mutable.Create (parameter);
			}

			public Return Accept<Return, Argument> (IFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}



		public sealed class Mutable : Rectangle, IMutableField <MutableRectangleParameter> {
			private readonly MutableRectangleParameter parameter;

			public MutableRectangleParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseRectangleParameter BaseParameter {
				get { return parameter; }
			}


			public static Mutable Create () {
				return new Mutable ( MutableRectangleParameter.Create () );
			}

			public static Mutable Create ( IBaseRectangleParameter parameter ) {
				return new Mutable ( MutableRectangleParameter.CopyOf (parameter) );
			}

			public static Mutable CopyOf ( Rectangle field ) {
				return Create ( field.BaseParameter );
			}

			public static Mutable Create ( MBData raw ) {
				return new Mutable ( MutableRectangleParameter.Create (raw) );
			}

			private Mutable ( MutableRectangleParameter parameter ) {
				this.parameter = parameter;
			}

			public Constant ToConstant() {
				return Constant.Create (parameter);
			}

			public IField <IConstantParameter> ToGenericConstant () {
				return Constant.Create (parameter);
			}

			public Return Accept<Return, Argument> (IMutableFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}
		

	}




	public abstract partial class Triangle : IBaseField <IBaseTriangleParameter> {

		public abstract IBaseTriangleParameter BaseParameter { get; }
		
		private static readonly ISet<FieldType> changeableTypes
			= ImmutableHashSet.Create<FieldType> ();


		public FieldType FieldType {
			get {
				return FieldType.Triangle;
			}
		}
      
        public static FieldType Type {
            get {
                return FieldType.Triangle;
            }
        }
		
		public ISet<FieldType> ChangeableTypes {
			get {
				return changeableTypes;
			}
		}



		public MBData ToSerializable () {
			return BaseParameter.ToSerializable ();
		}


        public ValidationResult Validate () {
            return BaseParameter.Validate ();
        }


		public IField <IConstantParameter> ConvertTo (FieldType type) {
			throw new FieldTypeExt.NotSupportedTypeException ("");
		}



		public sealed class Constant : Triangle, IField <TriangleParameter> {
			private readonly TriangleParameter parameter;

			public TriangleParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseTriangleParameter BaseParameter {
				get { return parameter; }
			}


			public static Constant Create () {
				return new Constant ( TriangleParameter.Create () );
			}

			public static Constant Create ( IBaseTriangleParameter parameter ) {
				return new Constant ( TriangleParameter.CopyOf (parameter) );
			}

			public static Constant Create ( MBData raw ) {
				return new Constant ( TriangleParameter.Create (raw) );
			}

			public static Constant CopyOf ( Triangle field ) {
				return Create ( field.BaseParameter );
			}


			private Constant ( TriangleParameter parameter ) {
				this.parameter = parameter;
			}

			public Mutable ToMutable () {
				return Mutable.Create (parameter);
			}

			public IMutableField <IMutableParameter> ToGenericMutable () {
				return Mutable.Create (parameter);
			}

			public Return Accept<Return, Argument> (IFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}



		public sealed class Mutable : Triangle, IMutableField <MutableTriangleParameter> {
			private readonly MutableTriangleParameter parameter;

			public MutableTriangleParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseTriangleParameter BaseParameter {
				get { return parameter; }
			}


			public static Mutable Create () {
				return new Mutable ( MutableTriangleParameter.Create () );
			}

			public static Mutable Create ( IBaseTriangleParameter parameter ) {
				return new Mutable ( MutableTriangleParameter.CopyOf (parameter) );
			}

			public static Mutable CopyOf ( Triangle field ) {
				return Create ( field.BaseParameter );
			}

			public static Mutable Create ( MBData raw ) {
				return new Mutable ( MutableTriangleParameter.Create (raw) );
			}

			private Mutable ( MutableTriangleParameter parameter ) {
				this.parameter = parameter;
			}

			public Constant ToConstant() {
				return Constant.Create (parameter);
			}

			public IField <IConstantParameter> ToGenericConstant () {
				return Constant.Create (parameter);
			}

			public Return Accept<Return, Argument> (IMutableFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}
		

	}




	public abstract partial class Circle : IBaseField <IBaseCircleParameter> {

		public abstract IBaseCircleParameter BaseParameter { get; }
		
		private static readonly ISet<FieldType> changeableTypes
			= ImmutableHashSet.Create<FieldType> ();


		public FieldType FieldType {
			get {
				return FieldType.Circle;
			}
		}
      
        public static FieldType Type {
            get {
                return FieldType.Circle;
            }
        }
		
		public ISet<FieldType> ChangeableTypes {
			get {
				return changeableTypes;
			}
		}



		public MBData ToSerializable () {
			return BaseParameter.ToSerializable ();
		}


        public ValidationResult Validate () {
            return BaseParameter.Validate ();
        }


		public IField <IConstantParameter> ConvertTo (FieldType type) {
			throw new FieldTypeExt.NotSupportedTypeException ("");
		}



		public sealed class Constant : Circle, IField <CircleParameter> {
			private readonly CircleParameter parameter;

			public CircleParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseCircleParameter BaseParameter {
				get { return parameter; }
			}


			public static Constant Create () {
				return new Constant ( CircleParameter.Create () );
			}

			public static Constant Create ( IBaseCircleParameter parameter ) {
				return new Constant ( CircleParameter.CopyOf (parameter) );
			}

			public static Constant Create ( MBData raw ) {
				return new Constant ( CircleParameter.Create (raw) );
			}

			public static Constant CopyOf ( Circle field ) {
				return Create ( field.BaseParameter );
			}


			private Constant ( CircleParameter parameter ) {
				this.parameter = parameter;
			}

			public Mutable ToMutable () {
				return Mutable.Create (parameter);
			}

			public IMutableField <IMutableParameter> ToGenericMutable () {
				return Mutable.Create (parameter);
			}

			public Return Accept<Return, Argument> (IFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}



		public sealed class Mutable : Circle, IMutableField <MutableCircleParameter> {
			private readonly MutableCircleParameter parameter;

			public MutableCircleParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseCircleParameter BaseParameter {
				get { return parameter; }
			}


			public static Mutable Create () {
				return new Mutable ( MutableCircleParameter.Create () );
			}

			public static Mutable Create ( IBaseCircleParameter parameter ) {
				return new Mutable ( MutableCircleParameter.CopyOf (parameter) );
			}

			public static Mutable CopyOf ( Circle field ) {
				return Create ( field.BaseParameter );
			}

			public static Mutable Create ( MBData raw ) {
				return new Mutable ( MutableCircleParameter.Create (raw) );
			}

			private Mutable ( MutableCircleParameter parameter ) {
				this.parameter = parameter;
			}

			public Constant ToConstant() {
				return Constant.Create (parameter);
			}

			public IField <IConstantParameter> ToGenericConstant () {
				return Constant.Create (parameter);
			}

			public Return Accept<Return, Argument> (IMutableFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}
		

	}




	public abstract partial class Line : IBaseField <IBaseLineParameter> {

		public abstract IBaseLineParameter BaseParameter { get; }
		
		private static readonly ISet<FieldType> changeableTypes
			= ImmutableHashSet.Create<FieldType> ();


		public FieldType FieldType {
			get {
				return FieldType.Line;
			}
		}
      
        public static FieldType Type {
            get {
                return FieldType.Line;
            }
        }
		
		public ISet<FieldType> ChangeableTypes {
			get {
				return changeableTypes;
			}
		}



		public MBData ToSerializable () {
			return BaseParameter.ToSerializable ();
		}


        public ValidationResult Validate () {
            return BaseParameter.Validate ();
        }


		public IField <IConstantParameter> ConvertTo (FieldType type) {
			throw new FieldTypeExt.NotSupportedTypeException ("");
		}



		public sealed class Constant : Line, IField <LineParameter> {
			private readonly LineParameter parameter;

			public LineParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseLineParameter BaseParameter {
				get { return parameter; }
			}


			public static Constant Create () {
				return new Constant ( LineParameter.Create () );
			}

			public static Constant Create ( IBaseLineParameter parameter ) {
				return new Constant ( LineParameter.CopyOf (parameter) );
			}

			public static Constant Create ( MBData raw ) {
				return new Constant ( LineParameter.Create (raw) );
			}

			public static Constant CopyOf ( Line field ) {
				return Create ( field.BaseParameter );
			}


			private Constant ( LineParameter parameter ) {
				this.parameter = parameter;
			}

			public Mutable ToMutable () {
				return Mutable.Create (parameter);
			}

			public IMutableField <IMutableParameter> ToGenericMutable () {
				return Mutable.Create (parameter);
			}

			public Return Accept<Return, Argument> (IFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}



		public sealed class Mutable : Line, IMutableField <MutableLineParameter> {
			private readonly MutableLineParameter parameter;

			public MutableLineParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseLineParameter BaseParameter {
				get { return parameter; }
			}


			public static Mutable Create () {
				return new Mutable ( MutableLineParameter.Create () );
			}

			public static Mutable Create ( IBaseLineParameter parameter ) {
				return new Mutable ( MutableLineParameter.CopyOf (parameter) );
			}

			public static Mutable CopyOf ( Line field ) {
				return Create ( field.BaseParameter );
			}

			public static Mutable Create ( MBData raw ) {
				return new Mutable ( MutableLineParameter.Create (raw) );
			}

			private Mutable ( MutableLineParameter parameter ) {
				this.parameter = parameter;
			}

			public Constant ToConstant() {
				return Constant.Create (parameter);
			}

			public IField <IConstantParameter> ToGenericConstant () {
				return Constant.Create (parameter);
			}

			public Return Accept<Return, Argument> (IMutableFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}
		

	}




	public abstract partial class Bypass : IBaseField <IBaseBypassParameter> {

		public abstract IBaseBypassParameter BaseParameter { get; }
		
		private static readonly ISet<FieldType> changeableTypes
			= ImmutableHashSet.Create<FieldType> ();


		public FieldType FieldType {
			get {
				return FieldType.Bypass;
			}
		}
      
        public static FieldType Type {
            get {
                return FieldType.Bypass;
            }
        }
		
		public ISet<FieldType> ChangeableTypes {
			get {
				return changeableTypes;
			}
		}



		public MBData ToSerializable () {
			return BaseParameter.ToSerializable ();
		}


        public ValidationResult Validate () {
            return BaseParameter.Validate ();
        }


		public IField <IConstantParameter> ConvertTo (FieldType type) {
			throw new FieldTypeExt.NotSupportedTypeException ("");
		}



		public sealed class Constant : Bypass, IField <BypassParameter> {
			private readonly BypassParameter parameter;

			public BypassParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseBypassParameter BaseParameter {
				get { return parameter; }
			}


			public static Constant Create () {
				return new Constant ( BypassParameter.Create () );
			}

			public static Constant Create ( IBaseBypassParameter parameter ) {
				return new Constant ( BypassParameter.CopyOf (parameter) );
			}

			public static Constant Create ( MBData raw ) {
				return new Constant ( BypassParameter.Create (raw) );
			}

			public static Constant CopyOf ( Bypass field ) {
				return Create ( field.BaseParameter );
			}


			private Constant ( BypassParameter parameter ) {
				this.parameter = parameter;
			}

			public Mutable ToMutable () {
				return Mutable.Create (parameter);
			}

			public IMutableField <IMutableParameter> ToGenericMutable () {
				return Mutable.Create (parameter);
			}

			public Return Accept<Return, Argument> (IFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}



		public sealed class Mutable : Bypass, IMutableField <MutableBypassParameter> {
			private readonly MutableBypassParameter parameter;

			public MutableBypassParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseBypassParameter BaseParameter {
				get { return parameter; }
			}


			public static Mutable Create () {
				return new Mutable ( MutableBypassParameter.Create () );
			}

			public static Mutable Create ( IBaseBypassParameter parameter ) {
				return new Mutable ( MutableBypassParameter.CopyOf (parameter) );
			}

			public static Mutable CopyOf ( Bypass field ) {
				return Create ( field.BaseParameter );
			}

			public static Mutable Create ( MBData raw ) {
				return new Mutable ( MutableBypassParameter.Create (raw) );
			}

			private Mutable ( MutableBypassParameter parameter ) {
				this.parameter = parameter;
			}

			public Constant ToConstant() {
				return Constant.Create (parameter);
			}

			public IField <IConstantParameter> ToGenericConstant () {
				return Constant.Create (parameter);
			}

			public Return Accept<Return, Argument> (IMutableFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}
		

	}




	public abstract partial class Ellipse : IBaseField <IBaseEllipseParameter> {

		public abstract IBaseEllipseParameter BaseParameter { get; }
		
		private static readonly ISet<FieldType> changeableTypes
			= ImmutableHashSet.Create<FieldType> ();


		public FieldType FieldType {
			get {
				return FieldType.Ellipse;
			}
		}
      
        public static FieldType Type {
            get {
                return FieldType.Ellipse;
            }
        }
		
		public ISet<FieldType> ChangeableTypes {
			get {
				return changeableTypes;
			}
		}



		public MBData ToSerializable () {
			return BaseParameter.ToSerializable ();
		}


        public ValidationResult Validate () {
            return BaseParameter.Validate ();
        }


		public IField <IConstantParameter> ConvertTo (FieldType type) {
			throw new FieldTypeExt.NotSupportedTypeException ("");
		}



		public sealed class Constant : Ellipse, IField <EllipseParameter> {
			private readonly EllipseParameter parameter;

			public EllipseParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseEllipseParameter BaseParameter {
				get { return parameter; }
			}


			public static Constant Create () {
				return new Constant ( EllipseParameter.Create () );
			}

			public static Constant Create ( IBaseEllipseParameter parameter ) {
				return new Constant ( EllipseParameter.CopyOf (parameter) );
			}

			public static Constant Create ( MBData raw ) {
				return new Constant ( EllipseParameter.Create (raw) );
			}

			public static Constant CopyOf ( Ellipse field ) {
				return Create ( field.BaseParameter );
			}


			private Constant ( EllipseParameter parameter ) {
				this.parameter = parameter;
			}

			public Mutable ToMutable () {
				return Mutable.Create (parameter);
			}

			public IMutableField <IMutableParameter> ToGenericMutable () {
				return Mutable.Create (parameter);
			}

			public Return Accept<Return, Argument> (IFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}



		public sealed class Mutable : Ellipse, IMutableField <MutableEllipseParameter> {
			private readonly MutableEllipseParameter parameter;

			public MutableEllipseParameter Parameter {
				get { return parameter; }
			}

			override
			public IBaseEllipseParameter BaseParameter {
				get { return parameter; }
			}


			public static Mutable Create () {
				return new Mutable ( MutableEllipseParameter.Create () );
			}

			public static Mutable Create ( IBaseEllipseParameter parameter ) {
				return new Mutable ( MutableEllipseParameter.CopyOf (parameter) );
			}

			public static Mutable CopyOf ( Ellipse field ) {
				return Create ( field.BaseParameter );
			}

			public static Mutable Create ( MBData raw ) {
				return new Mutable ( MutableEllipseParameter.Create (raw) );
			}

			private Mutable ( MutableEllipseParameter parameter ) {
				this.parameter = parameter;
			}

			public Constant ToConstant() {
				return Constant.Create (parameter);
			}

			public IField <IConstantParameter> ToGenericConstant () {
				return Constant.Create (parameter);
			}

			public Return Accept<Return, Argument> (IMutableFieldVisitor <Return,Argument> visitor, Argument arg) {
				return visitor.Visit (this, arg);
			}
		}
		

	}




}