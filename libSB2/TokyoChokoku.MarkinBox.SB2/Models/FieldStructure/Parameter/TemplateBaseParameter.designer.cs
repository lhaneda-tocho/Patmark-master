﻿// 
// This code is generated by "BaseParameterTemplate.tt"
// Not allowed to modify this code because your changes are deleted when in regeration.
// 

namespace TokyoChokoku.MarkinBox.Sketchbook.Parameters {
    using TokyoChokoku.MarkinBox.Sketchbook.Validators;

	public abstract partial class IBaseHorizontalTextParameter : IParameter {

        public readonly MBData raw; 

        protected IBaseHorizontalTextParameter (MBData raw) {
            this.raw = raw;
        }

		public abstract short Power { get; set; }
		public abstract short Speed { get; set; }
		public abstract bool Jogging { get; set; }
		public abstract bool Reverse { get; set; }
		public abstract bool Pause { get; set; }
		public abstract byte BasePoint { get; set; }
		public abstract bool Mirrored { get; set; }
		public abstract decimal X { get; set; }
		public abstract decimal Y { get; set; }
		public abstract string Text { get; set; }
		public abstract FontMode Font { get; set; }
		public abstract decimal Pitch { get; set; }
		public abstract decimal Height { get; set; }
		public abstract decimal Aspect { get; set; }
		public abstract decimal Angle { get; set; }

		public abstract MBData ToSerializable ();

        public ValidationResult Validate () {
            return HorizontalTextValidator.Validate (this);
        }
	}




	public abstract partial class IBaseYVerticalTextParameter : IParameter {

        public readonly MBData raw; 

        protected IBaseYVerticalTextParameter (MBData raw) {
            this.raw = raw;
        }

		public abstract short Power { get; set; }
		public abstract short Speed { get; set; }
		public abstract bool Jogging { get; set; }
		public abstract bool Reverse { get; set; }
		public abstract bool Pause { get; set; }
		public abstract byte BasePoint { get; set; }
		public abstract bool Mirrored { get; set; }
		public abstract decimal X { get; set; }
		public abstract decimal Y { get; set; }
		public abstract string Text { get; set; }
		public abstract FontMode Font { get; set; }
		public abstract decimal Pitch { get; set; }
		public abstract decimal Height { get; set; }
		public abstract decimal Aspect { get; set; }
		public abstract decimal Angle { get; set; }

		public abstract MBData ToSerializable ();

        public ValidationResult Validate () {
            return YVerticalTextValidator.Validate (this);
        }
	}




	public abstract partial class IBaseXVerticalTextParameter : IParameter {

        public readonly MBData raw; 

        protected IBaseXVerticalTextParameter (MBData raw) {
            this.raw = raw;
        }

		public abstract short Power { get; set; }
		public abstract short Speed { get; set; }
		public abstract bool Jogging { get; set; }
		public abstract bool Reverse { get; set; }
		public abstract bool Pause { get; set; }
		public abstract byte BasePoint { get; set; }
		public abstract bool Mirrored { get; set; }
		public abstract decimal X { get; set; }
		public abstract decimal Y { get; set; }
		public abstract string Text { get; set; }
		public abstract FontMode Font { get; set; }
		public abstract decimal Pitch { get; set; }
		public abstract decimal Height { get; set; }
		public abstract decimal Aspect { get; set; }
		public abstract decimal Angle { get; set; }

		public abstract MBData ToSerializable ();

        public ValidationResult Validate () {
            return XVerticalTextValidator.Validate (this);
        }
	}




	public abstract partial class IBaseInnerArcTextParameter : IParameter {

        public readonly MBData raw; 

        protected IBaseInnerArcTextParameter (MBData raw) {
            this.raw = raw;
        }

		public abstract short Power { get; set; }
		public abstract short Speed { get; set; }
		public abstract bool Jogging { get; set; }
		public abstract bool Reverse { get; set; }
		public abstract bool Pause { get; set; }
		public abstract byte BasePoint { get; set; }
		public abstract bool Mirrored { get; set; }
		public abstract decimal X { get; set; }
		public abstract decimal Y { get; set; }
		public abstract string Text { get; set; }
		public abstract FontMode Font { get; set; }
		public abstract decimal Pitch { get; set; }
		public abstract decimal Height { get; set; }
		public abstract decimal Aspect { get; set; }
		public abstract decimal Radius { get; set; }
		public abstract decimal Angle { get; set; }

		public abstract MBData ToSerializable ();

        public ValidationResult Validate () {
            return InnerArcTextValidator.Validate (this);
        }
	}




	public abstract partial class IBaseOuterArcTextParameter : IParameter {

        public readonly MBData raw; 

        protected IBaseOuterArcTextParameter (MBData raw) {
            this.raw = raw;
        }

		public abstract short Power { get; set; }
		public abstract short Speed { get; set; }
		public abstract bool Jogging { get; set; }
		public abstract bool Reverse { get; set; }
		public abstract bool Pause { get; set; }
		public abstract byte BasePoint { get; set; }
		public abstract bool Mirrored { get; set; }
		public abstract decimal X { get; set; }
		public abstract decimal Y { get; set; }
		public abstract string Text { get; set; }
		public abstract FontMode Font { get; set; }
		public abstract decimal Pitch { get; set; }
		public abstract decimal Height { get; set; }
		public abstract decimal Aspect { get; set; }
		public abstract decimal Radius { get; set; }
		public abstract decimal Angle { get; set; }

		public abstract MBData ToSerializable ();

        public ValidationResult Validate () {
            return OuterArcTextValidator.Validate (this);
        }
	}




	public abstract partial class IBaseQrCodeParameter : IParameter {

        public readonly MBData raw; 

        protected IBaseQrCodeParameter (MBData raw) {
            this.raw = raw;
        }

		public abstract short Power { get; set; }
		public abstract short Speed { get; set; }
		public abstract bool Jogging { get; set; }
		public abstract bool Reverse { get; set; }
		public abstract bool Pause { get; set; }
		public abstract byte BasePoint { get; set; }
		public abstract bool Mirrored { get; set; }
		public abstract decimal X { get; set; }
		public abstract decimal Y { get; set; }
		public abstract string Text { get; set; }
		public abstract decimal Height { get; set; }
		public abstract decimal Angle { get; set; }

		public abstract MBData ToSerializable ();

        public ValidationResult Validate () {
            return QrCodeValidator.Validate (this);
        }
	}




	public abstract partial class IBaseDataMatrixParameter : IParameter {

        public readonly MBData raw; 

        protected IBaseDataMatrixParameter (MBData raw) {
            this.raw = raw;
        }

		public abstract short Power { get; set; }
		public abstract short Speed { get; set; }
		public abstract bool Jogging { get; set; }
		public abstract bool Reverse { get; set; }
		public abstract bool Pause { get; set; }
		public abstract byte BasePoint { get; set; }
		public abstract bool Mirrored { get; set; }
		public abstract decimal X { get; set; }
		public abstract decimal Y { get; set; }
		public abstract string Text { get; set; }
		public abstract decimal Height { get; set; }
		public abstract decimal Angle { get; set; }
		public abstract DotCount2D DotCount { get; set; }

		public abstract MBData ToSerializable ();

        public ValidationResult Validate () {
            return DataMatrixValidator.Validate (this);
        }
	}




	public abstract partial class IBaseRectangleParameter : IParameter {

        public readonly MBData raw; 

        protected IBaseRectangleParameter (MBData raw) {
            this.raw = raw;
        }

		public abstract short Power { get; set; }
		public abstract short Speed { get; set; }
		public abstract bool Jogging { get; set; }
		public abstract bool Reverse { get; set; }
		public abstract bool Pause { get; set; }
		public abstract byte BasePoint { get; set; }
		public abstract decimal X { get; set; }
		public abstract decimal Y { get; set; }
		public abstract decimal Height { get; set; }
		public abstract decimal Aspect { get; set; }
		public abstract decimal Angle { get; set; }

		public abstract MBData ToSerializable ();

        public ValidationResult Validate () {
            return RectangleValidator.Validate (this);
        }
	}




	public abstract partial class IBaseTriangleParameter : IParameter {

        public readonly MBData raw; 

        protected IBaseTriangleParameter (MBData raw) {
            this.raw = raw;
        }

		public abstract short Power { get; set; }
		public abstract short Speed { get; set; }
		public abstract bool Jogging { get; set; }
		public abstract bool Reverse { get; set; }
		public abstract bool Pause { get; set; }
		public abstract byte BasePoint { get; set; }
		public abstract decimal X { get; set; }
		public abstract decimal Y { get; set; }
		public abstract decimal HornX { get; set; }
		public abstract decimal Height { get; set; }
		public abstract decimal Aspect { get; set; }
		public abstract decimal Angle { get; set; }

		public abstract MBData ToSerializable ();

        public ValidationResult Validate () {
            return TriangleValidator.Validate (this);
        }
	}




	public abstract partial class IBaseCircleParameter : IParameter {

        public readonly MBData raw; 

        protected IBaseCircleParameter (MBData raw) {
            this.raw = raw;
        }

		public abstract short Power { get; set; }
		public abstract short Speed { get; set; }
		public abstract bool Jogging { get; set; }
		public abstract bool Reverse { get; set; }
		public abstract bool Pause { get; set; }
		public abstract byte BasePoint { get; set; }
		public abstract decimal X { get; set; }
		public abstract decimal Y { get; set; }
		public abstract decimal Radius { get; set; }

		public abstract MBData ToSerializable ();

        public ValidationResult Validate () {
            return CircleValidator.Validate (this);
        }
	}




	public abstract partial class IBaseLineParameter : IParameter {

        public readonly MBData raw; 

        protected IBaseLineParameter (MBData raw) {
            this.raw = raw;
        }

		public abstract short Power { get; set; }
		public abstract short Speed { get; set; }
		public abstract bool Jogging { get; set; }
		public abstract bool Reverse { get; set; }
		public abstract bool Pause { get; set; }
		public abstract decimal StartX { get; set; }
		public abstract decimal StartY { get; set; }
		public abstract decimal CenterX { get; set; }
		public abstract decimal CenterY { get; set; }
		public abstract decimal EndX { get; set; }
		public abstract decimal EndY { get; set; }
		public abstract bool IsBezierCurve { get; set; }

		public abstract MBData ToSerializable ();

        public ValidationResult Validate () {
            return LineValidator.Validate (this);
        }
	}




	public abstract partial class IBaseBypassParameter : IParameter {

        public readonly MBData raw; 

        protected IBaseBypassParameter (MBData raw) {
            this.raw = raw;
        }

		public abstract short Power { get; set; }
		public abstract short Speed { get; set; }
		public abstract bool Jogging { get; set; }
		public abstract bool Reverse { get; set; }
		public abstract bool Pause { get; set; }
		public abstract decimal X { get; set; }
		public abstract decimal Y { get; set; }

		public abstract MBData ToSerializable ();

        public ValidationResult Validate () {
            return BypassValidator.Validate (this);
        }
	}




	public abstract partial class IBaseEllipseParameter : IParameter {

        public readonly MBData raw; 

        protected IBaseEllipseParameter (MBData raw) {
            this.raw = raw;
        }

		public abstract short Power { get; set; }
		public abstract short Speed { get; set; }
		public abstract bool Jogging { get; set; }
		public abstract bool Reverse { get; set; }
		public abstract bool Pause { get; set; }
		public abstract byte BasePoint { get; set; }
		public abstract decimal X { get; set; }
		public abstract decimal Y { get; set; }
		public abstract decimal Height { get; set; }
		public abstract decimal Aspect { get; set; }
		public abstract decimal Angle { get; set; }

		public abstract MBData ToSerializable ();

        public ValidationResult Validate () {
            return EllipseValidator.Validate (this);
        }
	}




}