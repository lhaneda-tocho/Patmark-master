<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".designer.cs" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="TokyoChokoku.MarkinBox.Sketchbook.TemplateMeta" #>
<#@ include file="$(SolutionDir)/Global.ttinclude"#>
<#  #>
// 
// This code is generated by "ParameterTemplate.tt"
// Not allowed to modify this code because your changes are deleted when in regeration.
// 

namespace TokyoChokoku.MarkinBox.Sketchbook.Parameters {
    using System;

<#
foreach( var parameterEntity in MetaParameters.Definitions) {
	var parameterName = parameterEntity.Name;
#>
	public partial class <#= parameterName #> : IBase<#= parameterName #>, IConstantParameter {

<#
	foreach( var propertyEntity in parameterEntity.PropertyDefinitions) {
		var contentType = propertyEntity.ContentTypeName;
		var propertyName = propertyEntity.Name;
        var contentName = "constant" + propertyName;
#>


        private readonly <#= contentType #> <#= contentName #>;
        
        override
		public <#= contentType #> <#= propertyName #> {
            get {
                return <#= contentName #>;
            }
            set {
                throw new NotImplementedException ();
            }
        }
<#
	}
#>


		public static <#= parameterName #> CopyOf ( IBase<#= parameterName #> copied ) {
			if ( copied is <#= parameterName #>)
				return (<#= parameterName #>) copied;
			else
				return new <#= parameterName #> (copied);
		}


		private <#= parameterName #> (
            MBData raw,
<#
	{
		var last = parameterEntity.PropertyDefinitions.Last ();
		foreach( var propertyEntity in parameterEntity.PropertyDefinitions) {
			var contentType = propertyEntity.ContentTypeName;
			var propertyName = propertyEntity.Name;

			if ( !Object.ReferenceEquals (propertyEntity, last) ) {
#>
			<#= contentType #> <#= propertyName #>,
<#
			} else {
#>
			<#= contentType #> <#= propertyName #> ) : base (raw) {
<#
			}
		}
	}

	{
		foreach( var propertyEntity in parameterEntity.PropertyDefinitions) {
            var propertyName = propertyEntity.Name;
            var contentName = "constant" + propertyEntity.Name;
#>
			this.<#= contentName #> = <#= propertyName #>;
<#
		}
	}
#>
		}


		private <#= parameterName #> ( IBase<#= parameterName #> copied ) 
			: this (
                copied.raw,
<#
	{
		var last = parameterEntity.PropertyDefinitions.Last ();
		foreach( var propertyEntity in parameterEntity.PropertyDefinitions) {
			var storeType = propertyEntity.StoreTypeName;
			var propertyName = propertyEntity.Name;
			var storeName = propertyName + "Store";
			if ( !Object.ReferenceEquals (propertyEntity, last) ) {
#>
				copied.<#= propertyName #>,
<#
			} else {
#>
				copied.<#= propertyName #> ) {
		}
<#
			}
		}
	}
#>

	}



<#
}
#>
}