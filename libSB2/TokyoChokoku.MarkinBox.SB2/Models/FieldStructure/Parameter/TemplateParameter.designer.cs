﻿// 
// This code is generated by "ParameterTemplate.tt"
// Not allowed to modify this code because your changes are deleted when in regeration.
// 

namespace TokyoChokoku.MarkinBox.Sketchbook.Parameters {
    using System;

	public partial class HorizontalTextParameter : IBaseHorizontalTextParameter, IConstantParameter {



        private readonly short constantPower;
        
        override
		public short Power {
            get {
                return constantPower;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly short constantSpeed;
        
        override
		public short Speed {
            get {
                return constantSpeed;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantJogging;
        
        override
		public bool Jogging {
            get {
                return constantJogging;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantReverse;
        
        override
		public bool Reverse {
            get {
                return constantReverse;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantPause;
        
        override
		public bool Pause {
            get {
                return constantPause;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly byte constantBasePoint;
        
        override
		public byte BasePoint {
            get {
                return constantBasePoint;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantMirrored;
        
        override
		public bool Mirrored {
            get {
                return constantMirrored;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantX;
        
        override
		public decimal X {
            get {
                return constantX;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantY;
        
        override
		public decimal Y {
            get {
                return constantY;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly string constantText;
        
        override
		public string Text {
            get {
                return constantText;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly FontMode constantFont;
        
        override
		public FontMode Font {
            get {
                return constantFont;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantPitch;
        
        override
		public decimal Pitch {
            get {
                return constantPitch;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantHeight;
        
        override
		public decimal Height {
            get {
                return constantHeight;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantAspect;
        
        override
		public decimal Aspect {
            get {
                return constantAspect;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantAngle;
        
        override
		public decimal Angle {
            get {
                return constantAngle;
            }
            set {
                throw new NotImplementedException ();
            }
        }


		public static HorizontalTextParameter CopyOf ( IBaseHorizontalTextParameter copied ) {
			if ( copied is HorizontalTextParameter)
				return (HorizontalTextParameter) copied;
			else
				return new HorizontalTextParameter (copied);
		}


		private HorizontalTextParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			byte BasePoint,
			bool Mirrored,
			decimal X,
			decimal Y,
			string Text,
			FontMode Font,
			decimal Pitch,
			decimal Height,
			decimal Aspect,
			decimal Angle ) : base (raw) {
			this.constantPower = Power;
			this.constantSpeed = Speed;
			this.constantJogging = Jogging;
			this.constantReverse = Reverse;
			this.constantPause = Pause;
			this.constantBasePoint = BasePoint;
			this.constantMirrored = Mirrored;
			this.constantX = X;
			this.constantY = Y;
			this.constantText = Text;
			this.constantFont = Font;
			this.constantPitch = Pitch;
			this.constantHeight = Height;
			this.constantAspect = Aspect;
			this.constantAngle = Angle;
		}


		private HorizontalTextParameter ( IBaseHorizontalTextParameter copied ) 
			: this (
                copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.BasePoint,
				copied.Mirrored,
				copied.X,
				copied.Y,
				copied.Text,
				copied.Font,
				copied.Pitch,
				copied.Height,
				copied.Aspect,
				copied.Angle ) {
		}

	}



	public partial class YVerticalTextParameter : IBaseYVerticalTextParameter, IConstantParameter {



        private readonly short constantPower;
        
        override
		public short Power {
            get {
                return constantPower;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly short constantSpeed;
        
        override
		public short Speed {
            get {
                return constantSpeed;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantJogging;
        
        override
		public bool Jogging {
            get {
                return constantJogging;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantReverse;
        
        override
		public bool Reverse {
            get {
                return constantReverse;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantPause;
        
        override
		public bool Pause {
            get {
                return constantPause;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly byte constantBasePoint;
        
        override
		public byte BasePoint {
            get {
                return constantBasePoint;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantMirrored;
        
        override
		public bool Mirrored {
            get {
                return constantMirrored;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantX;
        
        override
		public decimal X {
            get {
                return constantX;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantY;
        
        override
		public decimal Y {
            get {
                return constantY;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly string constantText;
        
        override
		public string Text {
            get {
                return constantText;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly FontMode constantFont;
        
        override
		public FontMode Font {
            get {
                return constantFont;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantPitch;
        
        override
		public decimal Pitch {
            get {
                return constantPitch;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantHeight;
        
        override
		public decimal Height {
            get {
                return constantHeight;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantAspect;
        
        override
		public decimal Aspect {
            get {
                return constantAspect;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantAngle;
        
        override
		public decimal Angle {
            get {
                return constantAngle;
            }
            set {
                throw new NotImplementedException ();
            }
        }


		public static YVerticalTextParameter CopyOf ( IBaseYVerticalTextParameter copied ) {
			if ( copied is YVerticalTextParameter)
				return (YVerticalTextParameter) copied;
			else
				return new YVerticalTextParameter (copied);
		}


		private YVerticalTextParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			byte BasePoint,
			bool Mirrored,
			decimal X,
			decimal Y,
			string Text,
			FontMode Font,
			decimal Pitch,
			decimal Height,
			decimal Aspect,
			decimal Angle ) : base (raw) {
			this.constantPower = Power;
			this.constantSpeed = Speed;
			this.constantJogging = Jogging;
			this.constantReverse = Reverse;
			this.constantPause = Pause;
			this.constantBasePoint = BasePoint;
			this.constantMirrored = Mirrored;
			this.constantX = X;
			this.constantY = Y;
			this.constantText = Text;
			this.constantFont = Font;
			this.constantPitch = Pitch;
			this.constantHeight = Height;
			this.constantAspect = Aspect;
			this.constantAngle = Angle;
		}


		private YVerticalTextParameter ( IBaseYVerticalTextParameter copied ) 
			: this (
                copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.BasePoint,
				copied.Mirrored,
				copied.X,
				copied.Y,
				copied.Text,
				copied.Font,
				copied.Pitch,
				copied.Height,
				copied.Aspect,
				copied.Angle ) {
		}

	}



	public partial class XVerticalTextParameter : IBaseXVerticalTextParameter, IConstantParameter {



        private readonly short constantPower;
        
        override
		public short Power {
            get {
                return constantPower;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly short constantSpeed;
        
        override
		public short Speed {
            get {
                return constantSpeed;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantJogging;
        
        override
		public bool Jogging {
            get {
                return constantJogging;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantReverse;
        
        override
		public bool Reverse {
            get {
                return constantReverse;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantPause;
        
        override
		public bool Pause {
            get {
                return constantPause;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly byte constantBasePoint;
        
        override
		public byte BasePoint {
            get {
                return constantBasePoint;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantMirrored;
        
        override
		public bool Mirrored {
            get {
                return constantMirrored;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantX;
        
        override
		public decimal X {
            get {
                return constantX;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantY;
        
        override
		public decimal Y {
            get {
                return constantY;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly string constantText;
        
        override
		public string Text {
            get {
                return constantText;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly FontMode constantFont;
        
        override
		public FontMode Font {
            get {
                return constantFont;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantPitch;
        
        override
		public decimal Pitch {
            get {
                return constantPitch;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantHeight;
        
        override
		public decimal Height {
            get {
                return constantHeight;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantAspect;
        
        override
		public decimal Aspect {
            get {
                return constantAspect;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantAngle;
        
        override
		public decimal Angle {
            get {
                return constantAngle;
            }
            set {
                throw new NotImplementedException ();
            }
        }


		public static XVerticalTextParameter CopyOf ( IBaseXVerticalTextParameter copied ) {
			if ( copied is XVerticalTextParameter)
				return (XVerticalTextParameter) copied;
			else
				return new XVerticalTextParameter (copied);
		}


		private XVerticalTextParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			byte BasePoint,
			bool Mirrored,
			decimal X,
			decimal Y,
			string Text,
			FontMode Font,
			decimal Pitch,
			decimal Height,
			decimal Aspect,
			decimal Angle ) : base (raw) {
			this.constantPower = Power;
			this.constantSpeed = Speed;
			this.constantJogging = Jogging;
			this.constantReverse = Reverse;
			this.constantPause = Pause;
			this.constantBasePoint = BasePoint;
			this.constantMirrored = Mirrored;
			this.constantX = X;
			this.constantY = Y;
			this.constantText = Text;
			this.constantFont = Font;
			this.constantPitch = Pitch;
			this.constantHeight = Height;
			this.constantAspect = Aspect;
			this.constantAngle = Angle;
		}


		private XVerticalTextParameter ( IBaseXVerticalTextParameter copied ) 
			: this (
                copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.BasePoint,
				copied.Mirrored,
				copied.X,
				copied.Y,
				copied.Text,
				copied.Font,
				copied.Pitch,
				copied.Height,
				copied.Aspect,
				copied.Angle ) {
		}

	}



	public partial class InnerArcTextParameter : IBaseInnerArcTextParameter, IConstantParameter {



        private readonly short constantPower;
        
        override
		public short Power {
            get {
                return constantPower;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly short constantSpeed;
        
        override
		public short Speed {
            get {
                return constantSpeed;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantJogging;
        
        override
		public bool Jogging {
            get {
                return constantJogging;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantReverse;
        
        override
		public bool Reverse {
            get {
                return constantReverse;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantPause;
        
        override
		public bool Pause {
            get {
                return constantPause;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly byte constantBasePoint;
        
        override
		public byte BasePoint {
            get {
                return constantBasePoint;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantMirrored;
        
        override
		public bool Mirrored {
            get {
                return constantMirrored;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantX;
        
        override
		public decimal X {
            get {
                return constantX;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantY;
        
        override
		public decimal Y {
            get {
                return constantY;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly string constantText;
        
        override
		public string Text {
            get {
                return constantText;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly FontMode constantFont;
        
        override
		public FontMode Font {
            get {
                return constantFont;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantPitch;
        
        override
		public decimal Pitch {
            get {
                return constantPitch;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantHeight;
        
        override
		public decimal Height {
            get {
                return constantHeight;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantAspect;
        
        override
		public decimal Aspect {
            get {
                return constantAspect;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantRadius;
        
        override
		public decimal Radius {
            get {
                return constantRadius;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantAngle;
        
        override
		public decimal Angle {
            get {
                return constantAngle;
            }
            set {
                throw new NotImplementedException ();
            }
        }


		public static InnerArcTextParameter CopyOf ( IBaseInnerArcTextParameter copied ) {
			if ( copied is InnerArcTextParameter)
				return (InnerArcTextParameter) copied;
			else
				return new InnerArcTextParameter (copied);
		}


		private InnerArcTextParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			byte BasePoint,
			bool Mirrored,
			decimal X,
			decimal Y,
			string Text,
			FontMode Font,
			decimal Pitch,
			decimal Height,
			decimal Aspect,
			decimal Radius,
			decimal Angle ) : base (raw) {
			this.constantPower = Power;
			this.constantSpeed = Speed;
			this.constantJogging = Jogging;
			this.constantReverse = Reverse;
			this.constantPause = Pause;
			this.constantBasePoint = BasePoint;
			this.constantMirrored = Mirrored;
			this.constantX = X;
			this.constantY = Y;
			this.constantText = Text;
			this.constantFont = Font;
			this.constantPitch = Pitch;
			this.constantHeight = Height;
			this.constantAspect = Aspect;
			this.constantRadius = Radius;
			this.constantAngle = Angle;
		}


		private InnerArcTextParameter ( IBaseInnerArcTextParameter copied ) 
			: this (
                copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.BasePoint,
				copied.Mirrored,
				copied.X,
				copied.Y,
				copied.Text,
				copied.Font,
				copied.Pitch,
				copied.Height,
				copied.Aspect,
				copied.Radius,
				copied.Angle ) {
		}

	}



	public partial class OuterArcTextParameter : IBaseOuterArcTextParameter, IConstantParameter {



        private readonly short constantPower;
        
        override
		public short Power {
            get {
                return constantPower;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly short constantSpeed;
        
        override
		public short Speed {
            get {
                return constantSpeed;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantJogging;
        
        override
		public bool Jogging {
            get {
                return constantJogging;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantReverse;
        
        override
		public bool Reverse {
            get {
                return constantReverse;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantPause;
        
        override
		public bool Pause {
            get {
                return constantPause;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly byte constantBasePoint;
        
        override
		public byte BasePoint {
            get {
                return constantBasePoint;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantMirrored;
        
        override
		public bool Mirrored {
            get {
                return constantMirrored;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantX;
        
        override
		public decimal X {
            get {
                return constantX;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantY;
        
        override
		public decimal Y {
            get {
                return constantY;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly string constantText;
        
        override
		public string Text {
            get {
                return constantText;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly FontMode constantFont;
        
        override
		public FontMode Font {
            get {
                return constantFont;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantPitch;
        
        override
		public decimal Pitch {
            get {
                return constantPitch;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantHeight;
        
        override
		public decimal Height {
            get {
                return constantHeight;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantAspect;
        
        override
		public decimal Aspect {
            get {
                return constantAspect;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantRadius;
        
        override
		public decimal Radius {
            get {
                return constantRadius;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantAngle;
        
        override
		public decimal Angle {
            get {
                return constantAngle;
            }
            set {
                throw new NotImplementedException ();
            }
        }


		public static OuterArcTextParameter CopyOf ( IBaseOuterArcTextParameter copied ) {
			if ( copied is OuterArcTextParameter)
				return (OuterArcTextParameter) copied;
			else
				return new OuterArcTextParameter (copied);
		}


		private OuterArcTextParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			byte BasePoint,
			bool Mirrored,
			decimal X,
			decimal Y,
			string Text,
			FontMode Font,
			decimal Pitch,
			decimal Height,
			decimal Aspect,
			decimal Radius,
			decimal Angle ) : base (raw) {
			this.constantPower = Power;
			this.constantSpeed = Speed;
			this.constantJogging = Jogging;
			this.constantReverse = Reverse;
			this.constantPause = Pause;
			this.constantBasePoint = BasePoint;
			this.constantMirrored = Mirrored;
			this.constantX = X;
			this.constantY = Y;
			this.constantText = Text;
			this.constantFont = Font;
			this.constantPitch = Pitch;
			this.constantHeight = Height;
			this.constantAspect = Aspect;
			this.constantRadius = Radius;
			this.constantAngle = Angle;
		}


		private OuterArcTextParameter ( IBaseOuterArcTextParameter copied ) 
			: this (
                copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.BasePoint,
				copied.Mirrored,
				copied.X,
				copied.Y,
				copied.Text,
				copied.Font,
				copied.Pitch,
				copied.Height,
				copied.Aspect,
				copied.Radius,
				copied.Angle ) {
		}

	}



	public partial class QrCodeParameter : IBaseQrCodeParameter, IConstantParameter {



        private readonly short constantPower;
        
        override
		public short Power {
            get {
                return constantPower;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly short constantSpeed;
        
        override
		public short Speed {
            get {
                return constantSpeed;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantJogging;
        
        override
		public bool Jogging {
            get {
                return constantJogging;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantReverse;
        
        override
		public bool Reverse {
            get {
                return constantReverse;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantPause;
        
        override
		public bool Pause {
            get {
                return constantPause;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly byte constantBasePoint;
        
        override
		public byte BasePoint {
            get {
                return constantBasePoint;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantMirrored;
        
        override
		public bool Mirrored {
            get {
                return constantMirrored;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantX;
        
        override
		public decimal X {
            get {
                return constantX;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantY;
        
        override
		public decimal Y {
            get {
                return constantY;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly string constantText;
        
        override
		public string Text {
            get {
                return constantText;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantHeight;
        
        override
		public decimal Height {
            get {
                return constantHeight;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantAngle;
        
        override
		public decimal Angle {
            get {
                return constantAngle;
            }
            set {
                throw new NotImplementedException ();
            }
        }


		public static QrCodeParameter CopyOf ( IBaseQrCodeParameter copied ) {
			if ( copied is QrCodeParameter)
				return (QrCodeParameter) copied;
			else
				return new QrCodeParameter (copied);
		}


		private QrCodeParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			byte BasePoint,
			bool Mirrored,
			decimal X,
			decimal Y,
			string Text,
			decimal Height,
			decimal Angle ) : base (raw) {
			this.constantPower = Power;
			this.constantSpeed = Speed;
			this.constantJogging = Jogging;
			this.constantReverse = Reverse;
			this.constantPause = Pause;
			this.constantBasePoint = BasePoint;
			this.constantMirrored = Mirrored;
			this.constantX = X;
			this.constantY = Y;
			this.constantText = Text;
			this.constantHeight = Height;
			this.constantAngle = Angle;
		}


		private QrCodeParameter ( IBaseQrCodeParameter copied ) 
			: this (
                copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.BasePoint,
				copied.Mirrored,
				copied.X,
				copied.Y,
				copied.Text,
				copied.Height,
				copied.Angle ) {
		}

	}



	public partial class DataMatrixParameter : IBaseDataMatrixParameter, IConstantParameter {



        private readonly short constantPower;
        
        override
		public short Power {
            get {
                return constantPower;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly short constantSpeed;
        
        override
		public short Speed {
            get {
                return constantSpeed;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantJogging;
        
        override
		public bool Jogging {
            get {
                return constantJogging;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantReverse;
        
        override
		public bool Reverse {
            get {
                return constantReverse;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantPause;
        
        override
		public bool Pause {
            get {
                return constantPause;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly byte constantBasePoint;
        
        override
		public byte BasePoint {
            get {
                return constantBasePoint;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantMirrored;
        
        override
		public bool Mirrored {
            get {
                return constantMirrored;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantX;
        
        override
		public decimal X {
            get {
                return constantX;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantY;
        
        override
		public decimal Y {
            get {
                return constantY;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly string constantText;
        
        override
		public string Text {
            get {
                return constantText;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantHeight;
        
        override
		public decimal Height {
            get {
                return constantHeight;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantAngle;
        
        override
		public decimal Angle {
            get {
                return constantAngle;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly DotCount2D constantDotCount;
        
        override
		public DotCount2D DotCount {
            get {
                return constantDotCount;
            }
            set {
                throw new NotImplementedException ();
            }
        }


		public static DataMatrixParameter CopyOf ( IBaseDataMatrixParameter copied ) {
			if ( copied is DataMatrixParameter)
				return (DataMatrixParameter) copied;
			else
				return new DataMatrixParameter (copied);
		}


		private DataMatrixParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			byte BasePoint,
			bool Mirrored,
			decimal X,
			decimal Y,
			string Text,
			decimal Height,
			decimal Angle,
			DotCount2D DotCount ) : base (raw) {
			this.constantPower = Power;
			this.constantSpeed = Speed;
			this.constantJogging = Jogging;
			this.constantReverse = Reverse;
			this.constantPause = Pause;
			this.constantBasePoint = BasePoint;
			this.constantMirrored = Mirrored;
			this.constantX = X;
			this.constantY = Y;
			this.constantText = Text;
			this.constantHeight = Height;
			this.constantAngle = Angle;
			this.constantDotCount = DotCount;
		}


		private DataMatrixParameter ( IBaseDataMatrixParameter copied ) 
			: this (
                copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.BasePoint,
				copied.Mirrored,
				copied.X,
				copied.Y,
				copied.Text,
				copied.Height,
				copied.Angle,
				copied.DotCount ) {
		}

	}



	public partial class RectangleParameter : IBaseRectangleParameter, IConstantParameter {



        private readonly short constantPower;
        
        override
		public short Power {
            get {
                return constantPower;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly short constantSpeed;
        
        override
		public short Speed {
            get {
                return constantSpeed;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantJogging;
        
        override
		public bool Jogging {
            get {
                return constantJogging;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantReverse;
        
        override
		public bool Reverse {
            get {
                return constantReverse;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantPause;
        
        override
		public bool Pause {
            get {
                return constantPause;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly byte constantBasePoint;
        
        override
		public byte BasePoint {
            get {
                return constantBasePoint;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantX;
        
        override
		public decimal X {
            get {
                return constantX;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantY;
        
        override
		public decimal Y {
            get {
                return constantY;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantHeight;
        
        override
		public decimal Height {
            get {
                return constantHeight;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantAspect;
        
        override
		public decimal Aspect {
            get {
                return constantAspect;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantAngle;
        
        override
		public decimal Angle {
            get {
                return constantAngle;
            }
            set {
                throw new NotImplementedException ();
            }
        }


		public static RectangleParameter CopyOf ( IBaseRectangleParameter copied ) {
			if ( copied is RectangleParameter)
				return (RectangleParameter) copied;
			else
				return new RectangleParameter (copied);
		}


		private RectangleParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			byte BasePoint,
			decimal X,
			decimal Y,
			decimal Height,
			decimal Aspect,
			decimal Angle ) : base (raw) {
			this.constantPower = Power;
			this.constantSpeed = Speed;
			this.constantJogging = Jogging;
			this.constantReverse = Reverse;
			this.constantPause = Pause;
			this.constantBasePoint = BasePoint;
			this.constantX = X;
			this.constantY = Y;
			this.constantHeight = Height;
			this.constantAspect = Aspect;
			this.constantAngle = Angle;
		}


		private RectangleParameter ( IBaseRectangleParameter copied ) 
			: this (
                copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.BasePoint,
				copied.X,
				copied.Y,
				copied.Height,
				copied.Aspect,
				copied.Angle ) {
		}

	}



	public partial class TriangleParameter : IBaseTriangleParameter, IConstantParameter {



        private readonly short constantPower;
        
        override
		public short Power {
            get {
                return constantPower;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly short constantSpeed;
        
        override
		public short Speed {
            get {
                return constantSpeed;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantJogging;
        
        override
		public bool Jogging {
            get {
                return constantJogging;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantReverse;
        
        override
		public bool Reverse {
            get {
                return constantReverse;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantPause;
        
        override
		public bool Pause {
            get {
                return constantPause;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly byte constantBasePoint;
        
        override
		public byte BasePoint {
            get {
                return constantBasePoint;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantX;
        
        override
		public decimal X {
            get {
                return constantX;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantY;
        
        override
		public decimal Y {
            get {
                return constantY;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantHornX;
        
        override
		public decimal HornX {
            get {
                return constantHornX;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantHeight;
        
        override
		public decimal Height {
            get {
                return constantHeight;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantAspect;
        
        override
		public decimal Aspect {
            get {
                return constantAspect;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantAngle;
        
        override
		public decimal Angle {
            get {
                return constantAngle;
            }
            set {
                throw new NotImplementedException ();
            }
        }


		public static TriangleParameter CopyOf ( IBaseTriangleParameter copied ) {
			if ( copied is TriangleParameter)
				return (TriangleParameter) copied;
			else
				return new TriangleParameter (copied);
		}


		private TriangleParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			byte BasePoint,
			decimal X,
			decimal Y,
			decimal HornX,
			decimal Height,
			decimal Aspect,
			decimal Angle ) : base (raw) {
			this.constantPower = Power;
			this.constantSpeed = Speed;
			this.constantJogging = Jogging;
			this.constantReverse = Reverse;
			this.constantPause = Pause;
			this.constantBasePoint = BasePoint;
			this.constantX = X;
			this.constantY = Y;
			this.constantHornX = HornX;
			this.constantHeight = Height;
			this.constantAspect = Aspect;
			this.constantAngle = Angle;
		}


		private TriangleParameter ( IBaseTriangleParameter copied ) 
			: this (
                copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.BasePoint,
				copied.X,
				copied.Y,
				copied.HornX,
				copied.Height,
				copied.Aspect,
				copied.Angle ) {
		}

	}



	public partial class CircleParameter : IBaseCircleParameter, IConstantParameter {



        private readonly short constantPower;
        
        override
		public short Power {
            get {
                return constantPower;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly short constantSpeed;
        
        override
		public short Speed {
            get {
                return constantSpeed;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantJogging;
        
        override
		public bool Jogging {
            get {
                return constantJogging;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantReverse;
        
        override
		public bool Reverse {
            get {
                return constantReverse;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantPause;
        
        override
		public bool Pause {
            get {
                return constantPause;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly byte constantBasePoint;
        
        override
		public byte BasePoint {
            get {
                return constantBasePoint;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantX;
        
        override
		public decimal X {
            get {
                return constantX;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantY;
        
        override
		public decimal Y {
            get {
                return constantY;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantRadius;
        
        override
		public decimal Radius {
            get {
                return constantRadius;
            }
            set {
                throw new NotImplementedException ();
            }
        }


		public static CircleParameter CopyOf ( IBaseCircleParameter copied ) {
			if ( copied is CircleParameter)
				return (CircleParameter) copied;
			else
				return new CircleParameter (copied);
		}


		private CircleParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			byte BasePoint,
			decimal X,
			decimal Y,
			decimal Radius ) : base (raw) {
			this.constantPower = Power;
			this.constantSpeed = Speed;
			this.constantJogging = Jogging;
			this.constantReverse = Reverse;
			this.constantPause = Pause;
			this.constantBasePoint = BasePoint;
			this.constantX = X;
			this.constantY = Y;
			this.constantRadius = Radius;
		}


		private CircleParameter ( IBaseCircleParameter copied ) 
			: this (
                copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.BasePoint,
				copied.X,
				copied.Y,
				copied.Radius ) {
		}

	}



	public partial class LineParameter : IBaseLineParameter, IConstantParameter {



        private readonly short constantPower;
        
        override
		public short Power {
            get {
                return constantPower;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly short constantSpeed;
        
        override
		public short Speed {
            get {
                return constantSpeed;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantJogging;
        
        override
		public bool Jogging {
            get {
                return constantJogging;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantReverse;
        
        override
		public bool Reverse {
            get {
                return constantReverse;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantPause;
        
        override
		public bool Pause {
            get {
                return constantPause;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantStartX;
        
        override
		public decimal StartX {
            get {
                return constantStartX;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantStartY;
        
        override
		public decimal StartY {
            get {
                return constantStartY;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantCenterX;
        
        override
		public decimal CenterX {
            get {
                return constantCenterX;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantCenterY;
        
        override
		public decimal CenterY {
            get {
                return constantCenterY;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantEndX;
        
        override
		public decimal EndX {
            get {
                return constantEndX;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantEndY;
        
        override
		public decimal EndY {
            get {
                return constantEndY;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantIsBezierCurve;
        
        override
		public bool IsBezierCurve {
            get {
                return constantIsBezierCurve;
            }
            set {
                throw new NotImplementedException ();
            }
        }


		public static LineParameter CopyOf ( IBaseLineParameter copied ) {
			if ( copied is LineParameter)
				return (LineParameter) copied;
			else
				return new LineParameter (copied);
		}


		private LineParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			decimal StartX,
			decimal StartY,
			decimal CenterX,
			decimal CenterY,
			decimal EndX,
			decimal EndY,
			bool IsBezierCurve ) : base (raw) {
			this.constantPower = Power;
			this.constantSpeed = Speed;
			this.constantJogging = Jogging;
			this.constantReverse = Reverse;
			this.constantPause = Pause;
			this.constantStartX = StartX;
			this.constantStartY = StartY;
			this.constantCenterX = CenterX;
			this.constantCenterY = CenterY;
			this.constantEndX = EndX;
			this.constantEndY = EndY;
			this.constantIsBezierCurve = IsBezierCurve;
		}


		private LineParameter ( IBaseLineParameter copied ) 
			: this (
                copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.StartX,
				copied.StartY,
				copied.CenterX,
				copied.CenterY,
				copied.EndX,
				copied.EndY,
				copied.IsBezierCurve ) {
		}

	}



	public partial class BypassParameter : IBaseBypassParameter, IConstantParameter {



        private readonly short constantPower;
        
        override
		public short Power {
            get {
                return constantPower;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly short constantSpeed;
        
        override
		public short Speed {
            get {
                return constantSpeed;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantJogging;
        
        override
		public bool Jogging {
            get {
                return constantJogging;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantReverse;
        
        override
		public bool Reverse {
            get {
                return constantReverse;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantPause;
        
        override
		public bool Pause {
            get {
                return constantPause;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantX;
        
        override
		public decimal X {
            get {
                return constantX;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantY;
        
        override
		public decimal Y {
            get {
                return constantY;
            }
            set {
                throw new NotImplementedException ();
            }
        }


		public static BypassParameter CopyOf ( IBaseBypassParameter copied ) {
			if ( copied is BypassParameter)
				return (BypassParameter) copied;
			else
				return new BypassParameter (copied);
		}


		private BypassParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			decimal X,
			decimal Y ) : base (raw) {
			this.constantPower = Power;
			this.constantSpeed = Speed;
			this.constantJogging = Jogging;
			this.constantReverse = Reverse;
			this.constantPause = Pause;
			this.constantX = X;
			this.constantY = Y;
		}


		private BypassParameter ( IBaseBypassParameter copied ) 
			: this (
                copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.X,
				copied.Y ) {
		}

	}



	public partial class EllipseParameter : IBaseEllipseParameter, IConstantParameter {



        private readonly short constantPower;
        
        override
		public short Power {
            get {
                return constantPower;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly short constantSpeed;
        
        override
		public short Speed {
            get {
                return constantSpeed;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantJogging;
        
        override
		public bool Jogging {
            get {
                return constantJogging;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantReverse;
        
        override
		public bool Reverse {
            get {
                return constantReverse;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly bool constantPause;
        
        override
		public bool Pause {
            get {
                return constantPause;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly byte constantBasePoint;
        
        override
		public byte BasePoint {
            get {
                return constantBasePoint;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantX;
        
        override
		public decimal X {
            get {
                return constantX;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantY;
        
        override
		public decimal Y {
            get {
                return constantY;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantHeight;
        
        override
		public decimal Height {
            get {
                return constantHeight;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantAspect;
        
        override
		public decimal Aspect {
            get {
                return constantAspect;
            }
            set {
                throw new NotImplementedException ();
            }
        }


        private readonly decimal constantAngle;
        
        override
		public decimal Angle {
            get {
                return constantAngle;
            }
            set {
                throw new NotImplementedException ();
            }
        }


		public static EllipseParameter CopyOf ( IBaseEllipseParameter copied ) {
			if ( copied is EllipseParameter)
				return (EllipseParameter) copied;
			else
				return new EllipseParameter (copied);
		}


		private EllipseParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			byte BasePoint,
			decimal X,
			decimal Y,
			decimal Height,
			decimal Aspect,
			decimal Angle ) : base (raw) {
			this.constantPower = Power;
			this.constantSpeed = Speed;
			this.constantJogging = Jogging;
			this.constantReverse = Reverse;
			this.constantPause = Pause;
			this.constantBasePoint = BasePoint;
			this.constantX = X;
			this.constantY = Y;
			this.constantHeight = Height;
			this.constantAspect = Aspect;
			this.constantAngle = Angle;
		}


		private EllipseParameter ( IBaseEllipseParameter copied ) 
			: this (
                copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.BasePoint,
				copied.X,
				copied.Y,
				copied.Height,
				copied.Aspect,
				copied.Angle ) {
		}

	}



}