<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".designer.cs" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="TokyoChokoku.MarkinBox.Sketchbook.TemplateMeta" #>
<#@ include file="$(SolutionDir)/Global.ttinclude"#>
<#  #>
// 
// This code is generated by "BaseParameterTemplate.tt"
// Not allowed to modify this code because your changes are deleted when in regeration.
// 

namespace TokyoChokoku.MarkinBox.Sketchbook.Parameters {
    using TokyoChokoku.MarkinBox.Sketchbook.Validators;

<#
foreach( var field in MetaFields.Definitions) {
    var parameter = field.Parameter;
#>
	public abstract partial class IBase<#= parameter.Name #> : IParameter {

        public readonly MBData raw; 

        protected IBase<#= parameter.Name #> (MBData raw) {
            this.raw = raw;
        }

<#
	foreach( var property in parameter.PropertyDefinitions) {
		var storeType = property.StoreTypeName;
		var contentType = property.ContentTypeName;

		var propertyName = property.Name;
		var storeName = propertyName + "Store";
#>
		public abstract <#= contentType #> <#= propertyName #> { get; set; }
<#
	}
#>

		public abstract MBData ToSerializable ();

        public ValidationResult Validate () {
            return <#= field.Name #>Validator.Validate (this);
        }
	}




<#
}
#>
}