﻿// 
// This code is generated by "MutableParameterTemplate.tt"
// Not allowed to modify this code because your changes are deleted when in regeration.
// 

namespace TokyoChokoku.MarkinBox.Sketchbook.Parameters {
    using TokyoChokoku.MarkinBox.Sketchbook.Properties.Stores;
    using TokyoChokoku.MarkinBox.Sketchbook.Validators;
    
	public partial class MutableHorizontalTextParameter : IBaseHorizontalTextParameter, IMutableParameter {

        public MarkingValidator MarkingValidator { get; }
        public MarkupTextValidator TextValidator { get; }
        public HorizontalTextGeometryValidator GeometryValidator { get; }
     

        private short variablePower;

        override
        public short Power {
            get { return variablePower;}
            set { variablePower = value; }
        }
        
		public PowerStore PowerStore
		{ get; }




        private short variableSpeed;

        override
        public short Speed {
            get { return variableSpeed;}
            set { variableSpeed = value; }
        }
        
		public SpeedStore SpeedStore
		{ get; }




        private bool variableJogging;

        override
        public bool Jogging {
            get { return variableJogging;}
            set { variableJogging = value; }
        }
        
		public JoggingStore JoggingStore
		{ get; }




        private bool variableReverse;

        override
        public bool Reverse {
            get { return variableReverse;}
            set { variableReverse = value; }
        }
        
		public ReverseStore ReverseStore
		{ get; }




        private bool variablePause;

        override
        public bool Pause {
            get { return variablePause;}
            set { variablePause = value; }
        }
        
		public PauseStore PauseStore
		{ get; }




        private byte variableBasePoint;

        override
        public byte BasePoint {
            get { return variableBasePoint;}
            set { variableBasePoint = value; }
        }
        
		public BasePointStore BasePointStore
		{ get; }




        private bool variableMirrored;

        override
        public bool Mirrored {
            get { return variableMirrored;}
            set { variableMirrored = value; }
        }
        
		public MirroredStore MirroredStore
		{ get; }




        private decimal variableX;

        override
        public decimal X {
            get { return variableX;}
            set { variableX = value; }
        }
        
		public XStore XStore
		{ get; }




        private decimal variableY;

        override
        public decimal Y {
            get { return variableY;}
            set { variableY = value; }
        }
        
		public YStore YStore
		{ get; }




        private string variableText;

        override
        public string Text {
            get { return variableText;}
            set { variableText = value; }
        }
        
		public TextStore TextStore
		{ get; }




        private FontMode variableFont;

        override
        public FontMode Font {
            get { return variableFont;}
            set { variableFont = value; }
        }
        
		public FontStore FontStore
		{ get; }




        private decimal variablePitch;

        override
        public decimal Pitch {
            get { return variablePitch;}
            set { variablePitch = value; }
        }
        
		public PitchStore PitchStore
		{ get; }




        private decimal variableHeight;

        override
        public decimal Height {
            get { return variableHeight;}
            set { variableHeight = value; }
        }
        
		public HeightStore HeightStore
		{ get; }




        private decimal variableAspect;

        override
        public decimal Aspect {
            get { return variableAspect;}
            set { variableAspect = value; }
        }
        
		public AspectStore AspectStore
		{ get; }




        private decimal variableAngle;

        override
        public decimal Angle {
            get { return variableAngle;}
            set { variableAngle = value; }
        }
        
		public AngleStore AngleStore
		{ get; }




		public static MutableHorizontalTextParameter CopyOf (IBaseHorizontalTextParameter constant) {
			return new MutableHorizontalTextParameter (constant);
		}


		public static MutableHorizontalTextParameter Create ()
		{
			return new MutableHorizontalTextParameter ( HorizontalTextParameter.Create() );
		}


		public static MutableHorizontalTextParameter Create (MBData raw) {
			return new MutableHorizontalTextParameter ( HorizontalTextParameter.Create (raw) );
		}


		/// <summary>
		/// Initializes Stores. 
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.HorizontalTextParameter"/> class.
		/// </summary>
		private MutableHorizontalTextParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			byte BasePoint,
			bool Mirrored,
			decimal X,
			decimal Y,
			string Text,
			FontMode Font,
			decimal Pitch,
			decimal Height,
			decimal Aspect,
			decimal Angle ) : base(raw) {
            
            var validator = HorizontalTextValidator.CreateClosed (this);

            TextValidator     = MarkupTextValidator.CreateOfHorizontalText (this);
            MarkingValidator  = MarkingValidator.CreateOfHorizontalText (this);
            GeometryValidator = HorizontalTextGeometryValidator.Create (this);
            variablePower = Power;
            PowerStore = new PowerStore (
                MarkingValidator.ValidatePower,
                (     ) => this.Power,
                (value) => this.Power = value);


            variableSpeed = Speed;
            SpeedStore = new SpeedStore (
                MarkingValidator.ValidateSpeed,
                (     ) => this.Speed,
                (value) => this.Speed = value);


            variableJogging = Jogging;
            JoggingStore = new JoggingStore (
                EmptyValidator.Validate,
                (     ) => this.Jogging,
                (value) => this.Jogging = value);


            variableReverse = Reverse;
            ReverseStore = new ReverseStore (
                MarkingValidator.ValidateReverse,
                (     ) => this.Reverse,
                (value) => this.Reverse = value);


            variablePause = Pause;
            PauseStore = new PauseStore (
                MarkingValidator.ValidatePause,
                (     ) => this.Pause,
                (value) => this.Pause = value);


            variableBasePoint = BasePoint;
            BasePointStore = new BasePointStore (
                GeometryValidator.ValidateBasePoint,
                (     ) => this.BasePoint,
                (value) => this.BasePoint = value);


            variableMirrored = Mirrored;
            MirroredStore = new MirroredStore (
                GeometryValidator.ValidateMirrored,
                (     ) => this.Mirrored,
                (value) => this.Mirrored = value);


            variableX = X;
            XStore = new XStore (
                GeometryValidator.ValidateX,
                (     ) => this.X,
                (value) => this.X = value);


            variableY = Y;
            YStore = new YStore (
                GeometryValidator.ValidateY,
                (     ) => this.Y,
                (value) => this.Y = value);



            variableText = Text;
            TextStore = new TextStore (
                (value) => {
                    ValidationResult result = ValidationResult.Empty;
                    result = result.Merge (GeometryValidator.ValidateText (value));
                    result = result.Merge (TextValidator.ValidateText (value));
                    return result;
                },
                (     ) => this.Text,
                (value) => this.Text = value);


            variableFont = Font;
            FontStore = new FontStore (
                GeometryValidator.ValidateFont,
                (     ) => this.Font,
                (value) => this.Font = value);


            variablePitch = Pitch;
            PitchStore = new PitchStore (
                GeometryValidator.ValidatePitch,
                (     ) => this.Pitch,
                (value) => this.Pitch = value);


            variableHeight = Height;
            HeightStore = new HeightStore (
                GeometryValidator.ValidateHeight,
                (     ) => this.Height,
                (value) => this.Height = value);


            variableAspect = Aspect;
            AspectStore = new AspectStore (
                GeometryValidator.ValidateAspect,
                (     ) => this.Aspect,
                (value) => this.Aspect = value);


            variableAngle = Angle;
            AngleStore = new AngleStore (
                GeometryValidator.ValidateAngle,
                (     ) => this.Angle,
                (value) => this.Angle = value);


            Initialize (validator);
		}


        partial void Initialize (ClosedValidator validator);
		

		/// <summary>
		/// Initializes a new instance by copying the existing instance.
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.HorizontalTextParameter"/> class.
		/// </summary>
		/// <param name="copied"> the copied instance. </parm>
		private MutableHorizontalTextParameter (IBaseHorizontalTextParameter copied)
			: this (
            copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.BasePoint,
				copied.Mirrored,
				copied.X,
				copied.Y,
				copied.Text,
				copied.Font,
				copied.Pitch,
				copied.Height,
				copied.Aspect,
				copied.Angle ) {
		}

        override
		public MBData ToSerializable () {
			return HorizontalTextParameter.CopyOf (this).ToSerializable ();
		}

	}




	public partial class MutableYVerticalTextParameter : IBaseYVerticalTextParameter, IMutableParameter {

        public MarkingValidator MarkingValidator { get; }
        public MarkupTextValidator TextValidator { get; }
        public YVerticalTextGeometryValidator GeometryValidator { get; }
     

        private short variablePower;

        override
        public short Power {
            get { return variablePower;}
            set { variablePower = value; }
        }
        
		public PowerStore PowerStore
		{ get; }




        private short variableSpeed;

        override
        public short Speed {
            get { return variableSpeed;}
            set { variableSpeed = value; }
        }
        
		public SpeedStore SpeedStore
		{ get; }




        private bool variableJogging;

        override
        public bool Jogging {
            get { return variableJogging;}
            set { variableJogging = value; }
        }
        
		public JoggingStore JoggingStore
		{ get; }




        private bool variableReverse;

        override
        public bool Reverse {
            get { return variableReverse;}
            set { variableReverse = value; }
        }
        
		public ReverseStore ReverseStore
		{ get; }




        private bool variablePause;

        override
        public bool Pause {
            get { return variablePause;}
            set { variablePause = value; }
        }
        
		public PauseStore PauseStore
		{ get; }




        private byte variableBasePoint;

        override
        public byte BasePoint {
            get { return variableBasePoint;}
            set { variableBasePoint = value; }
        }
        
		public BasePointStore BasePointStore
		{ get; }




        private bool variableMirrored;

        override
        public bool Mirrored {
            get { return variableMirrored;}
            set { variableMirrored = value; }
        }
        
		public MirroredStore MirroredStore
		{ get; }




        private decimal variableX;

        override
        public decimal X {
            get { return variableX;}
            set { variableX = value; }
        }
        
		public XStore XStore
		{ get; }




        private decimal variableY;

        override
        public decimal Y {
            get { return variableY;}
            set { variableY = value; }
        }
        
		public YStore YStore
		{ get; }




        private string variableText;

        override
        public string Text {
            get { return variableText;}
            set { variableText = value; }
        }
        
		public TextStore TextStore
		{ get; }




        private FontMode variableFont;

        override
        public FontMode Font {
            get { return variableFont;}
            set { variableFont = value; }
        }
        
		public FontStore FontStore
		{ get; }




        private decimal variablePitch;

        override
        public decimal Pitch {
            get { return variablePitch;}
            set { variablePitch = value; }
        }
        
		public PitchStore PitchStore
		{ get; }




        private decimal variableHeight;

        override
        public decimal Height {
            get { return variableHeight;}
            set { variableHeight = value; }
        }
        
		public HeightStore HeightStore
		{ get; }




        private decimal variableAspect;

        override
        public decimal Aspect {
            get { return variableAspect;}
            set { variableAspect = value; }
        }
        
		public AspectStore AspectStore
		{ get; }




        private decimal variableAngle;

        override
        public decimal Angle {
            get { return variableAngle;}
            set { variableAngle = value; }
        }
        
		public AngleStore AngleStore
		{ get; }




		public static MutableYVerticalTextParameter CopyOf (IBaseYVerticalTextParameter constant) {
			return new MutableYVerticalTextParameter (constant);
		}


		public static MutableYVerticalTextParameter Create ()
		{
			return new MutableYVerticalTextParameter ( YVerticalTextParameter.Create() );
		}


		public static MutableYVerticalTextParameter Create (MBData raw) {
			return new MutableYVerticalTextParameter ( YVerticalTextParameter.Create (raw) );
		}


		/// <summary>
		/// Initializes Stores. 
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.YVerticalTextParameter"/> class.
		/// </summary>
		private MutableYVerticalTextParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			byte BasePoint,
			bool Mirrored,
			decimal X,
			decimal Y,
			string Text,
			FontMode Font,
			decimal Pitch,
			decimal Height,
			decimal Aspect,
			decimal Angle ) : base(raw) {
            
            var validator = YVerticalTextValidator.CreateClosed (this);

            TextValidator     = MarkupTextValidator.CreateOfYVerticalText (this);
            MarkingValidator  = MarkingValidator.CreateOfYVerticalText (this);
            GeometryValidator = YVerticalTextGeometryValidator.Create (this);
            variablePower = Power;
            PowerStore = new PowerStore (
                MarkingValidator.ValidatePower,
                (     ) => this.Power,
                (value) => this.Power = value);


            variableSpeed = Speed;
            SpeedStore = new SpeedStore (
                MarkingValidator.ValidateSpeed,
                (     ) => this.Speed,
                (value) => this.Speed = value);


            variableJogging = Jogging;
            JoggingStore = new JoggingStore (
                EmptyValidator.Validate,
                (     ) => this.Jogging,
                (value) => this.Jogging = value);


            variableReverse = Reverse;
            ReverseStore = new ReverseStore (
                MarkingValidator.ValidateReverse,
                (     ) => this.Reverse,
                (value) => this.Reverse = value);


            variablePause = Pause;
            PauseStore = new PauseStore (
                MarkingValidator.ValidatePause,
                (     ) => this.Pause,
                (value) => this.Pause = value);


            variableBasePoint = BasePoint;
            BasePointStore = new BasePointStore (
                GeometryValidator.ValidateBasePoint,
                (     ) => this.BasePoint,
                (value) => this.BasePoint = value);


            variableMirrored = Mirrored;
            MirroredStore = new MirroredStore (
                GeometryValidator.ValidateMirrored,
                (     ) => this.Mirrored,
                (value) => this.Mirrored = value);


            variableX = X;
            XStore = new XStore (
                GeometryValidator.ValidateX,
                (     ) => this.X,
                (value) => this.X = value);


            variableY = Y;
            YStore = new YStore (
                GeometryValidator.ValidateY,
                (     ) => this.Y,
                (value) => this.Y = value);



            variableText = Text;
            TextStore = new TextStore (
                (value) => {
                    ValidationResult result = ValidationResult.Empty;
                    result = result.Merge (GeometryValidator.ValidateText (value));
                    result = result.Merge (TextValidator.ValidateText (value));
                    return result;
                },
                (     ) => this.Text,
                (value) => this.Text = value);


            variableFont = Font;
            FontStore = new FontStore (
                GeometryValidator.ValidateFont,
                (     ) => this.Font,
                (value) => this.Font = value);


            variablePitch = Pitch;
            PitchStore = new PitchStore (
                GeometryValidator.ValidatePitch,
                (     ) => this.Pitch,
                (value) => this.Pitch = value);


            variableHeight = Height;
            HeightStore = new HeightStore (
                GeometryValidator.ValidateHeight,
                (     ) => this.Height,
                (value) => this.Height = value);


            variableAspect = Aspect;
            AspectStore = new AspectStore (
                GeometryValidator.ValidateAspect,
                (     ) => this.Aspect,
                (value) => this.Aspect = value);


            variableAngle = Angle;
            AngleStore = new AngleStore (
                GeometryValidator.ValidateAngle,
                (     ) => this.Angle,
                (value) => this.Angle = value);


            Initialize (validator);
		}


        partial void Initialize (ClosedValidator validator);
		

		/// <summary>
		/// Initializes a new instance by copying the existing instance.
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.YVerticalTextParameter"/> class.
		/// </summary>
		/// <param name="copied"> the copied instance. </parm>
		private MutableYVerticalTextParameter (IBaseYVerticalTextParameter copied)
			: this (
            copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.BasePoint,
				copied.Mirrored,
				copied.X,
				copied.Y,
				copied.Text,
				copied.Font,
				copied.Pitch,
				copied.Height,
				copied.Aspect,
				copied.Angle ) {
		}

        override
		public MBData ToSerializable () {
			return YVerticalTextParameter.CopyOf (this).ToSerializable ();
		}

	}




	public partial class MutableXVerticalTextParameter : IBaseXVerticalTextParameter, IMutableParameter {

        public MarkingValidator MarkingValidator { get; }
        public MarkupTextValidator TextValidator { get; }
        public XVerticalTextGeometryValidator GeometryValidator { get; }
     

        private short variablePower;

        override
        public short Power {
            get { return variablePower;}
            set { variablePower = value; }
        }
        
		public PowerStore PowerStore
		{ get; }




        private short variableSpeed;

        override
        public short Speed {
            get { return variableSpeed;}
            set { variableSpeed = value; }
        }
        
		public SpeedStore SpeedStore
		{ get; }




        private bool variableJogging;

        override
        public bool Jogging {
            get { return variableJogging;}
            set { variableJogging = value; }
        }
        
		public JoggingStore JoggingStore
		{ get; }




        private bool variableReverse;

        override
        public bool Reverse {
            get { return variableReverse;}
            set { variableReverse = value; }
        }
        
		public ReverseStore ReverseStore
		{ get; }




        private bool variablePause;

        override
        public bool Pause {
            get { return variablePause;}
            set { variablePause = value; }
        }
        
		public PauseStore PauseStore
		{ get; }




        private byte variableBasePoint;

        override
        public byte BasePoint {
            get { return variableBasePoint;}
            set { variableBasePoint = value; }
        }
        
		public BasePointStore BasePointStore
		{ get; }




        private bool variableMirrored;

        override
        public bool Mirrored {
            get { return variableMirrored;}
            set { variableMirrored = value; }
        }
        
		public MirroredStore MirroredStore
		{ get; }




        private decimal variableX;

        override
        public decimal X {
            get { return variableX;}
            set { variableX = value; }
        }
        
		public XStore XStore
		{ get; }




        private decimal variableY;

        override
        public decimal Y {
            get { return variableY;}
            set { variableY = value; }
        }
        
		public YStore YStore
		{ get; }




        private string variableText;

        override
        public string Text {
            get { return variableText;}
            set { variableText = value; }
        }
        
		public TextStore TextStore
		{ get; }




        private FontMode variableFont;

        override
        public FontMode Font {
            get { return variableFont;}
            set { variableFont = value; }
        }
        
		public FontStore FontStore
		{ get; }




        private decimal variablePitch;

        override
        public decimal Pitch {
            get { return variablePitch;}
            set { variablePitch = value; }
        }
        
		public PitchStore PitchStore
		{ get; }




        private decimal variableHeight;

        override
        public decimal Height {
            get { return variableHeight;}
            set { variableHeight = value; }
        }
        
		public HeightStore HeightStore
		{ get; }




        private decimal variableAspect;

        override
        public decimal Aspect {
            get { return variableAspect;}
            set { variableAspect = value; }
        }
        
		public AspectStore AspectStore
		{ get; }




        private decimal variableAngle;

        override
        public decimal Angle {
            get { return variableAngle;}
            set { variableAngle = value; }
        }
        
		public AngleStore AngleStore
		{ get; }




		public static MutableXVerticalTextParameter CopyOf (IBaseXVerticalTextParameter constant) {
			return new MutableXVerticalTextParameter (constant);
		}


		public static MutableXVerticalTextParameter Create ()
		{
			return new MutableXVerticalTextParameter ( XVerticalTextParameter.Create() );
		}


		public static MutableXVerticalTextParameter Create (MBData raw) {
			return new MutableXVerticalTextParameter ( XVerticalTextParameter.Create (raw) );
		}


		/// <summary>
		/// Initializes Stores. 
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.XVerticalTextParameter"/> class.
		/// </summary>
		private MutableXVerticalTextParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			byte BasePoint,
			bool Mirrored,
			decimal X,
			decimal Y,
			string Text,
			FontMode Font,
			decimal Pitch,
			decimal Height,
			decimal Aspect,
			decimal Angle ) : base(raw) {
            
            var validator = XVerticalTextValidator.CreateClosed (this);

            TextValidator     = MarkupTextValidator.CreateOfXVerticalText (this);
            MarkingValidator  = MarkingValidator.CreateOfXVerticalText (this);
            GeometryValidator = XVerticalTextGeometryValidator.Create (this);
            variablePower = Power;
            PowerStore = new PowerStore (
                MarkingValidator.ValidatePower,
                (     ) => this.Power,
                (value) => this.Power = value);


            variableSpeed = Speed;
            SpeedStore = new SpeedStore (
                MarkingValidator.ValidateSpeed,
                (     ) => this.Speed,
                (value) => this.Speed = value);


            variableJogging = Jogging;
            JoggingStore = new JoggingStore (
                EmptyValidator.Validate,
                (     ) => this.Jogging,
                (value) => this.Jogging = value);


            variableReverse = Reverse;
            ReverseStore = new ReverseStore (
                MarkingValidator.ValidateReverse,
                (     ) => this.Reverse,
                (value) => this.Reverse = value);


            variablePause = Pause;
            PauseStore = new PauseStore (
                MarkingValidator.ValidatePause,
                (     ) => this.Pause,
                (value) => this.Pause = value);


            variableBasePoint = BasePoint;
            BasePointStore = new BasePointStore (
                GeometryValidator.ValidateBasePoint,
                (     ) => this.BasePoint,
                (value) => this.BasePoint = value);


            variableMirrored = Mirrored;
            MirroredStore = new MirroredStore (
                GeometryValidator.ValidateMirrored,
                (     ) => this.Mirrored,
                (value) => this.Mirrored = value);


            variableX = X;
            XStore = new XStore (
                GeometryValidator.ValidateX,
                (     ) => this.X,
                (value) => this.X = value);


            variableY = Y;
            YStore = new YStore (
                GeometryValidator.ValidateY,
                (     ) => this.Y,
                (value) => this.Y = value);



            variableText = Text;
            TextStore = new TextStore (
                (value) => {
                    ValidationResult result = ValidationResult.Empty;
                    result = result.Merge (GeometryValidator.ValidateText (value));
                    result = result.Merge (TextValidator.ValidateText (value));
                    return result;
                },
                (     ) => this.Text,
                (value) => this.Text = value);


            variableFont = Font;
            FontStore = new FontStore (
                GeometryValidator.ValidateFont,
                (     ) => this.Font,
                (value) => this.Font = value);


            variablePitch = Pitch;
            PitchStore = new PitchStore (
                GeometryValidator.ValidatePitch,
                (     ) => this.Pitch,
                (value) => this.Pitch = value);


            variableHeight = Height;
            HeightStore = new HeightStore (
                GeometryValidator.ValidateHeight,
                (     ) => this.Height,
                (value) => this.Height = value);


            variableAspect = Aspect;
            AspectStore = new AspectStore (
                GeometryValidator.ValidateAspect,
                (     ) => this.Aspect,
                (value) => this.Aspect = value);


            variableAngle = Angle;
            AngleStore = new AngleStore (
                GeometryValidator.ValidateAngle,
                (     ) => this.Angle,
                (value) => this.Angle = value);


            Initialize (validator);
		}


        partial void Initialize (ClosedValidator validator);
		

		/// <summary>
		/// Initializes a new instance by copying the existing instance.
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.XVerticalTextParameter"/> class.
		/// </summary>
		/// <param name="copied"> the copied instance. </parm>
		private MutableXVerticalTextParameter (IBaseXVerticalTextParameter copied)
			: this (
            copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.BasePoint,
				copied.Mirrored,
				copied.X,
				copied.Y,
				copied.Text,
				copied.Font,
				copied.Pitch,
				copied.Height,
				copied.Aspect,
				copied.Angle ) {
		}

        override
		public MBData ToSerializable () {
			return XVerticalTextParameter.CopyOf (this).ToSerializable ();
		}

	}




	public partial class MutableInnerArcTextParameter : IBaseInnerArcTextParameter, IMutableParameter {

        public MarkingValidator MarkingValidator { get; }
        public MarkupTextValidator TextValidator { get; }
        public InnerArcTextGeometryValidator GeometryValidator { get; }
     

        private short variablePower;

        override
        public short Power {
            get { return variablePower;}
            set { variablePower = value; }
        }
        
		public PowerStore PowerStore
		{ get; }




        private short variableSpeed;

        override
        public short Speed {
            get { return variableSpeed;}
            set { variableSpeed = value; }
        }
        
		public SpeedStore SpeedStore
		{ get; }




        private bool variableJogging;

        override
        public bool Jogging {
            get { return variableJogging;}
            set { variableJogging = value; }
        }
        
		public JoggingStore JoggingStore
		{ get; }




        private bool variableReverse;

        override
        public bool Reverse {
            get { return variableReverse;}
            set { variableReverse = value; }
        }
        
		public ReverseStore ReverseStore
		{ get; }




        private bool variablePause;

        override
        public bool Pause {
            get { return variablePause;}
            set { variablePause = value; }
        }
        
		public PauseStore PauseStore
		{ get; }




        private byte variableBasePoint;

        override
        public byte BasePoint {
            get { return variableBasePoint;}
            set { variableBasePoint = value; }
        }
        
		public BasePointStore BasePointStore
		{ get; }




        private bool variableMirrored;

        override
        public bool Mirrored {
            get { return variableMirrored;}
            set { variableMirrored = value; }
        }
        
		public MirroredStore MirroredStore
		{ get; }




        private decimal variableX;

        override
        public decimal X {
            get { return variableX;}
            set { variableX = value; }
        }
        
		public XStore XStore
		{ get; }




        private decimal variableY;

        override
        public decimal Y {
            get { return variableY;}
            set { variableY = value; }
        }
        
		public YStore YStore
		{ get; }




        private string variableText;

        override
        public string Text {
            get { return variableText;}
            set { variableText = value; }
        }
        
		public TextStore TextStore
		{ get; }




        private FontMode variableFont;

        override
        public FontMode Font {
            get { return variableFont;}
            set { variableFont = value; }
        }
        
		public FontStore FontStore
		{ get; }




        private decimal variablePitch;

        override
        public decimal Pitch {
            get { return variablePitch;}
            set { variablePitch = value; }
        }
        
		public PitchStore PitchStore
		{ get; }




        private decimal variableHeight;

        override
        public decimal Height {
            get { return variableHeight;}
            set { variableHeight = value; }
        }
        
		public HeightStore HeightStore
		{ get; }




        private decimal variableAspect;

        override
        public decimal Aspect {
            get { return variableAspect;}
            set { variableAspect = value; }
        }
        
		public AspectStore AspectStore
		{ get; }




        private decimal variableRadius;

        override
        public decimal Radius {
            get { return variableRadius;}
            set { variableRadius = value; }
        }
        
		public RadiusStore RadiusStore
		{ get; }




        private decimal variableAngle;

        override
        public decimal Angle {
            get { return variableAngle;}
            set { variableAngle = value; }
        }
        
		public AngleStore AngleStore
		{ get; }




		public static MutableInnerArcTextParameter CopyOf (IBaseInnerArcTextParameter constant) {
			return new MutableInnerArcTextParameter (constant);
		}


		public static MutableInnerArcTextParameter Create ()
		{
			return new MutableInnerArcTextParameter ( InnerArcTextParameter.Create() );
		}


		public static MutableInnerArcTextParameter Create (MBData raw) {
			return new MutableInnerArcTextParameter ( InnerArcTextParameter.Create (raw) );
		}


		/// <summary>
		/// Initializes Stores. 
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.InnerArcTextParameter"/> class.
		/// </summary>
		private MutableInnerArcTextParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			byte BasePoint,
			bool Mirrored,
			decimal X,
			decimal Y,
			string Text,
			FontMode Font,
			decimal Pitch,
			decimal Height,
			decimal Aspect,
			decimal Radius,
			decimal Angle ) : base(raw) {
            
            var validator = InnerArcTextValidator.CreateClosed (this);

            TextValidator     = MarkupTextValidator.CreateOfInnerArcText (this);
            MarkingValidator  = MarkingValidator.CreateOfInnerArcText (this);
            GeometryValidator = InnerArcTextGeometryValidator.Create (this);
            variablePower = Power;
            PowerStore = new PowerStore (
                MarkingValidator.ValidatePower,
                (     ) => this.Power,
                (value) => this.Power = value);


            variableSpeed = Speed;
            SpeedStore = new SpeedStore (
                MarkingValidator.ValidateSpeed,
                (     ) => this.Speed,
                (value) => this.Speed = value);


            variableJogging = Jogging;
            JoggingStore = new JoggingStore (
                EmptyValidator.Validate,
                (     ) => this.Jogging,
                (value) => this.Jogging = value);


            variableReverse = Reverse;
            ReverseStore = new ReverseStore (
                MarkingValidator.ValidateReverse,
                (     ) => this.Reverse,
                (value) => this.Reverse = value);


            variablePause = Pause;
            PauseStore = new PauseStore (
                MarkingValidator.ValidatePause,
                (     ) => this.Pause,
                (value) => this.Pause = value);


            variableBasePoint = BasePoint;
            BasePointStore = new BasePointStore (
                GeometryValidator.ValidateBasePoint,
                (     ) => this.BasePoint,
                (value) => this.BasePoint = value);


            variableMirrored = Mirrored;
            MirroredStore = new MirroredStore (
                GeometryValidator.ValidateMirrored,
                (     ) => this.Mirrored,
                (value) => this.Mirrored = value);


            variableX = X;
            XStore = new XStore (
                GeometryValidator.ValidateX,
                (     ) => this.X,
                (value) => this.X = value);


            variableY = Y;
            YStore = new YStore (
                GeometryValidator.ValidateY,
                (     ) => this.Y,
                (value) => this.Y = value);



            variableText = Text;
            TextStore = new TextStore (
                (value) => {
                    ValidationResult result = ValidationResult.Empty;
                    result = result.Merge (GeometryValidator.ValidateText (value));
                    result = result.Merge (TextValidator.ValidateText (value));
                    return result;
                },
                (     ) => this.Text,
                (value) => this.Text = value);


            variableFont = Font;
            FontStore = new FontStore (
                GeometryValidator.ValidateFont,
                (     ) => this.Font,
                (value) => this.Font = value);


            variablePitch = Pitch;
            PitchStore = new PitchStore (
                GeometryValidator.ValidatePitch,
                (     ) => this.Pitch,
                (value) => this.Pitch = value);


            variableHeight = Height;
            HeightStore = new HeightStore (
                GeometryValidator.ValidateHeight,
                (     ) => this.Height,
                (value) => this.Height = value);


            variableAspect = Aspect;
            AspectStore = new AspectStore (
                GeometryValidator.ValidateAspect,
                (     ) => this.Aspect,
                (value) => this.Aspect = value);


            variableRadius = Radius;
            RadiusStore = new RadiusStore (
                GeometryValidator.ValidateRadius,
                (     ) => this.Radius,
                (value) => this.Radius = value);


            variableAngle = Angle;
            AngleStore = new AngleStore (
                GeometryValidator.ValidateAngle,
                (     ) => this.Angle,
                (value) => this.Angle = value);


            Initialize (validator);
		}


        partial void Initialize (ClosedValidator validator);
		

		/// <summary>
		/// Initializes a new instance by copying the existing instance.
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.InnerArcTextParameter"/> class.
		/// </summary>
		/// <param name="copied"> the copied instance. </parm>
		private MutableInnerArcTextParameter (IBaseInnerArcTextParameter copied)
			: this (
            copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.BasePoint,
				copied.Mirrored,
				copied.X,
				copied.Y,
				copied.Text,
				copied.Font,
				copied.Pitch,
				copied.Height,
				copied.Aspect,
				copied.Radius,
				copied.Angle ) {
		}

        override
		public MBData ToSerializable () {
			return InnerArcTextParameter.CopyOf (this).ToSerializable ();
		}

	}




	public partial class MutableOuterArcTextParameter : IBaseOuterArcTextParameter, IMutableParameter {

        public MarkingValidator MarkingValidator { get; }
        public MarkupTextValidator TextValidator { get; }
        public OuterArcTextGeometryValidator GeometryValidator { get; }
     

        private short variablePower;

        override
        public short Power {
            get { return variablePower;}
            set { variablePower = value; }
        }
        
		public PowerStore PowerStore
		{ get; }




        private short variableSpeed;

        override
        public short Speed {
            get { return variableSpeed;}
            set { variableSpeed = value; }
        }
        
		public SpeedStore SpeedStore
		{ get; }




        private bool variableJogging;

        override
        public bool Jogging {
            get { return variableJogging;}
            set { variableJogging = value; }
        }
        
		public JoggingStore JoggingStore
		{ get; }




        private bool variableReverse;

        override
        public bool Reverse {
            get { return variableReverse;}
            set { variableReverse = value; }
        }
        
		public ReverseStore ReverseStore
		{ get; }




        private bool variablePause;

        override
        public bool Pause {
            get { return variablePause;}
            set { variablePause = value; }
        }
        
		public PauseStore PauseStore
		{ get; }




        private byte variableBasePoint;

        override
        public byte BasePoint {
            get { return variableBasePoint;}
            set { variableBasePoint = value; }
        }
        
		public BasePointStore BasePointStore
		{ get; }




        private bool variableMirrored;

        override
        public bool Mirrored {
            get { return variableMirrored;}
            set { variableMirrored = value; }
        }
        
		public MirroredStore MirroredStore
		{ get; }




        private decimal variableX;

        override
        public decimal X {
            get { return variableX;}
            set { variableX = value; }
        }
        
		public XStore XStore
		{ get; }




        private decimal variableY;

        override
        public decimal Y {
            get { return variableY;}
            set { variableY = value; }
        }
        
		public YStore YStore
		{ get; }




        private string variableText;

        override
        public string Text {
            get { return variableText;}
            set { variableText = value; }
        }
        
		public TextStore TextStore
		{ get; }




        private FontMode variableFont;

        override
        public FontMode Font {
            get { return variableFont;}
            set { variableFont = value; }
        }
        
		public FontStore FontStore
		{ get; }




        private decimal variablePitch;

        override
        public decimal Pitch {
            get { return variablePitch;}
            set { variablePitch = value; }
        }
        
		public PitchStore PitchStore
		{ get; }




        private decimal variableHeight;

        override
        public decimal Height {
            get { return variableHeight;}
            set { variableHeight = value; }
        }
        
		public HeightStore HeightStore
		{ get; }




        private decimal variableAspect;

        override
        public decimal Aspect {
            get { return variableAspect;}
            set { variableAspect = value; }
        }
        
		public AspectStore AspectStore
		{ get; }




        private decimal variableRadius;

        override
        public decimal Radius {
            get { return variableRadius;}
            set { variableRadius = value; }
        }
        
		public RadiusStore RadiusStore
		{ get; }




        private decimal variableAngle;

        override
        public decimal Angle {
            get { return variableAngle;}
            set { variableAngle = value; }
        }
        
		public AngleStore AngleStore
		{ get; }




		public static MutableOuterArcTextParameter CopyOf (IBaseOuterArcTextParameter constant) {
			return new MutableOuterArcTextParameter (constant);
		}


		public static MutableOuterArcTextParameter Create ()
		{
			return new MutableOuterArcTextParameter ( OuterArcTextParameter.Create() );
		}


		public static MutableOuterArcTextParameter Create (MBData raw) {
			return new MutableOuterArcTextParameter ( OuterArcTextParameter.Create (raw) );
		}


		/// <summary>
		/// Initializes Stores. 
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.OuterArcTextParameter"/> class.
		/// </summary>
		private MutableOuterArcTextParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			byte BasePoint,
			bool Mirrored,
			decimal X,
			decimal Y,
			string Text,
			FontMode Font,
			decimal Pitch,
			decimal Height,
			decimal Aspect,
			decimal Radius,
			decimal Angle ) : base(raw) {
            
            var validator = OuterArcTextValidator.CreateClosed (this);

            TextValidator     = MarkupTextValidator.CreateOfOuterArcText (this);
            MarkingValidator  = MarkingValidator.CreateOfOuterArcText (this);
            GeometryValidator = OuterArcTextGeometryValidator.Create (this);
            variablePower = Power;
            PowerStore = new PowerStore (
                MarkingValidator.ValidatePower,
                (     ) => this.Power,
                (value) => this.Power = value);


            variableSpeed = Speed;
            SpeedStore = new SpeedStore (
                MarkingValidator.ValidateSpeed,
                (     ) => this.Speed,
                (value) => this.Speed = value);


            variableJogging = Jogging;
            JoggingStore = new JoggingStore (
                EmptyValidator.Validate,
                (     ) => this.Jogging,
                (value) => this.Jogging = value);


            variableReverse = Reverse;
            ReverseStore = new ReverseStore (
                MarkingValidator.ValidateReverse,
                (     ) => this.Reverse,
                (value) => this.Reverse = value);


            variablePause = Pause;
            PauseStore = new PauseStore (
                MarkingValidator.ValidatePause,
                (     ) => this.Pause,
                (value) => this.Pause = value);


            variableBasePoint = BasePoint;
            BasePointStore = new BasePointStore (
                GeometryValidator.ValidateBasePoint,
                (     ) => this.BasePoint,
                (value) => this.BasePoint = value);


            variableMirrored = Mirrored;
            MirroredStore = new MirroredStore (
                GeometryValidator.ValidateMirrored,
                (     ) => this.Mirrored,
                (value) => this.Mirrored = value);


            variableX = X;
            XStore = new XStore (
                GeometryValidator.ValidateX,
                (     ) => this.X,
                (value) => this.X = value);


            variableY = Y;
            YStore = new YStore (
                GeometryValidator.ValidateY,
                (     ) => this.Y,
                (value) => this.Y = value);



            variableText = Text;
            TextStore = new TextStore (
                (value) => {
                    ValidationResult result = ValidationResult.Empty;
                    result = result.Merge (GeometryValidator.ValidateText (value));
                    result = result.Merge (TextValidator.ValidateText (value));
                    return result;
                },
                (     ) => this.Text,
                (value) => this.Text = value);


            variableFont = Font;
            FontStore = new FontStore (
                GeometryValidator.ValidateFont,
                (     ) => this.Font,
                (value) => this.Font = value);


            variablePitch = Pitch;
            PitchStore = new PitchStore (
                GeometryValidator.ValidatePitch,
                (     ) => this.Pitch,
                (value) => this.Pitch = value);


            variableHeight = Height;
            HeightStore = new HeightStore (
                GeometryValidator.ValidateHeight,
                (     ) => this.Height,
                (value) => this.Height = value);


            variableAspect = Aspect;
            AspectStore = new AspectStore (
                GeometryValidator.ValidateAspect,
                (     ) => this.Aspect,
                (value) => this.Aspect = value);


            variableRadius = Radius;
            RadiusStore = new RadiusStore (
                GeometryValidator.ValidateRadius,
                (     ) => this.Radius,
                (value) => this.Radius = value);


            variableAngle = Angle;
            AngleStore = new AngleStore (
                GeometryValidator.ValidateAngle,
                (     ) => this.Angle,
                (value) => this.Angle = value);


            Initialize (validator);
		}


        partial void Initialize (ClosedValidator validator);
		

		/// <summary>
		/// Initializes a new instance by copying the existing instance.
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.OuterArcTextParameter"/> class.
		/// </summary>
		/// <param name="copied"> the copied instance. </parm>
		private MutableOuterArcTextParameter (IBaseOuterArcTextParameter copied)
			: this (
            copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.BasePoint,
				copied.Mirrored,
				copied.X,
				copied.Y,
				copied.Text,
				copied.Font,
				copied.Pitch,
				copied.Height,
				copied.Aspect,
				copied.Radius,
				copied.Angle ) {
		}

        override
		public MBData ToSerializable () {
			return OuterArcTextParameter.CopyOf (this).ToSerializable ();
		}

	}




	public partial class MutableQrCodeParameter : IBaseQrCodeParameter, IMutableParameter {

        public MarkingValidator MarkingValidator { get; }
        public QrCodeTextValidator TextValidator { get; }
        public QrCodeGeometryValidator GeometryValidator { get; }
     

        private short variablePower;

        override
        public short Power {
            get { return variablePower;}
            set { variablePower = value; }
        }
        
		public PowerStore PowerStore
		{ get; }




        private short variableSpeed;

        override
        public short Speed {
            get { return variableSpeed;}
            set { variableSpeed = value; }
        }
        
		public SpeedStore SpeedStore
		{ get; }




        private bool variableJogging;

        override
        public bool Jogging {
            get { return variableJogging;}
            set { variableJogging = value; }
        }
        
		public JoggingStore JoggingStore
		{ get; }




        private bool variableReverse;

        override
        public bool Reverse {
            get { return variableReverse;}
            set { variableReverse = value; }
        }
        
		public ReverseStore ReverseStore
		{ get; }




        private bool variablePause;

        override
        public bool Pause {
            get { return variablePause;}
            set { variablePause = value; }
        }
        
		public PauseStore PauseStore
		{ get; }




        private byte variableBasePoint;

        override
        public byte BasePoint {
            get { return variableBasePoint;}
            set { variableBasePoint = value; }
        }
        
		public BasePointStore BasePointStore
		{ get; }




        private bool variableMirrored;

        override
        public bool Mirrored {
            get { return variableMirrored;}
            set { variableMirrored = value; }
        }
        
		public MirroredStore MirroredStore
		{ get; }




        private decimal variableX;

        override
        public decimal X {
            get { return variableX;}
            set { variableX = value; }
        }
        
		public XStore XStore
		{ get; }




        private decimal variableY;

        override
        public decimal Y {
            get { return variableY;}
            set { variableY = value; }
        }
        
		public YStore YStore
		{ get; }




        private string variableText;

        override
        public string Text {
            get { return variableText;}
            set { variableText = value; }
        }
        
		public TextStore TextStore
		{ get; }




        private decimal variableHeight;

        override
        public decimal Height {
            get { return variableHeight;}
            set { variableHeight = value; }
        }
        
		public HeightStore HeightStore
		{ get; }




        private decimal variableAngle;

        override
        public decimal Angle {
            get { return variableAngle;}
            set { variableAngle = value; }
        }
        
		public AngleStore AngleStore
		{ get; }




		public static MutableQrCodeParameter CopyOf (IBaseQrCodeParameter constant) {
			return new MutableQrCodeParameter (constant);
		}


		public static MutableQrCodeParameter Create ()
		{
			return new MutableQrCodeParameter ( QrCodeParameter.Create() );
		}


		public static MutableQrCodeParameter Create (MBData raw) {
			return new MutableQrCodeParameter ( QrCodeParameter.Create (raw) );
		}


		/// <summary>
		/// Initializes Stores. 
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.QrCodeParameter"/> class.
		/// </summary>
		private MutableQrCodeParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			byte BasePoint,
			bool Mirrored,
			decimal X,
			decimal Y,
			string Text,
			decimal Height,
			decimal Angle ) : base(raw) {
            
            var validator = QrCodeValidator.CreateClosed (this);

            TextValidator     = QrCodeTextValidator.CreateOfQrCode (this);
            MarkingValidator  = MarkingValidator.CreateOfQrCode (this);
            GeometryValidator = QrCodeGeometryValidator.Create (this);
            variablePower = Power;
            PowerStore = new PowerStore (
                MarkingValidator.ValidatePower,
                (     ) => this.Power,
                (value) => this.Power = value);


            variableSpeed = Speed;
            SpeedStore = new SpeedStore (
                MarkingValidator.ValidateSpeed,
                (     ) => this.Speed,
                (value) => this.Speed = value);


            variableJogging = Jogging;
            JoggingStore = new JoggingStore (
                EmptyValidator.Validate,
                (     ) => this.Jogging,
                (value) => this.Jogging = value);


            variableReverse = Reverse;
            ReverseStore = new ReverseStore (
                MarkingValidator.ValidateReverse,
                (     ) => this.Reverse,
                (value) => this.Reverse = value);


            variablePause = Pause;
            PauseStore = new PauseStore (
                MarkingValidator.ValidatePause,
                (     ) => this.Pause,
                (value) => this.Pause = value);


            variableBasePoint = BasePoint;
            BasePointStore = new BasePointStore (
                GeometryValidator.ValidateBasePoint,
                (     ) => this.BasePoint,
                (value) => this.BasePoint = value);


            variableMirrored = Mirrored;
            MirroredStore = new MirroredStore (
                GeometryValidator.ValidateMirrored,
                (     ) => this.Mirrored,
                (value) => this.Mirrored = value);


            variableX = X;
            XStore = new XStore (
                GeometryValidator.ValidateX,
                (     ) => this.X,
                (value) => this.X = value);


            variableY = Y;
            YStore = new YStore (
                GeometryValidator.ValidateY,
                (     ) => this.Y,
                (value) => this.Y = value);



            variableText = Text;
            TextStore = new TextStore (
                (value) => {
                    ValidationResult result = ValidationResult.Empty;
                    result = result.Merge (GeometryValidator.ValidateText (value));
                    result = result.Merge (TextValidator.ValidateText (value));
                    return result;
                },
                (     ) => this.Text,
                (value) => this.Text = value);


            variableHeight = Height;
            HeightStore = new HeightStore (
                GeometryValidator.ValidateHeight,
                (     ) => this.Height,
                (value) => this.Height = value);


            variableAngle = Angle;
            AngleStore = new AngleStore (
                GeometryValidator.ValidateAngle,
                (     ) => this.Angle,
                (value) => this.Angle = value);


            Initialize (validator);
		}


        partial void Initialize (ClosedValidator validator);
		

		/// <summary>
		/// Initializes a new instance by copying the existing instance.
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.QrCodeParameter"/> class.
		/// </summary>
		/// <param name="copied"> the copied instance. </parm>
		private MutableQrCodeParameter (IBaseQrCodeParameter copied)
			: this (
            copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.BasePoint,
				copied.Mirrored,
				copied.X,
				copied.Y,
				copied.Text,
				copied.Height,
				copied.Angle ) {
		}

        override
		public MBData ToSerializable () {
			return QrCodeParameter.CopyOf (this).ToSerializable ();
		}

	}




	public partial class MutableDataMatrixParameter : IBaseDataMatrixParameter, IMutableParameter {

        public MarkingValidator MarkingValidator { get; }
        public DataMatrixTextValidator TextValidator { get; }
        public DataMatrixGeometryValidator GeometryValidator { get; }
     

        private short variablePower;

        override
        public short Power {
            get { return variablePower;}
            set { variablePower = value; }
        }
        
		public PowerStore PowerStore
		{ get; }




        private short variableSpeed;

        override
        public short Speed {
            get { return variableSpeed;}
            set { variableSpeed = value; }
        }
        
		public SpeedStore SpeedStore
		{ get; }




        private bool variableJogging;

        override
        public bool Jogging {
            get { return variableJogging;}
            set { variableJogging = value; }
        }
        
		public JoggingStore JoggingStore
		{ get; }




        private bool variableReverse;

        override
        public bool Reverse {
            get { return variableReverse;}
            set { variableReverse = value; }
        }
        
		public ReverseStore ReverseStore
		{ get; }




        private bool variablePause;

        override
        public bool Pause {
            get { return variablePause;}
            set { variablePause = value; }
        }
        
		public PauseStore PauseStore
		{ get; }




        private byte variableBasePoint;

        override
        public byte BasePoint {
            get { return variableBasePoint;}
            set { variableBasePoint = value; }
        }
        
		public BasePointStore BasePointStore
		{ get; }




        private bool variableMirrored;

        override
        public bool Mirrored {
            get { return variableMirrored;}
            set { variableMirrored = value; }
        }
        
		public MirroredStore MirroredStore
		{ get; }




        private decimal variableX;

        override
        public decimal X {
            get { return variableX;}
            set { variableX = value; }
        }
        
		public XStore XStore
		{ get; }




        private decimal variableY;

        override
        public decimal Y {
            get { return variableY;}
            set { variableY = value; }
        }
        
		public YStore YStore
		{ get; }




        private string variableText;

        override
        public string Text {
            get { return variableText;}
            set { variableText = value; }
        }
        
		public TextStore TextStore
		{ get; }




        private decimal variableHeight;

        override
        public decimal Height {
            get { return variableHeight;}
            set { variableHeight = value; }
        }
        
		public HeightStore HeightStore
		{ get; }




        private decimal variableAngle;

        override
        public decimal Angle {
            get { return variableAngle;}
            set { variableAngle = value; }
        }
        
		public AngleStore AngleStore
		{ get; }




        private DotCount2D variableDotCount;

        override
        public DotCount2D DotCount {
            get { return variableDotCount;}
            set { variableDotCount = value; }
        }
        
		public DotCountStore DotCountStore
		{ get; }




		public static MutableDataMatrixParameter CopyOf (IBaseDataMatrixParameter constant) {
			return new MutableDataMatrixParameter (constant);
		}


		public static MutableDataMatrixParameter Create ()
		{
			return new MutableDataMatrixParameter ( DataMatrixParameter.Create() );
		}


		public static MutableDataMatrixParameter Create (MBData raw) {
			return new MutableDataMatrixParameter ( DataMatrixParameter.Create (raw) );
		}


		/// <summary>
		/// Initializes Stores. 
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.DataMatrixParameter"/> class.
		/// </summary>
		private MutableDataMatrixParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			byte BasePoint,
			bool Mirrored,
			decimal X,
			decimal Y,
			string Text,
			decimal Height,
			decimal Angle,
			DotCount2D DotCount ) : base(raw) {
            
            var validator = DataMatrixValidator.CreateClosed (this);

            TextValidator     = DataMatrixTextValidator.CreateOfDataMatrix (this);
            MarkingValidator  = MarkingValidator.CreateOfDataMatrix (this);
            GeometryValidator = DataMatrixGeometryValidator.Create (this);
            variablePower = Power;
            PowerStore = new PowerStore (
                MarkingValidator.ValidatePower,
                (     ) => this.Power,
                (value) => this.Power = value);


            variableSpeed = Speed;
            SpeedStore = new SpeedStore (
                MarkingValidator.ValidateSpeed,
                (     ) => this.Speed,
                (value) => this.Speed = value);


            variableJogging = Jogging;
            JoggingStore = new JoggingStore (
                EmptyValidator.Validate,
                (     ) => this.Jogging,
                (value) => this.Jogging = value);


            variableReverse = Reverse;
            ReverseStore = new ReverseStore (
                MarkingValidator.ValidateReverse,
                (     ) => this.Reverse,
                (value) => this.Reverse = value);


            variablePause = Pause;
            PauseStore = new PauseStore (
                MarkingValidator.ValidatePause,
                (     ) => this.Pause,
                (value) => this.Pause = value);


            variableBasePoint = BasePoint;
            BasePointStore = new BasePointStore (
                GeometryValidator.ValidateBasePoint,
                (     ) => this.BasePoint,
                (value) => this.BasePoint = value);


            variableMirrored = Mirrored;
            MirroredStore = new MirroredStore (
                GeometryValidator.ValidateMirrored,
                (     ) => this.Mirrored,
                (value) => this.Mirrored = value);


            variableX = X;
            XStore = new XStore (
                GeometryValidator.ValidateX,
                (     ) => this.X,
                (value) => this.X = value);


            variableY = Y;
            YStore = new YStore (
                GeometryValidator.ValidateY,
                (     ) => this.Y,
                (value) => this.Y = value);



            variableText = Text;
            TextStore = new TextStore (
                (value) => {
                    ValidationResult result = ValidationResult.Empty;
                    result = result.Merge (GeometryValidator.ValidateText (value));
                    result = result.Merge (TextValidator.ValidateText (value));
                    return result;
                },
                (     ) => this.Text,
                (value) => this.Text = value);


            variableHeight = Height;
            HeightStore = new HeightStore (
                GeometryValidator.ValidateHeight,
                (     ) => this.Height,
                (value) => this.Height = value);


            variableAngle = Angle;
            AngleStore = new AngleStore (
                GeometryValidator.ValidateAngle,
                (     ) => this.Angle,
                (value) => this.Angle = value);


            variableDotCount = DotCount;
            DotCountStore = new DotCountStore (
                GeometryValidator.ValidateDotCount,
                (     ) => this.DotCount,
                (value) => this.DotCount = value);


            Initialize (validator);
		}


        partial void Initialize (ClosedValidator validator);
		

		/// <summary>
		/// Initializes a new instance by copying the existing instance.
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.DataMatrixParameter"/> class.
		/// </summary>
		/// <param name="copied"> the copied instance. </parm>
		private MutableDataMatrixParameter (IBaseDataMatrixParameter copied)
			: this (
            copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.BasePoint,
				copied.Mirrored,
				copied.X,
				copied.Y,
				copied.Text,
				copied.Height,
				copied.Angle,
				copied.DotCount ) {
		}

        override
		public MBData ToSerializable () {
			return DataMatrixParameter.CopyOf (this).ToSerializable ();
		}

	}




	public partial class MutableRectangleParameter : IBaseRectangleParameter, IMutableParameter {

        public MarkingValidator MarkingValidator { get; }
        public RectangleGeometryValidator GeometryValidator { get; }
     

        private short variablePower;

        override
        public short Power {
            get { return variablePower;}
            set { variablePower = value; }
        }
        
		public PowerStore PowerStore
		{ get; }




        private short variableSpeed;

        override
        public short Speed {
            get { return variableSpeed;}
            set { variableSpeed = value; }
        }
        
		public SpeedStore SpeedStore
		{ get; }




        private bool variableJogging;

        override
        public bool Jogging {
            get { return variableJogging;}
            set { variableJogging = value; }
        }
        
		public JoggingStore JoggingStore
		{ get; }




        private bool variableReverse;

        override
        public bool Reverse {
            get { return variableReverse;}
            set { variableReverse = value; }
        }
        
		public ReverseStore ReverseStore
		{ get; }




        private bool variablePause;

        override
        public bool Pause {
            get { return variablePause;}
            set { variablePause = value; }
        }
        
		public PauseStore PauseStore
		{ get; }




        private byte variableBasePoint;

        override
        public byte BasePoint {
            get { return variableBasePoint;}
            set { variableBasePoint = value; }
        }
        
		public BasePointStore BasePointStore
		{ get; }




        private decimal variableX;

        override
        public decimal X {
            get { return variableX;}
            set { variableX = value; }
        }
        
		public XStore XStore
		{ get; }




        private decimal variableY;

        override
        public decimal Y {
            get { return variableY;}
            set { variableY = value; }
        }
        
		public YStore YStore
		{ get; }




        private decimal variableHeight;

        override
        public decimal Height {
            get { return variableHeight;}
            set { variableHeight = value; }
        }
        
		public HeightStore HeightStore
		{ get; }




        private decimal variableAspect;

        override
        public decimal Aspect {
            get { return variableAspect;}
            set { variableAspect = value; }
        }
        
		public AspectStore AspectStore
		{ get; }




        private decimal variableAngle;

        override
        public decimal Angle {
            get { return variableAngle;}
            set { variableAngle = value; }
        }
        
		public AngleStore AngleStore
		{ get; }




		public static MutableRectangleParameter CopyOf (IBaseRectangleParameter constant) {
			return new MutableRectangleParameter (constant);
		}


		public static MutableRectangleParameter Create ()
		{
			return new MutableRectangleParameter ( RectangleParameter.Create() );
		}


		public static MutableRectangleParameter Create (MBData raw) {
			return new MutableRectangleParameter ( RectangleParameter.Create (raw) );
		}


		/// <summary>
		/// Initializes Stores. 
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.RectangleParameter"/> class.
		/// </summary>
		private MutableRectangleParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			byte BasePoint,
			decimal X,
			decimal Y,
			decimal Height,
			decimal Aspect,
			decimal Angle ) : base(raw) {
            
            var validator = RectangleValidator.CreateClosed (this);

            MarkingValidator  = MarkingValidator.CreateOfRectangle (this);
            GeometryValidator = RectangleGeometryValidator.Create (this);
            variablePower = Power;
            PowerStore = new PowerStore (
                MarkingValidator.ValidatePower,
                (     ) => this.Power,
                (value) => this.Power = value);


            variableSpeed = Speed;
            SpeedStore = new SpeedStore (
                MarkingValidator.ValidateSpeed,
                (     ) => this.Speed,
                (value) => this.Speed = value);


            variableJogging = Jogging;
            JoggingStore = new JoggingStore (
                EmptyValidator.Validate,
                (     ) => this.Jogging,
                (value) => this.Jogging = value);


            variableReverse = Reverse;
            ReverseStore = new ReverseStore (
                MarkingValidator.ValidateReverse,
                (     ) => this.Reverse,
                (value) => this.Reverse = value);


            variablePause = Pause;
            PauseStore = new PauseStore (
                MarkingValidator.ValidatePause,
                (     ) => this.Pause,
                (value) => this.Pause = value);


            variableBasePoint = BasePoint;
            BasePointStore = new BasePointStore (
                GeometryValidator.ValidateBasePoint,
                (     ) => this.BasePoint,
                (value) => this.BasePoint = value);


            variableX = X;
            XStore = new XStore (
                GeometryValidator.ValidateX,
                (     ) => this.X,
                (value) => this.X = value);


            variableY = Y;
            YStore = new YStore (
                GeometryValidator.ValidateY,
                (     ) => this.Y,
                (value) => this.Y = value);


            variableHeight = Height;
            HeightStore = new HeightStore (
                GeometryValidator.ValidateHeight,
                (     ) => this.Height,
                (value) => this.Height = value);


            variableAspect = Aspect;
            AspectStore = new AspectStore (
                GeometryValidator.ValidateAspect,
                (     ) => this.Aspect,
                (value) => this.Aspect = value);


            variableAngle = Angle;
            AngleStore = new AngleStore (
                GeometryValidator.ValidateAngle,
                (     ) => this.Angle,
                (value) => this.Angle = value);


            Initialize (validator);
		}


        partial void Initialize (ClosedValidator validator);
		

		/// <summary>
		/// Initializes a new instance by copying the existing instance.
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.RectangleParameter"/> class.
		/// </summary>
		/// <param name="copied"> the copied instance. </parm>
		private MutableRectangleParameter (IBaseRectangleParameter copied)
			: this (
            copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.BasePoint,
				copied.X,
				copied.Y,
				copied.Height,
				copied.Aspect,
				copied.Angle ) {
		}

        override
		public MBData ToSerializable () {
			return RectangleParameter.CopyOf (this).ToSerializable ();
		}

	}




	public partial class MutableTriangleParameter : IBaseTriangleParameter, IMutableParameter {

        public MarkingValidator MarkingValidator { get; }
        public TriangleGeometryValidator GeometryValidator { get; }
     

        private short variablePower;

        override
        public short Power {
            get { return variablePower;}
            set { variablePower = value; }
        }
        
		public PowerStore PowerStore
		{ get; }




        private short variableSpeed;

        override
        public short Speed {
            get { return variableSpeed;}
            set { variableSpeed = value; }
        }
        
		public SpeedStore SpeedStore
		{ get; }




        private bool variableJogging;

        override
        public bool Jogging {
            get { return variableJogging;}
            set { variableJogging = value; }
        }
        
		public JoggingStore JoggingStore
		{ get; }




        private bool variableReverse;

        override
        public bool Reverse {
            get { return variableReverse;}
            set { variableReverse = value; }
        }
        
		public ReverseStore ReverseStore
		{ get; }




        private bool variablePause;

        override
        public bool Pause {
            get { return variablePause;}
            set { variablePause = value; }
        }
        
		public PauseStore PauseStore
		{ get; }




        private byte variableBasePoint;

        override
        public byte BasePoint {
            get { return variableBasePoint;}
            set { variableBasePoint = value; }
        }
        
		public BasePointStore BasePointStore
		{ get; }




        private decimal variableX;

        override
        public decimal X {
            get { return variableX;}
            set { variableX = value; }
        }
        
		public XStore XStore
		{ get; }




        private decimal variableY;

        override
        public decimal Y {
            get { return variableY;}
            set { variableY = value; }
        }
        
		public YStore YStore
		{ get; }




        private decimal variableHornX;

        override
        public decimal HornX {
            get { return variableHornX;}
            set { variableHornX = value; }
        }
        
		public XStore HornXStore
		{ get; }




        private decimal variableHeight;

        override
        public decimal Height {
            get { return variableHeight;}
            set { variableHeight = value; }
        }
        
		public HeightStore HeightStore
		{ get; }




        private decimal variableAspect;

        override
        public decimal Aspect {
            get { return variableAspect;}
            set { variableAspect = value; }
        }
        
		public AspectStore AspectStore
		{ get; }




        private decimal variableAngle;

        override
        public decimal Angle {
            get { return variableAngle;}
            set { variableAngle = value; }
        }
        
		public AngleStore AngleStore
		{ get; }




		public static MutableTriangleParameter CopyOf (IBaseTriangleParameter constant) {
			return new MutableTriangleParameter (constant);
		}


		public static MutableTriangleParameter Create ()
		{
			return new MutableTriangleParameter ( TriangleParameter.Create() );
		}


		public static MutableTriangleParameter Create (MBData raw) {
			return new MutableTriangleParameter ( TriangleParameter.Create (raw) );
		}


		/// <summary>
		/// Initializes Stores. 
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.TriangleParameter"/> class.
		/// </summary>
		private MutableTriangleParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			byte BasePoint,
			decimal X,
			decimal Y,
			decimal HornX,
			decimal Height,
			decimal Aspect,
			decimal Angle ) : base(raw) {
            
            var validator = TriangleValidator.CreateClosed (this);

            MarkingValidator  = MarkingValidator.CreateOfTriangle (this);
            GeometryValidator = TriangleGeometryValidator.Create (this);
            variablePower = Power;
            PowerStore = new PowerStore (
                MarkingValidator.ValidatePower,
                (     ) => this.Power,
                (value) => this.Power = value);


            variableSpeed = Speed;
            SpeedStore = new SpeedStore (
                MarkingValidator.ValidateSpeed,
                (     ) => this.Speed,
                (value) => this.Speed = value);


            variableJogging = Jogging;
            JoggingStore = new JoggingStore (
                EmptyValidator.Validate,
                (     ) => this.Jogging,
                (value) => this.Jogging = value);


            variableReverse = Reverse;
            ReverseStore = new ReverseStore (
                MarkingValidator.ValidateReverse,
                (     ) => this.Reverse,
                (value) => this.Reverse = value);


            variablePause = Pause;
            PauseStore = new PauseStore (
                MarkingValidator.ValidatePause,
                (     ) => this.Pause,
                (value) => this.Pause = value);


            variableBasePoint = BasePoint;
            BasePointStore = new BasePointStore (
                GeometryValidator.ValidateBasePoint,
                (     ) => this.BasePoint,
                (value) => this.BasePoint = value);


            variableX = X;
            XStore = new XStore (
                GeometryValidator.ValidateX,
                (     ) => this.X,
                (value) => this.X = value);


            variableY = Y;
            YStore = new YStore (
                GeometryValidator.ValidateY,
                (     ) => this.Y,
                (value) => this.Y = value);


            variableHornX = HornX;
            HornXStore = new XStore (
                GeometryValidator.ValidateHornX,
                (     ) => this.HornX,
                (value) => this.HornX = value);


            variableHeight = Height;
            HeightStore = new HeightStore (
                GeometryValidator.ValidateHeight,
                (     ) => this.Height,
                (value) => this.Height = value);


            variableAspect = Aspect;
            AspectStore = new AspectStore (
                GeometryValidator.ValidateAspect,
                (     ) => this.Aspect,
                (value) => this.Aspect = value);


            variableAngle = Angle;
            AngleStore = new AngleStore (
                GeometryValidator.ValidateAngle,
                (     ) => this.Angle,
                (value) => this.Angle = value);


            Initialize (validator);
		}


        partial void Initialize (ClosedValidator validator);
		

		/// <summary>
		/// Initializes a new instance by copying the existing instance.
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.TriangleParameter"/> class.
		/// </summary>
		/// <param name="copied"> the copied instance. </parm>
		private MutableTriangleParameter (IBaseTriangleParameter copied)
			: this (
            copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.BasePoint,
				copied.X,
				copied.Y,
				copied.HornX,
				copied.Height,
				copied.Aspect,
				copied.Angle ) {
		}

        override
		public MBData ToSerializable () {
			return TriangleParameter.CopyOf (this).ToSerializable ();
		}

	}




	public partial class MutableCircleParameter : IBaseCircleParameter, IMutableParameter {

        public MarkingValidator MarkingValidator { get; }
        public CircleGeometryValidator GeometryValidator { get; }
     

        private short variablePower;

        override
        public short Power {
            get { return variablePower;}
            set { variablePower = value; }
        }
        
		public PowerStore PowerStore
		{ get; }




        private short variableSpeed;

        override
        public short Speed {
            get { return variableSpeed;}
            set { variableSpeed = value; }
        }
        
		public SpeedStore SpeedStore
		{ get; }




        private bool variableJogging;

        override
        public bool Jogging {
            get { return variableJogging;}
            set { variableJogging = value; }
        }
        
		public JoggingStore JoggingStore
		{ get; }




        private bool variableReverse;

        override
        public bool Reverse {
            get { return variableReverse;}
            set { variableReverse = value; }
        }
        
		public ReverseStore ReverseStore
		{ get; }




        private bool variablePause;

        override
        public bool Pause {
            get { return variablePause;}
            set { variablePause = value; }
        }
        
		public PauseStore PauseStore
		{ get; }




        private byte variableBasePoint;

        override
        public byte BasePoint {
            get { return variableBasePoint;}
            set { variableBasePoint = value; }
        }
        
		public BasePointStore BasePointStore
		{ get; }




        private decimal variableX;

        override
        public decimal X {
            get { return variableX;}
            set { variableX = value; }
        }
        
		public XStore XStore
		{ get; }




        private decimal variableY;

        override
        public decimal Y {
            get { return variableY;}
            set { variableY = value; }
        }
        
		public YStore YStore
		{ get; }




        private decimal variableRadius;

        override
        public decimal Radius {
            get { return variableRadius;}
            set { variableRadius = value; }
        }
        
		public RadiusStore RadiusStore
		{ get; }




		public static MutableCircleParameter CopyOf (IBaseCircleParameter constant) {
			return new MutableCircleParameter (constant);
		}


		public static MutableCircleParameter Create ()
		{
			return new MutableCircleParameter ( CircleParameter.Create() );
		}


		public static MutableCircleParameter Create (MBData raw) {
			return new MutableCircleParameter ( CircleParameter.Create (raw) );
		}


		/// <summary>
		/// Initializes Stores. 
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.CircleParameter"/> class.
		/// </summary>
		private MutableCircleParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			byte BasePoint,
			decimal X,
			decimal Y,
			decimal Radius ) : base(raw) {
            
            var validator = CircleValidator.CreateClosed (this);

            MarkingValidator  = MarkingValidator.CreateOfCircle (this);
            GeometryValidator = CircleGeometryValidator.Create (this);
            variablePower = Power;
            PowerStore = new PowerStore (
                MarkingValidator.ValidatePower,
                (     ) => this.Power,
                (value) => this.Power = value);


            variableSpeed = Speed;
            SpeedStore = new SpeedStore (
                MarkingValidator.ValidateSpeed,
                (     ) => this.Speed,
                (value) => this.Speed = value);


            variableJogging = Jogging;
            JoggingStore = new JoggingStore (
                EmptyValidator.Validate,
                (     ) => this.Jogging,
                (value) => this.Jogging = value);


            variableReverse = Reverse;
            ReverseStore = new ReverseStore (
                MarkingValidator.ValidateReverse,
                (     ) => this.Reverse,
                (value) => this.Reverse = value);


            variablePause = Pause;
            PauseStore = new PauseStore (
                MarkingValidator.ValidatePause,
                (     ) => this.Pause,
                (value) => this.Pause = value);


            variableBasePoint = BasePoint;
            BasePointStore = new BasePointStore (
                GeometryValidator.ValidateBasePoint,
                (     ) => this.BasePoint,
                (value) => this.BasePoint = value);


            variableX = X;
            XStore = new XStore (
                GeometryValidator.ValidateX,
                (     ) => this.X,
                (value) => this.X = value);


            variableY = Y;
            YStore = new YStore (
                GeometryValidator.ValidateY,
                (     ) => this.Y,
                (value) => this.Y = value);


            variableRadius = Radius;
            RadiusStore = new RadiusStore (
                GeometryValidator.ValidateRadius,
                (     ) => this.Radius,
                (value) => this.Radius = value);


            Initialize (validator);
		}


        partial void Initialize (ClosedValidator validator);
		

		/// <summary>
		/// Initializes a new instance by copying the existing instance.
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.CircleParameter"/> class.
		/// </summary>
		/// <param name="copied"> the copied instance. </parm>
		private MutableCircleParameter (IBaseCircleParameter copied)
			: this (
            copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.BasePoint,
				copied.X,
				copied.Y,
				copied.Radius ) {
		}

        override
		public MBData ToSerializable () {
			return CircleParameter.CopyOf (this).ToSerializable ();
		}

	}




	public partial class MutableLineParameter : IBaseLineParameter, IMutableParameter {

        public MarkingValidator MarkingValidator { get; }
        public LineGeometryValidator GeometryValidator { get; }
     

        private short variablePower;

        override
        public short Power {
            get { return variablePower;}
            set { variablePower = value; }
        }
        
		public PowerStore PowerStore
		{ get; }




        private short variableSpeed;

        override
        public short Speed {
            get { return variableSpeed;}
            set { variableSpeed = value; }
        }
        
		public SpeedStore SpeedStore
		{ get; }




        private bool variableJogging;

        override
        public bool Jogging {
            get { return variableJogging;}
            set { variableJogging = value; }
        }
        
		public JoggingStore JoggingStore
		{ get; }




        private bool variableReverse;

        override
        public bool Reverse {
            get { return variableReverse;}
            set { variableReverse = value; }
        }
        
		public ReverseStore ReverseStore
		{ get; }




        private bool variablePause;

        override
        public bool Pause {
            get { return variablePause;}
            set { variablePause = value; }
        }
        
		public PauseStore PauseStore
		{ get; }




        private decimal variableStartX;

        override
        public decimal StartX {
            get { return variableStartX;}
            set { variableStartX = value; }
        }
        
		public XStore StartXStore
		{ get; }




        private decimal variableStartY;

        override
        public decimal StartY {
            get { return variableStartY;}
            set { variableStartY = value; }
        }
        
		public YStore StartYStore
		{ get; }




        private decimal variableCenterX;

        override
        public decimal CenterX {
            get { return variableCenterX;}
            set { variableCenterX = value; }
        }
        
		public XStore CenterXStore
		{ get; }




        private decimal variableCenterY;

        override
        public decimal CenterY {
            get { return variableCenterY;}
            set { variableCenterY = value; }
        }
        
		public YStore CenterYStore
		{ get; }




        private decimal variableEndX;

        override
        public decimal EndX {
            get { return variableEndX;}
            set { variableEndX = value; }
        }
        
		public XStore EndXStore
		{ get; }




        private decimal variableEndY;

        override
        public decimal EndY {
            get { return variableEndY;}
            set { variableEndY = value; }
        }
        
		public YStore EndYStore
		{ get; }




        private bool variableIsBezierCurve;

        override
        public bool IsBezierCurve {
            get { return variableIsBezierCurve;}
            set { variableIsBezierCurve = value; }
        }
        
		public IsBezierCurveStore IsBezierCurveStore
		{ get; }




		public static MutableLineParameter CopyOf (IBaseLineParameter constant) {
			return new MutableLineParameter (constant);
		}


		public static MutableLineParameter Create ()
		{
			return new MutableLineParameter ( LineParameter.Create() );
		}


		public static MutableLineParameter Create (MBData raw) {
			return new MutableLineParameter ( LineParameter.Create (raw) );
		}


		/// <summary>
		/// Initializes Stores. 
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.LineParameter"/> class.
		/// </summary>
		private MutableLineParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			decimal StartX,
			decimal StartY,
			decimal CenterX,
			decimal CenterY,
			decimal EndX,
			decimal EndY,
			bool IsBezierCurve ) : base(raw) {
            
            var validator = LineValidator.CreateClosed (this);

            MarkingValidator  = MarkingValidator.CreateOfLine (this);
            GeometryValidator = LineGeometryValidator.Create (this);
            variablePower = Power;
            PowerStore = new PowerStore (
                MarkingValidator.ValidatePower,
                (     ) => this.Power,
                (value) => this.Power = value);


            variableSpeed = Speed;
            SpeedStore = new SpeedStore (
                MarkingValidator.ValidateSpeed,
                (     ) => this.Speed,
                (value) => this.Speed = value);


            variableJogging = Jogging;
            JoggingStore = new JoggingStore (
                EmptyValidator.Validate,
                (     ) => this.Jogging,
                (value) => this.Jogging = value);


            variableReverse = Reverse;
            ReverseStore = new ReverseStore (
                MarkingValidator.ValidateReverse,
                (     ) => this.Reverse,
                (value) => this.Reverse = value);


            variablePause = Pause;
            PauseStore = new PauseStore (
                MarkingValidator.ValidatePause,
                (     ) => this.Pause,
                (value) => this.Pause = value);


            variableStartX = StartX;
            StartXStore = new XStore (
                GeometryValidator.ValidateStartX,
                (     ) => this.StartX,
                (value) => this.StartX = value);


            variableStartY = StartY;
            StartYStore = new YStore (
                GeometryValidator.ValidateStartY,
                (     ) => this.StartY,
                (value) => this.StartY = value);


            variableCenterX = CenterX;
            CenterXStore = new XStore (
                GeometryValidator.ValidateCenterX,
                (     ) => this.CenterX,
                (value) => this.CenterX = value);


            variableCenterY = CenterY;
            CenterYStore = new YStore (
                GeometryValidator.ValidateCenterY,
                (     ) => this.CenterY,
                (value) => this.CenterY = value);


            variableEndX = EndX;
            EndXStore = new XStore (
                GeometryValidator.ValidateEndX,
                (     ) => this.EndX,
                (value) => this.EndX = value);


            variableEndY = EndY;
            EndYStore = new YStore (
                GeometryValidator.ValidateEndY,
                (     ) => this.EndY,
                (value) => this.EndY = value);


            variableIsBezierCurve = IsBezierCurve;
            IsBezierCurveStore = new IsBezierCurveStore (
                GeometryValidator.ValidateIsBezierCurve,
                (     ) => this.IsBezierCurve,
                (value) => this.IsBezierCurve = value);


            Initialize (validator);
		}


        partial void Initialize (ClosedValidator validator);
		

		/// <summary>
		/// Initializes a new instance by copying the existing instance.
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.LineParameter"/> class.
		/// </summary>
		/// <param name="copied"> the copied instance. </parm>
		private MutableLineParameter (IBaseLineParameter copied)
			: this (
            copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.StartX,
				copied.StartY,
				copied.CenterX,
				copied.CenterY,
				copied.EndX,
				copied.EndY,
				copied.IsBezierCurve ) {
		}

        override
		public MBData ToSerializable () {
			return LineParameter.CopyOf (this).ToSerializable ();
		}

	}




	public partial class MutableBypassParameter : IBaseBypassParameter, IMutableParameter {

        public MarkingValidator MarkingValidator { get; }
        public BypassGeometryValidator GeometryValidator { get; }
     

        private short variablePower;

        override
        public short Power {
            get { return variablePower;}
            set { variablePower = value; }
        }
        
		public PowerStore PowerStore
		{ get; }




        private short variableSpeed;

        override
        public short Speed {
            get { return variableSpeed;}
            set { variableSpeed = value; }
        }
        
		public SpeedStore SpeedStore
		{ get; }




        private bool variableJogging;

        override
        public bool Jogging {
            get { return variableJogging;}
            set { variableJogging = value; }
        }
        
		public JoggingStore JoggingStore
		{ get; }




        private bool variableReverse;

        override
        public bool Reverse {
            get { return variableReverse;}
            set { variableReverse = value; }
        }
        
		public ReverseStore ReverseStore
		{ get; }




        private bool variablePause;

        override
        public bool Pause {
            get { return variablePause;}
            set { variablePause = value; }
        }
        
		public PauseStore PauseStore
		{ get; }




        private decimal variableX;

        override
        public decimal X {
            get { return variableX;}
            set { variableX = value; }
        }
        
		public XStore XStore
		{ get; }




        private decimal variableY;

        override
        public decimal Y {
            get { return variableY;}
            set { variableY = value; }
        }
        
		public YStore YStore
		{ get; }




		public static MutableBypassParameter CopyOf (IBaseBypassParameter constant) {
			return new MutableBypassParameter (constant);
		}


		public static MutableBypassParameter Create ()
		{
			return new MutableBypassParameter ( BypassParameter.Create() );
		}


		public static MutableBypassParameter Create (MBData raw) {
			return new MutableBypassParameter ( BypassParameter.Create (raw) );
		}


		/// <summary>
		/// Initializes Stores. 
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.BypassParameter"/> class.
		/// </summary>
		private MutableBypassParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			decimal X,
			decimal Y ) : base(raw) {
            
            var validator = BypassValidator.CreateClosed (this);

            MarkingValidator  = MarkingValidator.CreateOfBypass (this);
            GeometryValidator = BypassGeometryValidator.Create (this);
            variablePower = Power;
            PowerStore = new PowerStore (
                MarkingValidator.ValidatePower,
                (     ) => this.Power,
                (value) => this.Power = value);


            variableSpeed = Speed;
            SpeedStore = new SpeedStore (
                MarkingValidator.ValidateSpeed,
                (     ) => this.Speed,
                (value) => this.Speed = value);


            variableJogging = Jogging;
            JoggingStore = new JoggingStore (
                EmptyValidator.Validate,
                (     ) => this.Jogging,
                (value) => this.Jogging = value);


            variableReverse = Reverse;
            ReverseStore = new ReverseStore (
                MarkingValidator.ValidateReverse,
                (     ) => this.Reverse,
                (value) => this.Reverse = value);


            variablePause = Pause;
            PauseStore = new PauseStore (
                MarkingValidator.ValidatePause,
                (     ) => this.Pause,
                (value) => this.Pause = value);


            variableX = X;
            XStore = new XStore (
                GeometryValidator.ValidateX,
                (     ) => this.X,
                (value) => this.X = value);


            variableY = Y;
            YStore = new YStore (
                GeometryValidator.ValidateY,
                (     ) => this.Y,
                (value) => this.Y = value);


            Initialize (validator);
		}


        partial void Initialize (ClosedValidator validator);
		

		/// <summary>
		/// Initializes a new instance by copying the existing instance.
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.BypassParameter"/> class.
		/// </summary>
		/// <param name="copied"> the copied instance. </parm>
		private MutableBypassParameter (IBaseBypassParameter copied)
			: this (
            copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.X,
				copied.Y ) {
		}

        override
		public MBData ToSerializable () {
			return BypassParameter.CopyOf (this).ToSerializable ();
		}

	}




	public partial class MutableEllipseParameter : IBaseEllipseParameter, IMutableParameter {

        public MarkingValidator MarkingValidator { get; }
        public EllipseGeometryValidator GeometryValidator { get; }
     

        private short variablePower;

        override
        public short Power {
            get { return variablePower;}
            set { variablePower = value; }
        }
        
		public PowerStore PowerStore
		{ get; }




        private short variableSpeed;

        override
        public short Speed {
            get { return variableSpeed;}
            set { variableSpeed = value; }
        }
        
		public SpeedStore SpeedStore
		{ get; }




        private bool variableJogging;

        override
        public bool Jogging {
            get { return variableJogging;}
            set { variableJogging = value; }
        }
        
		public JoggingStore JoggingStore
		{ get; }




        private bool variableReverse;

        override
        public bool Reverse {
            get { return variableReverse;}
            set { variableReverse = value; }
        }
        
		public ReverseStore ReverseStore
		{ get; }




        private bool variablePause;

        override
        public bool Pause {
            get { return variablePause;}
            set { variablePause = value; }
        }
        
		public PauseStore PauseStore
		{ get; }




        private byte variableBasePoint;

        override
        public byte BasePoint {
            get { return variableBasePoint;}
            set { variableBasePoint = value; }
        }
        
		public BasePointStore BasePointStore
		{ get; }




        private decimal variableX;

        override
        public decimal X {
            get { return variableX;}
            set { variableX = value; }
        }
        
		public XStore XStore
		{ get; }




        private decimal variableY;

        override
        public decimal Y {
            get { return variableY;}
            set { variableY = value; }
        }
        
		public YStore YStore
		{ get; }




        private decimal variableHeight;

        override
        public decimal Height {
            get { return variableHeight;}
            set { variableHeight = value; }
        }
        
		public HeightStore HeightStore
		{ get; }




        private decimal variableAspect;

        override
        public decimal Aspect {
            get { return variableAspect;}
            set { variableAspect = value; }
        }
        
		public AspectStore AspectStore
		{ get; }




        private decimal variableAngle;

        override
        public decimal Angle {
            get { return variableAngle;}
            set { variableAngle = value; }
        }
        
		public AngleStore AngleStore
		{ get; }




		public static MutableEllipseParameter CopyOf (IBaseEllipseParameter constant) {
			return new MutableEllipseParameter (constant);
		}


		public static MutableEllipseParameter Create ()
		{
			return new MutableEllipseParameter ( EllipseParameter.Create() );
		}


		public static MutableEllipseParameter Create (MBData raw) {
			return new MutableEllipseParameter ( EllipseParameter.Create (raw) );
		}


		/// <summary>
		/// Initializes Stores. 
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.EllipseParameter"/> class.
		/// </summary>
		private MutableEllipseParameter (
            MBData raw,
			short Power,
			short Speed,
			bool Jogging,
			bool Reverse,
			bool Pause,
			byte BasePoint,
			decimal X,
			decimal Y,
			decimal Height,
			decimal Aspect,
			decimal Angle ) : base(raw) {
            
            var validator = EllipseValidator.CreateClosed (this);

            MarkingValidator  = MarkingValidator.CreateOfEllipse (this);
            GeometryValidator = EllipseGeometryValidator.Create (this);
            variablePower = Power;
            PowerStore = new PowerStore (
                MarkingValidator.ValidatePower,
                (     ) => this.Power,
                (value) => this.Power = value);


            variableSpeed = Speed;
            SpeedStore = new SpeedStore (
                MarkingValidator.ValidateSpeed,
                (     ) => this.Speed,
                (value) => this.Speed = value);


            variableJogging = Jogging;
            JoggingStore = new JoggingStore (
                EmptyValidator.Validate,
                (     ) => this.Jogging,
                (value) => this.Jogging = value);


            variableReverse = Reverse;
            ReverseStore = new ReverseStore (
                MarkingValidator.ValidateReverse,
                (     ) => this.Reverse,
                (value) => this.Reverse = value);


            variablePause = Pause;
            PauseStore = new PauseStore (
                MarkingValidator.ValidatePause,
                (     ) => this.Pause,
                (value) => this.Pause = value);


            variableBasePoint = BasePoint;
            BasePointStore = new BasePointStore (
                GeometryValidator.ValidateBasePoint,
                (     ) => this.BasePoint,
                (value) => this.BasePoint = value);


            variableX = X;
            XStore = new XStore (
                GeometryValidator.ValidateX,
                (     ) => this.X,
                (value) => this.X = value);


            variableY = Y;
            YStore = new YStore (
                GeometryValidator.ValidateY,
                (     ) => this.Y,
                (value) => this.Y = value);


            variableHeight = Height;
            HeightStore = new HeightStore (
                GeometryValidator.ValidateHeight,
                (     ) => this.Height,
                (value) => this.Height = value);


            variableAspect = Aspect;
            AspectStore = new AspectStore (
                GeometryValidator.ValidateAspect,
                (     ) => this.Aspect,
                (value) => this.Aspect = value);


            variableAngle = Angle;
            AngleStore = new AngleStore (
                GeometryValidator.ValidateAngle,
                (     ) => this.Angle,
                (value) => this.Angle = value);


            Initialize (validator);
		}


        partial void Initialize (ClosedValidator validator);
		

		/// <summary>
		/// Initializes a new instance by copying the existing instance.
		/// <see cref="TokyoChokoku.MarkinBox.Sketchbook.Parameters.EllipseParameter"/> class.
		/// </summary>
		/// <param name="copied"> the copied instance. </parm>
		private MutableEllipseParameter (IBaseEllipseParameter copied)
			: this (
            copied.raw,
				copied.Power,
				copied.Speed,
				copied.Jogging,
				copied.Reverse,
				copied.Pause,
				copied.BasePoint,
				copied.X,
				copied.Y,
				copied.Height,
				copied.Aspect,
				copied.Angle ) {
		}

        override
		public MBData ToSerializable () {
			return EllipseParameter.CopyOf (this).ToSerializable ();
		}

	}




}