﻿// 
// This code is generated by "TemplateCommands.tt"
// Not allowed to modify this code because your changes are deleted when in regeration.
//


namespace TokyoChokoku.MarkinBox.Sketchbook.Communication {

    using System;
    using System.Linq;
	using System.Collections.Immutable;
	using System.Collections.Generic;
    using System.Threading.Tasks;

    public partial class CommandExecuter
    {
        private static async Task<IRawResponse> Read(List<ICommand> commands){
            var res = new List<byte> ();
            foreach (var command in commands) {
                res.AddRange(
                    ReadingResponseExtracter.Extract (
                        await CommandTaskManager.Instance.StartCommand (command)
                    )
                );
            }
            return new RawResponseContainer (res.Count > 0, res);
        }
        public static async Task<ResponseShort> ReadAlert()
        {
            Log.Debug("CommandExecuter", "ReadAlert");
            var res = new ResponseShort(await Read(
                new ReadingCommandBuilder(
                    Addresses.Alert,
                    1
                ).Build(
                    timeOut: 5000,
                    numOfRetry: 3
                )
            ));
                        return res;
        }
        public static async Task<ResponseChars> ReadCalendarDayReplacements()
        {
            Log.Debug("CommandExecuter", "ReadCalendarDayReplacements");
            var res = new ResponseChars(await Read(
                new ReadingCommandBuilder(
                    Addresses.CalendarDayReplacements,
                    Calendar.Consts.CharsOfDayReplacements
                ).Build(
                    timeOut: 5000,
                    numOfRetry: 3
                )
            ));
                        return res;
        }
        public static async Task<ResponseChars> ReadCalendarMonthReplacements()
        {
            Log.Debug("CommandExecuter", "ReadCalendarMonthReplacements");
            var res = new ResponseChars(await Read(
                new ReadingCommandBuilder(
                    Addresses.CalendarMonthReplacements,
                    Calendar.Consts.CharsOfMonthReplacements
                ).Build(
                    timeOut: 5000,
                    numOfRetry: 3
                )
            ));
                        return res;
        }
        public static async Task<ResponseChars> ReadCalendarYearReplacements()
        {
            Log.Debug("CommandExecuter", "ReadCalendarYearReplacements");
            var res = new ResponseChars(await Read(
                new ReadingCommandBuilder(
                    Addresses.CalendarYearReplacements,
                    Calendar.Consts.CharsOfYearReplacements
                ).Build(
                    timeOut: 5000,
                    numOfRetry: 3
                )
            ));
                        return res;
        }
        public static async Task<ReponseMBCalendarShiftData> ReadCalendarShiftReplacements()
        {
            Log.Debug("CommandExecuter", "ReadCalendarShiftReplacements");
            var res = new ReponseMBCalendarShiftData(await Read(
                new ReadingCommandBuilder(
                    Addresses.CalendarShiftReplacements,
                    Calendar.Consts.NumOfShift * Calendar.Consts.WordsOfShift
                ).Build(
                    timeOut: 5000,
                    numOfRetry: 3
                )
            ));
                        return res;
        }
        public static async Task<ReponseMBSerialSettingsData> ReadSerialSettings()
        {
            Log.Debug("CommandExecuter", "ReadSerialSettings");
            var res = new ReponseMBSerialSettingsData(await Read(
                new ReadingCommandBuilder(
                    Addresses.SerialSettings,
                    Serial.Consts.NumOfSerial * Serial.Consts.WordsOfSerialSetting
                ).Build(
                    timeOut: 5000,
                    numOfRetry: 3
                )
            ));
                        return res;
        }
        public static async Task<ReponseMBSerialCountersData> ReadSerialCounters()
        {
            Log.Debug("CommandExecuter", "ReadSerialCounters");
            var res = new ReponseMBSerialCountersData(await Read(
                new ReadingCommandBuilder(
                    Addresses.SerialCounters,
                    Serial.Consts.NumOfSerial * Serial.Consts.WordsOfSerialCounter
                ).Build(
                    timeOut: 5000,
                    numOfRetry: 3
                )
            ));
                        return res;
        }
        public static async Task<ResponseRaw> ReadCommandSurvival(WritingCommandBuilder builder)
        {
            Log.Debug("CommandExecuter", "ReadCommandSurvival");
            var res = new ResponseRaw(await Read(
                new ReadingCommandBuilder(
                    new MemoryAddress(builder.DataType, builder.Addr),
                    1
                ).Build(
                    timeOut: 5000,
                    numOfRetry: 3
                )
            ));
                        return res;
        }
        public static async Task<ResponseShort> ReadNumOfFieldInCurrentFile()
        {
            Log.Debug("CommandExecuter", "ReadNumOfFieldInCurrentFile");
            var res = new ResponseShort(await Read(
                new ReadingCommandBuilder(
                    Addresses.NumOfFieldOfCurrentFile,
                    1
                ).Build(
                    timeOut: 5000,
                    numOfRetry: 3
                )
            ));
                        return res;
        }
        public static async Task<ResponseMBData> ReadFieldOfCurrentFile(int indexOfField)
        {
            Log.Debug("CommandExecuter", "ReadFieldOfCurrentFile");
            var res = new ResponseMBData(await Read(
                new ReadingCommandBuilder(
                    Addresses.CurrentFile.Increment(indexOfField * MBFile.Consts.NumofFieldWords),
                    (short)MBFile.Consts.NumofFieldWords
                ).Build(
                    timeOut: 5000,
                    numOfRetry: 3
                )
            ));
                        return res;
        }
        public static async Task<ResponseShort> ReadPermanentMarkingFileNo()
        {
            Log.Debug("CommandExecuter", "ReadPermanentMarkingFileNo");
            var res = new ResponseShort(await Read(
                new ReadingCommandBuilder(
                    Addresses.PermanentMarkingFileNo,
                    1
                ).Build(
                    timeOut: 5000,
                    numOfRetry: 3
                )
            ));
                        return res;
        }
        public static async Task<ResponseShort> ReadFlagFileLoadedFromSdCard()
        {
            Log.Debug("CommandExecuter", "ReadFlagFileLoadedFromSdCard");
            var res = new ResponseShort(await Read(
                new ReadingCommandBuilder(
                    Addresses.FilesDidLoadFromSdCard,
                    1
                ).Build(
                    timeOut: 5000,
                    numOfRetry: 3
                )
            ));
                        return res;
        }
        public static async Task<ResponseShort> ReadRemoteFileMap(int fileIndex)
        {
            Log.Debug("CommandExecuter", "ReadRemoteFileMap");
            var res = new ResponseShort(await Read(
                new ReadingCommandBuilder(
                    Addresses.RemoteFileMaps.Increment(fileIndex),
                    (short)1
                ).Build(
                    timeOut: 5000,
                    numOfRetry: 3
                )
            ));
                        return res;
        }
        public static async Task<ResponseShorts> ReadRemoteFileMaps()
        {
            Log.Debug("CommandExecuter", "ReadRemoteFileMaps");
            var res = new ResponseShorts(await Read(
                new ReadingCommandBuilder(
                    Addresses.RemoteFileMaps,
                    (short)Sizes.NumOfRemoteFile
                ).Build(
                    timeOut: 5000,
                    numOfRetry: 3
                )
            ));
                        return res;
        }
        public static async Task<ResponseRemoteFileNames> ReadRemoteFileNames()
        {
            Log.Debug("CommandExecuter", "ReadRemoteFileNames");
            var res = new ResponseRemoteFileNames(await Read(
                new ReadingCommandBuilder(
                    Addresses.RemoteFileNames,
                    (short)(Sizes.NumOfRemoteFile * Sizes.BytesOfRemoteFileName)
                ).Build(
                    timeOut: 5000,
                    numOfRetry: 3
                )
            ));
                        return res;
        }
        public static async Task<ResponseShort> ReadMachineModelNo()
        {
            Log.Debug("CommandExecuter", "ReadMachineModelNo");
            var res = new ResponseShort(await Read(
                new ReadingCommandBuilder(
                    Addresses.MachineModelNo,
                    1
                ).Build(
                    timeOut: 5000,
                    numOfRetry: 3
                )
            ));
                        return res;
        }
        public static async Task<ResponseShort> ReadMarkingHeadPinIsAtOrigin()
        {
            Log.Debug("CommandExecuter", "ReadMarkingHeadPinIsAtOrigin");
            var res = new ResponseShort(await Read(
                new ReadingCommandBuilder(
                    Addresses.MarkingHeadPinIsAtOrigin,
                    1
                ).Build(
                    timeOut: 5000,
                    numOfRetry: 3
                )
            ));
                        return res;
        }
        public static async Task<ResponseShort> ReadMarkingStatus()
        {
            Log.Debug("CommandExecuter", "ReadMarkingStatus");
            var res = new ResponseShort(await Read(
                new ReadingCommandBuilder(
                    Addresses.MarkingStatus,
                    1
                ).Build(
                    timeOut: 5000,
                    numOfRetry: 3
                )
            ));
                        return res;
        }
        public static async Task<ResponseShort> ReadMarkingPausingStatus()
        {
            Log.Debug("CommandExecuter", "ReadMarkingPausingStatus");
            var res = new ResponseShort(await Read(
                new ReadingCommandBuilder(
                    Addresses.MarkingPausingStatus,
                    1
                ).Build(
                    timeOut: 5000,
                    numOfRetry: 3
                )
            ));
                        return res;
        }
        public static async Task<ResponseShort> ReadMarkingResult()
        {
            Log.Debug("CommandExecuter", "ReadMarkingResult");
            var res = new ResponseShort(await Read(
                new ReadingCommandBuilder(
                    Addresses.MarkingResult,
                    1
                ).Build(
                    timeOut: 5000,
                    numOfRetry: 3
                )
            ));
                        return res;
        }
        public static async Task<ResponseShort> ReadBSDEnabled()
        {
            Log.Debug("CommandExecuter", "ReadBSDEnabled");
            var res = new ResponseShort(await Read(
                new ReadingCommandBuilder(
                    Addresses.BSDEnabled,
                    1
                ).Build(
                    timeOut: 5000,
                    numOfRetry: 3
                )
            ));
                        return res;
        }
        public static async Task<ResponseShort> ReadExclusion()
        {
            Log.Debug("CommandExecuter", "ReadExclusion");
            var res = new ResponseShort(await Read(
                new ReadingCommandBuilder(
                    Addresses.Exclusion,
                    1
                ).Build(
                    timeOut: 5000,
                    numOfRetry: 3
                )
            ));
                        return res;
        }

        private static async Task<IRawResponse> Write(ICommand command){
            var res = await CommandTaskManager.Instance.StartCommand (command);
            return new RawResponseContainer(
              WritingResponseExtracter.IsOk (res),
              WritingResponseExtracter.Extract (res)
            );
        }
        public static async Task<ResponseRaw> LoadFieldFromSdCard()
        {
            Log.Debug("CommandExecuter", "LoadFieldFromSdCard");
            var builder = new WritingCommandBuilder(
                Addresses.CommonOperation,
                (byte)151
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                        await Task.Delay(100);
                                    await WaitToFinishWriting(builder);
                        return res;
        }

        public static async Task<ResponseRaw> LoadFileNamesFromSdCard()
        {
            Log.Debug("CommandExecuter", "LoadFileNamesFromSdCard");
            var builder = new WritingCommandBuilder(
                Addresses.CommonOperation,
                (byte)19
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                        await Task.Delay(150);
                                    await WaitToFinishWriting(builder);
                        return res;
        }

        public static async Task<ResponseRaw> LoadFileMapFromSdCard()
        {
            Log.Debug("CommandExecuter", "LoadFileMapFromSdCard");
            var builder = new WritingCommandBuilder(
                Addresses.CommonOperation,
                (byte)13
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                        await Task.Delay(150);
                                    await WaitToFinishWriting(builder);
                        return res;
        }

        public static async Task<ResponseRaw> LoadFileMapBlockFromSdCard()
        {
            Log.Debug("CommandExecuter", "LoadFileMapBlockFromSdCard");
            var builder = new WritingCommandBuilder(
                Addresses.CommonOperation,
                (byte)2
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                        await Task.Delay(100);
                                    await WaitToFinishWriting(builder);
                        return res;
        }

        public static async Task<ResponseRaw> LoadValueFromSdCard()
        {
            Log.Debug("CommandExecuter", "LoadValueFromSdCard");
            var builder = new WritingCommandBuilder(
                Addresses.CommonOperation,
                (byte)3
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                        await Task.Delay(150);
                                    await WaitToFinishWriting(builder);
                        return res;
        }

        public static async Task<ResponseRaw> MoveMarkingHeadToOrigin()
        {
            Log.Debug("CommandExecuter", "MoveMarkingHeadToOrigin");
            var builder = new WritingCommandBuilder(
                Addresses.MovingHeadToOrigin,
                new byte[]{0x00, 0x14}
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SaveFileNameToSdCard()
        {
            Log.Debug("CommandExecuter", "SaveFileNameToSdCard");
            var builder = new WritingCommandBuilder(
                Addresses.CommonOperation,
                (byte)18
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                        await Task.Delay(500);
                                    await WaitToFinishWriting(builder);
                        return res;
        }

        public static async Task<ResponseRaw> SetFileMapToWorkSpace(int fileIndex, int numOfField)
        {
            Log.Debug("CommandExecuter", "SetFileMapToWorkSpace");
            var builder = new WritingCommandBuilder(
                Addresses.FileMapWorkSpace.Increment(fileIndex % Sizes.SdCard.FileMapBlock.NumOfMapInBlock),
                (byte)numOfField
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SaveFileMapBlockToSdCard()
        {
            Log.Debug("CommandExecuter", "SaveFileMapBlockToSdCard");
            var builder = new WritingCommandBuilder(
                Addresses.CommonOperation,
                (byte)4
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                        await Task.Delay(100);
                                    await WaitToFinishWriting(builder);
                        return res;
        }

        public static async Task<ResponseRaw> SaveBasiceSettingsToSdCard()
        {
            Log.Debug("CommandExecuter", "SaveBasiceSettingsToSdCard");
            var builder = new WritingCommandBuilder(
                Addresses.CommonOperation,
                (byte)10
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                        await Task.Delay(100);
                                    await WaitToFinishWriting(builder);
                        return res;
        }

        public static async Task<ResponseRaw> SetSerialSettingsFileNo(short no)
        {
            Log.Debug("CommandExecuter", "SetSerialSettingsFileNo");
            var builder = new WritingCommandBuilder(
                Addresses.SerialSettingsFileNo,
                BigEndianBitConverter.GetBytes(no)
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> LoadSerialSettingsOfFileFromSdCard()
        {
            Log.Debug("CommandExecuter", "LoadSerialSettingsOfFileFromSdCard");
            var builder = new WritingCommandBuilder(
                Addresses.CommonOperation,
                (byte)22
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 10000,
                    numOfRetry: 3
                )
            ));
                        await Task.Delay(100);
                                    await WaitToFinishWriting(builder);
                        return res;
        }

        public static async Task<ResponseRaw> SaveSerialSettingsOfFileToSdCard()
        {
            Log.Debug("CommandExecuter", "SaveSerialSettingsOfFileToSdCard");
            var builder = new WritingCommandBuilder(
                Addresses.CommonOperation,
                (byte)23
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 10000,
                    numOfRetry: 3
                )
            ));
                        await Task.Delay(100);
                                    await WaitToFinishWriting(builder);
                        return res;
        }

        public static async Task<ResponseRaw> SaveValueToSdCard()
        {
            Log.Debug("CommandExecuter", "SaveValueToSdCard");
            var builder = new WritingCommandBuilder(
                Addresses.CommonOperation,
                (byte)20
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 10000,
                    numOfRetry: 3
                )
            ));
                        await Task.Delay(100);
                                    await WaitToFinishWriting(builder);
                        return res;
        }

        public static async Task<ResponseRaw> SetAlert(MBMemories.Alert alert)
        {
            Log.Debug("CommandExecuter", "SetAlert");
            var builder = new WritingCommandBuilder(
                Addresses.Alert,
                BigEndianBitConverter.GetBytes((short)alert)
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetCalendarShiftReplacements(MBCalendarShiftDataBinarizer binarizer)
        {
            Log.Debug("CommandExecuter", "SetCalendarShiftReplacements");
            var builder = new WritingCommandBuilder(
                Addresses.NumOfCalendarShiftReplacements,
                binarizer.GetBytes()
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetCalendarYmdReplacements(MBCalendarDataBinarizer binarizer)
        {
            Log.Debug("CommandExecuter", "SetCalendarYmdReplacements");
            var builder = new WritingCommandBuilder(
                Addresses.CalendarYmdReplacements,
                binarizer.GetBytes()
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetSerialSettings(MBSerialSettingsDataBinarizer binarizer)
        {
            Log.Debug("CommandExecuter", "SetSerialSettings");
            var builder = new WritingCommandBuilder(
                Addresses.SerialSettings,
                binarizer.GetBytes()
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetSerialCounters(MBSerialCountersDataBinarizer binarizer)
        {
            Log.Debug("CommandExecuter", "SetSerialCounters");
            var builder = new WritingCommandBuilder(
                Addresses.SerialCounters,
                binarizer.GetBytes()
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetCurrentMarkingField(int index, MBData field)
        {
            Log.Debug("CommandExecuter", "SetCurrentMarkingField");
            var builder = new WritingCommandBuilder(
                Addresses.CurrentFile.Increment(index * MBFile.Consts.NumofFieldWords),
                new MBDataBinarizer(field).GetBytes()
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetFieldIndexOfRemoteSdCardFile(short fieldIndex)
        {
            Log.Debug("CommandExecuter", "SetFieldIndexOfRemoteSdCardFile");
            var builder = new WritingCommandBuilder(
                Addresses.FieldIndexOfRemoteSdCardFile,
                BigEndianBitConverter.GetBytes(fieldIndex)
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetFlagFileLoadedFromSdCard(short value)
        {
            Log.Debug("CommandExecuter", "SetFlagFileLoadedFromSdCard");
            var builder = new WritingCommandBuilder(
                Addresses.FilesDidLoadFromSdCard,
                BigEndianBitConverter.GetBytes(value)
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetFileToSdCardDataExchangeArea(int fieldIndex, MBData field)
        {
            Log.Debug("CommandExecuter", "SetFileToSdCardDataExchangeArea");
            var builder = new WritingCommandBuilder(
                Addresses.SdCardDataExchangeArea.Field(fieldIndex),
                new MBDataBinarizer(field).GetBytes()
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetHeadButtonMarkingAbility(MBMemories.HeadButtonMarkingAbility ability)
        {
            Log.Debug("CommandExecuter", "SetHeadButtonMarkingAbility");
            var builder = new WritingCommandBuilder(
                Addresses.HeadButtonMarkingAbility,
                BigEndianBitConverter.GetBytes((short)ability)
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetMachineModelNo(short number)
        {
            Log.Debug("CommandExecuter", "SetMachineModelNo");
            var builder = new WritingCommandBuilder(
                Addresses.MachineModelNo,
                BigEndianBitConverter.GetBytes(number)
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetMachineModelNoToSdCard()
        {
            Log.Debug("CommandExecuter", "SetMachineModelNoToSdCard");
            var builder = new WritingCommandBuilder(
                Addresses.SettingMachineModelNoToSdCard,
                new byte[]{0x00, 0x01}
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetMarkingMode(MBMemories.MarkingMode mode)
        {
            Log.Debug("CommandExecuter", "SetMarkingMode");
            var builder = new WritingCommandBuilder(
                Addresses.MarkingMode,
                (byte)mode
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetMarkingPausingStatus(MBMemories.MarkingPausingStatus status)
        {
            Log.Debug("CommandExecuter", "SetMarkingPausingStatus");
            var builder = new WritingCommandBuilder(
                Addresses.MarkingPausingStatus,
                (byte)status
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetMarkingPowerOfCurrentMarkingField(int index, short power)
        {
            Log.Debug("CommandExecuter", "SetMarkingPowerOfCurrentMarkingField");
            var builder = new WritingCommandBuilder(
                Addresses.CurrentFile.Increment((index * MBFile.Consts.NumofFieldWords) + Addresses.MarkingPowerIndexInField),
                BigEndianBitConverter.GetBytes(power)
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetMarkingSpeedOfCurrentMarkingField(int index, short speed)
        {
            Log.Debug("CommandExecuter", "SetMarkingSpeedOfCurrentMarkingField");
            var builder = new WritingCommandBuilder(
                Addresses.CurrentFile.Increment((index * MBFile.Consts.NumofFieldWords) + Addresses.MarkingSpeedIndexInField),
                BigEndianBitConverter.GetBytes(speed)
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetMarkingStatus(MBMemories.MarkingStatus status)
        {
            Log.Debug("CommandExecuter", "SetMarkingStatus");
            var builder = new WritingCommandBuilder(
                Addresses.MarkingStatus,
                BigEndianBitConverter.GetBytes((short)status)
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetPermanentMarkingFileNo(short number)
        {
            Log.Debug("CommandExecuter", "SetPermanentMarkingFileNo");
            var builder = new WritingCommandBuilder(
                Addresses.PermanentMarkingFileNo,
                BigEndianBitConverter.GetBytes(number)
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> ClearPermanentMarkingFileNo()
        {
            Log.Debug("CommandExecuter", "ClearPermanentMarkingFileNo");
            var builder = new WritingCommandBuilder(
                Addresses.PermanentMarkingFileNo,
                BigEndianBitConverter.GetBytes((short)0).ToArray()
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetPermanentMarkingFileNoToSdCard()
        {
            Log.Debug("CommandExecuter", "SetPermanentMarkingFileNoToSdCard");
            var builder = new WritingCommandBuilder(
                Addresses.SettingPermanentMarkingFileNoToSdCard,
                BigEndianBitConverter.GetBytes((short)11)
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetNumOfFieldOfCurrentMarkingFile(short number)
        {
            Log.Debug("CommandExecuter", "SetNumOfFieldOfCurrentMarkingFile");
            var builder = new WritingCommandBuilder(
                Addresses.NumOfFieldOfCurrentFile,
                BigEndianBitConverter.GetBytes(number)
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetNumOfFieldToSdCardDataExchangeArea(int fileIndex, short numOfField)
        {
            Log.Debug("CommandExecuter", "SetNumOfFieldToSdCardDataExchangeArea");
            var builder = new WritingCommandBuilder(
                Addresses.SdCardDataExchangeArea.FileMap.Increment(Sizes.SdCard.FileMapBlock.FileMapIndexInBlock(fileIndex) * Sizes.BytesOfMemoryUnitC),
                BigEndianBitConverter.GetBytes(numOfField)
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetRemoteFileMap(int fileIndex, short num)
        {
            Log.Debug("CommandExecuter", "SetRemoteFileMap");
            var builder = new WritingCommandBuilder(
                Addresses.RemoteFileMaps.Increment(fileIndex),
                BigEndianBitConverter.GetBytes(num)
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetRemoteFileName(short fileIndex, string name)
        {
            Log.Debug("CommandExecuter", "SetRemoteFileName");
            var builder = new WritingCommandBuilder(
                Addresses.RemoteFileNames.Increment(fileIndex * Sizes.BytesOfRemoteFileName),
                BigEndianBitConverter.BinarizeText(name, TextEncode.Byte1, 16)
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetRemoteMarkingFileNo(short no)
        {
            Log.Debug("CommandExecuter", "SetRemoteMarkingFileNo");
            var builder = new WritingCommandBuilder(
                Addresses.RemoteMarkingFileNo,
                BigEndianBitConverter.GetBytes(no)
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetSdCardDataWritingInfo(int addressOfSdCard, int addressOfWorkingSpace, int writingSize)
        {
            Log.Debug("CommandExecuter", "SetSdCardDataWritingInfo");
            var builder = new WritingCommandBuilder(
                Addresses.SdCardDataWritingInfo,
                BigEndianBitConverter.GetBytes(addressOfSdCard).ToArray().Concat(
    BigEndianBitConverter.GetBytes(addressOfWorkingSpace).ToArray()
).Concat(
    BigEndianBitConverter.GetBytes((int)0).ToArray()
).Concat(
    BigEndianBitConverter.GetBytes(writingSize).ToArray()
).ToArray()
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetBarcode1WayMarkingMode(bool is1Way)
        {
            Log.Debug("CommandExecuter", "SetBarcode1WayMarkingMode");
            var builder = new WritingCommandBuilder(
                Addresses.Barcode1WayMarkingMode,
                (byte) ( (is1Way) ? 0x1 : 0x0 )
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetBSDEnabled(bool isEnabled)
        {
            Log.Debug("CommandExecuter", "SetBSDEnabled");
            var builder = new WritingCommandBuilder(
                Addresses.BSDEnabled,
                BigEndianBitConverter.GetBytes (
    (short)(isEnabled ? 0x1 : 0x0)
).ToArray ()
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetExclusion(bool isEnabled)
        {
            Log.Debug("CommandExecuter", "SetExclusion");
            var builder = new WritingCommandBuilder(
                Addresses.Exclusion,
                BigEndianBitConverter.GetBytes (
    (short)(isEnabled ? 0x1 : 0x0)
).ToArray ()
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> SetOptionsOfPinMoving(short xPulse, short yPulse, short speed, short mode = 1, short interval = 0)
        {
            Log.Debug("CommandExecuter", "SetOptionsOfPinMoving");
            var builder = new WritingCommandBuilder(
                Addresses.OptionsOfPinMoving,
                BigEndianBitConverter.GetBytes (xPulse)
.Concat(BigEndianBitConverter.GetBytes (yPulse))
.Concat(BigEndianBitConverter.GetBytes (speed))
.Concat(BigEndianBitConverter.GetBytes (mode))
.Concat(BigEndianBitConverter.GetBytes (interval))
.ToArray()
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

        public static async Task<ResponseRaw> StartToMovePin()
        {
            Log.Debug("CommandExecuter", "StartToMovePin");
            var builder = new WritingCommandBuilder(
                Addresses.PinIsMoving,
                BigEndianBitConverter.GetBytes (
    (short)(14)
).ToArray ()
            );
            var res = new ResponseRaw(await Write(
                builder.Build(
                    needsResponse: false,
                    timeout: 5000,
                    numOfRetry: 3
                )
            ));
                                    return res;
        }

    }
}