﻿// 
// This code is generated by "TemplateWrappers.tt"
// Not allowed to modify this code because your changes are deleted when in regeration.
// 


namespace TokyoChokoku.MarkinBox.Sketchbook
{
    using System;


    public class HorizontalTextWrapper
    {
        private readonly MBDataStructure data;

        public HorizontalTextWrapper (MBDataStructure data) {
            this.data = data;
        }

        public short Power {
            get { return data.Power;  }
            set { data.Power = value; }
        }

        public short Speed {
            get { return data.Speed;  }
            set { data.Speed = value; }
        }

        public bool Jogging {
            get { return data.Jogging;  }
            set { data.Jogging = value; }
        }

        public bool Reverse {
            get { return data.Reverse;  }
            set { data.Reverse = value; }
        }

        public bool Pause {
            get { return data.Pause;  }
            set { data.Pause = value; }
        }

        public byte BasePoint {
            get { return data.BasePoint;  }
            set { data.BasePoint = value; }
        }

        public bool Mirrored {
            get { return data.Mirrored;  }
            set { data.Mirrored = value; }
        }

        public float X {
            get { return data.X;  }
            set { data.X = value; }
        }

        public float Y {
            get { return data.Y;  }
            set { data.Y = value; }
        }

        public string Text {
            get { return data.Text;  }
            set { data.Text = value; }
        }

        public FontMode Font {
            get { return data.Font;  }
            set { data.Font = value; }
        }

        public float Pitch {
            get { return data.Pitch;  }
            set { data.Pitch = value; }
        }

        public float Height {
            get { return data.Height;  }
            set { data.Height = value; }
        }

        public float Aspect {
            get { return data.Aspect;  }
            set { data.Aspect = value; }
        }

        public float Angle {
            get { return data.Angle;  }
            set { data.Angle = value; }
        }

    }
}



namespace TokyoChokoku.MarkinBox.Sketchbook
{
    using System;


    public class YVerticalTextWrapper
    {
        private readonly MBDataStructure data;

        public YVerticalTextWrapper (MBDataStructure data) {
            this.data = data;
        }

        public short Power {
            get { return data.Power;  }
            set { data.Power = value; }
        }

        public short Speed {
            get { return data.Speed;  }
            set { data.Speed = value; }
        }

        public bool Jogging {
            get { return data.Jogging;  }
            set { data.Jogging = value; }
        }

        public bool Reverse {
            get { return data.Reverse;  }
            set { data.Reverse = value; }
        }

        public bool Pause {
            get { return data.Pause;  }
            set { data.Pause = value; }
        }

        public byte BasePoint {
            get { return data.BasePoint;  }
            set { data.BasePoint = value; }
        }

        public bool Mirrored {
            get { return data.Mirrored;  }
            set { data.Mirrored = value; }
        }

        public float X {
            get { return data.X;  }
            set { data.X = value; }
        }

        public float Y {
            get { return data.Y;  }
            set { data.Y = value; }
        }

        public string Text {
            get { return data.Text;  }
            set { data.Text = value; }
        }

        public FontMode Font {
            get { return data.Font;  }
            set { data.Font = value; }
        }

        public float Pitch {
            get { return data.Pitch;  }
            set { data.Pitch = value; }
        }

        public float Height {
            get { return data.Height;  }
            set { data.Height = value; }
        }

        public float Aspect {
            get { return data.Aspect;  }
            set { data.Aspect = value; }
        }

        public float Angle {
            get { return data.Angle;  }
            set { data.Angle = value; }
        }

    }
}



namespace TokyoChokoku.MarkinBox.Sketchbook
{
    using System;


    public class XVerticalTextWrapper
    {
        private readonly MBDataStructure data;

        public XVerticalTextWrapper (MBDataStructure data) {
            this.data = data;
        }

        public short Power {
            get { return data.Power;  }
            set { data.Power = value; }
        }

        public short Speed {
            get { return data.Speed;  }
            set { data.Speed = value; }
        }

        public bool Jogging {
            get { return data.Jogging;  }
            set { data.Jogging = value; }
        }

        public bool Reverse {
            get { return data.Reverse;  }
            set { data.Reverse = value; }
        }

        public bool Pause {
            get { return data.Pause;  }
            set { data.Pause = value; }
        }

        public byte BasePoint {
            get { return data.BasePoint;  }
            set { data.BasePoint = value; }
        }

        public bool Mirrored {
            get { return data.Mirrored;  }
            set { data.Mirrored = value; }
        }

        public float X {
            get { return data.X;  }
            set { data.X = value; }
        }

        public float Y {
            get { return data.Y;  }
            set { data.Y = value; }
        }

        public string Text {
            get { return data.Text;  }
            set { data.Text = value; }
        }

        public FontMode Font {
            get { return data.Font;  }
            set { data.Font = value; }
        }

        public float Pitch {
            get { return data.Pitch;  }
            set { data.Pitch = value; }
        }

        public float Height {
            get { return data.Height;  }
            set { data.Height = value; }
        }

        public float Aspect {
            get { return data.Aspect;  }
            set { data.Aspect = value; }
        }

        public float Angle {
            get { return data.Angle;  }
            set { data.Angle = value; }
        }

    }
}



namespace TokyoChokoku.MarkinBox.Sketchbook
{
    using System;


    public class InnerArcTextWrapper
    {
        private readonly MBDataStructure data;

        public InnerArcTextWrapper (MBDataStructure data) {
            this.data = data;
        }

        public short Power {
            get { return data.Power;  }
            set { data.Power = value; }
        }

        public short Speed {
            get { return data.Speed;  }
            set { data.Speed = value; }
        }

        public bool Jogging {
            get { return data.Jogging;  }
            set { data.Jogging = value; }
        }

        public bool Reverse {
            get { return data.Reverse;  }
            set { data.Reverse = value; }
        }

        public bool Pause {
            get { return data.Pause;  }
            set { data.Pause = value; }
        }

        public byte BasePoint {
            get { return data.BasePoint;  }
            set { data.BasePoint = value; }
        }

        public bool Mirrored {
            get { return data.Mirrored;  }
            set { data.Mirrored = value; }
        }

        public float X {
            get { return data.X;  }
            set { data.X = value; }
        }

        public float Y {
            get { return data.Y;  }
            set { data.Y = value; }
        }

        public string Text {
            get { return data.Text;  }
            set { data.Text = value; }
        }

        public FontMode Font {
            get { return data.Font;  }
            set { data.Font = value; }
        }

        public float Pitch {
            get { return data.Pitch;  }
            set { data.Pitch = value; }
        }

        public float Height {
            get { return data.Height;  }
            set { data.Height = value; }
        }

        public float Aspect {
            get { return data.Aspect;  }
            set { data.Aspect = value; }
        }

        public float Radius {
            get { return data.Radius;  }
            set { data.Radius = value; }
        }

        public float Angle {
            get { return data.Angle;  }
            set { data.Angle = value; }
        }

    }
}



namespace TokyoChokoku.MarkinBox.Sketchbook
{
    using System;


    public class OuterArcTextWrapper
    {
        private readonly MBDataStructure data;

        public OuterArcTextWrapper (MBDataStructure data) {
            this.data = data;
        }

        public short Power {
            get { return data.Power;  }
            set { data.Power = value; }
        }

        public short Speed {
            get { return data.Speed;  }
            set { data.Speed = value; }
        }

        public bool Jogging {
            get { return data.Jogging;  }
            set { data.Jogging = value; }
        }

        public bool Reverse {
            get { return data.Reverse;  }
            set { data.Reverse = value; }
        }

        public bool Pause {
            get { return data.Pause;  }
            set { data.Pause = value; }
        }

        public byte BasePoint {
            get { return data.BasePoint;  }
            set { data.BasePoint = value; }
        }

        public bool Mirrored {
            get { return data.Mirrored;  }
            set { data.Mirrored = value; }
        }

        public float X {
            get { return data.X;  }
            set { data.X = value; }
        }

        public float Y {
            get { return data.Y;  }
            set { data.Y = value; }
        }

        public string Text {
            get { return data.Text;  }
            set { data.Text = value; }
        }

        public FontMode Font {
            get { return data.Font;  }
            set { data.Font = value; }
        }

        public float Pitch {
            get { return data.Pitch;  }
            set { data.Pitch = value; }
        }

        public float Height {
            get { return data.Height;  }
            set { data.Height = value; }
        }

        public float Aspect {
            get { return data.Aspect;  }
            set { data.Aspect = value; }
        }

        public float Radius {
            get { return data.Radius;  }
            set { data.Radius = value; }
        }

        public float Angle {
            get { return data.Angle;  }
            set { data.Angle = value; }
        }

    }
}



namespace TokyoChokoku.MarkinBox.Sketchbook
{
    using System;


    public class QrCodeWrapper
    {
        private readonly MBDataStructure data;

        public QrCodeWrapper (MBDataStructure data) {
            this.data = data;
        }

        public short Power {
            get { return data.Power;  }
            set { data.Power = value; }
        }

        public short Speed {
            get { return data.Speed;  }
            set { data.Speed = value; }
        }

        public bool Jogging {
            get { return data.Jogging;  }
            set { data.Jogging = value; }
        }

        public bool Reverse {
            get { return data.Reverse;  }
            set { data.Reverse = value; }
        }

        public bool Pause {
            get { return data.Pause;  }
            set { data.Pause = value; }
        }

        public byte BasePoint {
            get { return data.BasePoint;  }
            set { data.BasePoint = value; }
        }

        public bool Mirrored {
            get { return data.Mirrored;  }
            set { data.Mirrored = value; }
        }

        public float X {
            get { return data.X;  }
            set { data.X = value; }
        }

        public float Y {
            get { return data.Y;  }
            set { data.Y = value; }
        }

        public string Text {
            get { return data.Text;  }
            set { data.Text = value; }
        }

        public float Height {
            get { return data.Height;  }
            set { data.Height = value; }
        }

        public float Angle {
            get { return data.Angle;  }
            set { data.Angle = value; }
        }

    }
}



namespace TokyoChokoku.MarkinBox.Sketchbook
{
    using System;


    public class DataMatrixWrapper
    {
        private readonly MBDataStructure data;

        public DataMatrixWrapper (MBDataStructure data) {
            this.data = data;
        }

        public short Power {
            get { return data.Power;  }
            set { data.Power = value; }
        }

        public short Speed {
            get { return data.Speed;  }
            set { data.Speed = value; }
        }

        public bool Jogging {
            get { return data.Jogging;  }
            set { data.Jogging = value; }
        }

        public bool Reverse {
            get { return data.Reverse;  }
            set { data.Reverse = value; }
        }

        public bool Pause {
            get { return data.Pause;  }
            set { data.Pause = value; }
        }

        public byte BasePoint {
            get { return data.BasePoint;  }
            set { data.BasePoint = value; }
        }

        public bool Mirrored {
            get { return data.Mirrored;  }
            set { data.Mirrored = value; }
        }

        public float X {
            get { return data.X;  }
            set { data.X = value; }
        }

        public float Y {
            get { return data.Y;  }
            set { data.Y = value; }
        }

        public string Text {
            get { return data.Text;  }
            set { data.Text = value; }
        }

        public float Height {
            get { return data.Height;  }
            set { data.Height = value; }
        }

        public float Angle {
            get { return data.Angle;  }
            set { data.Angle = value; }
        }

        public DotCount2D DotCount {
            get { return data.DotCount;  }
            set { data.DotCount = value; }
        }

    }
}



namespace TokyoChokoku.MarkinBox.Sketchbook
{
    using System;


    public class RectangleWrapper
    {
        private readonly MBDataStructure data;

        public RectangleWrapper (MBDataStructure data) {
            this.data = data;
        }

        public short Power {
            get { return data.Power;  }
            set { data.Power = value; }
        }

        public short Speed {
            get { return data.Speed;  }
            set { data.Speed = value; }
        }

        public bool Jogging {
            get { return data.Jogging;  }
            set { data.Jogging = value; }
        }

        public bool Reverse {
            get { return data.Reverse;  }
            set { data.Reverse = value; }
        }

        public bool Pause {
            get { return data.Pause;  }
            set { data.Pause = value; }
        }

        public byte BasePoint {
            get { return data.BasePoint;  }
            set { data.BasePoint = value; }
        }

        public float X {
            get { return data.X;  }
            set { data.X = value; }
        }

        public float Y {
            get { return data.Y;  }
            set { data.Y = value; }
        }

        public float Height {
            get { return data.Height;  }
            set { data.Height = value; }
        }

        public float Aspect {
            get { return data.Aspect;  }
            set { data.Aspect = value; }
        }

        public float Angle {
            get { return data.Angle;  }
            set { data.Angle = value; }
        }

    }
}



namespace TokyoChokoku.MarkinBox.Sketchbook
{
    using System;


    public class TriangleWrapper
    {
        private readonly MBDataStructure data;

        public TriangleWrapper (MBDataStructure data) {
            this.data = data;
        }

        public short Power {
            get { return data.Power;  }
            set { data.Power = value; }
        }

        public short Speed {
            get { return data.Speed;  }
            set { data.Speed = value; }
        }

        public bool Jogging {
            get { return data.Jogging;  }
            set { data.Jogging = value; }
        }

        public bool Reverse {
            get { return data.Reverse;  }
            set { data.Reverse = value; }
        }

        public bool Pause {
            get { return data.Pause;  }
            set { data.Pause = value; }
        }

        public byte BasePoint {
            get { return data.BasePoint;  }
            set { data.BasePoint = value; }
        }

        public float X {
            get { return data.X;  }
            set { data.X = value; }
        }

        public float Y {
            get { return data.Y;  }
            set { data.Y = value; }
        }

        public float HornX {
            get { return data.HornX;  }
            set { data.HornX = value; }
        }

        public float Height {
            get { return data.Height;  }
            set { data.Height = value; }
        }

        public float Aspect {
            get { return data.Aspect;  }
            set { data.Aspect = value; }
        }

        public float Angle {
            get { return data.Angle;  }
            set { data.Angle = value; }
        }

    }
}



namespace TokyoChokoku.MarkinBox.Sketchbook
{
    using System;


    public class CircleWrapper
    {
        private readonly MBDataStructure data;

        public CircleWrapper (MBDataStructure data) {
            this.data = data;
        }

        public short Power {
            get { return data.Power;  }
            set { data.Power = value; }
        }

        public short Speed {
            get { return data.Speed;  }
            set { data.Speed = value; }
        }

        public bool Jogging {
            get { return data.Jogging;  }
            set { data.Jogging = value; }
        }

        public bool Reverse {
            get { return data.Reverse;  }
            set { data.Reverse = value; }
        }

        public bool Pause {
            get { return data.Pause;  }
            set { data.Pause = value; }
        }

        public byte BasePoint {
            get { return data.BasePoint;  }
            set { data.BasePoint = value; }
        }

        public float X {
            get { return data.X;  }
            set { data.X = value; }
        }

        public float Y {
            get { return data.Y;  }
            set { data.Y = value; }
        }

        public float Radius {
            get { return data.Radius;  }
            set { data.Radius = value; }
        }

    }
}



namespace TokyoChokoku.MarkinBox.Sketchbook
{
    using System;


    public class LineWrapper
    {
        private readonly MBDataStructure data;

        public LineWrapper (MBDataStructure data) {
            this.data = data;
        }

        public short Power {
            get { return data.Power;  }
            set { data.Power = value; }
        }

        public short Speed {
            get { return data.Speed;  }
            set { data.Speed = value; }
        }

        public bool Jogging {
            get { return data.Jogging;  }
            set { data.Jogging = value; }
        }

        public bool Reverse {
            get { return data.Reverse;  }
            set { data.Reverse = value; }
        }

        public bool Pause {
            get { return data.Pause;  }
            set { data.Pause = value; }
        }

        public float StartX {
            get { return data.StartX;  }
            set { data.StartX = value; }
        }

        public float StartY {
            get { return data.StartY;  }
            set { data.StartY = value; }
        }

        public float CenterX {
            get { return data.CenterX;  }
            set { data.CenterX = value; }
        }

        public float CenterY {
            get { return data.CenterY;  }
            set { data.CenterY = value; }
        }

        public float EndX {
            get { return data.EndX;  }
            set { data.EndX = value; }
        }

        public float EndY {
            get { return data.EndY;  }
            set { data.EndY = value; }
        }

        public bool IsBezierCurve {
            get { return data.IsBezierCurve;  }
            set { data.IsBezierCurve = value; }
        }

    }
}



namespace TokyoChokoku.MarkinBox.Sketchbook
{
    using System;


    public class BypassWrapper
    {
        private readonly MBDataStructure data;

        public BypassWrapper (MBDataStructure data) {
            this.data = data;
        }

        public short Power {
            get { return data.Power;  }
            set { data.Power = value; }
        }

        public short Speed {
            get { return data.Speed;  }
            set { data.Speed = value; }
        }

        public bool Jogging {
            get { return data.Jogging;  }
            set { data.Jogging = value; }
        }

        public bool Reverse {
            get { return data.Reverse;  }
            set { data.Reverse = value; }
        }

        public bool Pause {
            get { return data.Pause;  }
            set { data.Pause = value; }
        }

        public float X {
            get { return data.X;  }
            set { data.X = value; }
        }

        public float Y {
            get { return data.Y;  }
            set { data.Y = value; }
        }

    }
}



namespace TokyoChokoku.MarkinBox.Sketchbook
{
    using System;


    public class EllipseWrapper
    {
        private readonly MBDataStructure data;

        public EllipseWrapper (MBDataStructure data) {
            this.data = data;
        }

        public short Power {
            get { return data.Power;  }
            set { data.Power = value; }
        }

        public short Speed {
            get { return data.Speed;  }
            set { data.Speed = value; }
        }

        public bool Jogging {
            get { return data.Jogging;  }
            set { data.Jogging = value; }
        }

        public bool Reverse {
            get { return data.Reverse;  }
            set { data.Reverse = value; }
        }

        public bool Pause {
            get { return data.Pause;  }
            set { data.Pause = value; }
        }

        public byte BasePoint {
            get { return data.BasePoint;  }
            set { data.BasePoint = value; }
        }

        public float X {
            get { return data.X;  }
            set { data.X = value; }
        }

        public float Y {
            get { return data.Y;  }
            set { data.Y = value; }
        }

        public float Height {
            get { return data.Height;  }
            set { data.Height = value; }
        }

        public float Aspect {
            get { return data.Aspect;  }
            set { data.Aspect = value; }
        }

        public float Angle {
            get { return data.Angle;  }
            set { data.Angle = value; }
        }

    }
}


