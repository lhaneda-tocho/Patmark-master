<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".designer.cs" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="TokyoChokoku.MarkinBox.Sketchbook.TemplateMeta" #>
<#@ include file="$(SolutionDir)/Global.ttinclude"#>
<#  #>
// 
// This code is generated by "TemplateFieldFactory.tt"
// Not allowed to modify this code because your changes are deleted when in regeration.
// 


namespace TokyoChokoku.MarkinBox.Sketchbook
{
	using System;
	using System.Collections.Generic;

    using TokyoChokoku.MarkinBox.Sketchbook.Fields;
	using TokyoChokoku.MarkinBox.Sketchbook.Parameters;

	
	public static partial class FieldFactory
	{

        /// <summary>
        /// ファイルから読み取った MBData からフィールドを作成します．
        /// MBData の形式が不正であり，読み取ることができなかった場合は null となります．
        /// </summary>
        /// <param name="raw">Raw.</param>
		public static IField<IConstantParameter> Create (MBData raw) {

			if ( !FieldTypeExt.IsDefined (raw.Type) ) {
				string errorMessage = "No such field type : " + raw.Type;
                System.Diagnostics.Debug.WriteLine (errorMessage);
                return null;
			}

			var fieldType = (FieldType)raw.Type;

			switch ( fieldType ) {
<#
foreach ( var field in MetaFields.Definitions) {
    var parameter = field.Parameter;
	var changables = field.Changable;
#>
			case FieldType.<#= field.Name #>:
				return <#= field.Name #>.Constant.Create (raw);

<#
}
#>
			default:
				throw new ForgottenToImplementFactoryException ();
			}
		}



        /// <summary>
        /// ファイルから読み取った MBData から可変フィールドを作成します．
        /// MBData の形式が不正であり，読み取ることができなかった場合は null となります．
        /// </summary>
        /// <param name="raw">Raw.</param>
        public static IMutableField<IMutableParameter> CreateMutable (MBData raw) {

            if ( !FieldTypeExt.IsDefined (raw.Type) ) {
                string errorMessage = "No such field type : " + raw.Type;
                System.Diagnostics.Debug.WriteLine (errorMessage);
                return null;
            }

            var fieldType = (FieldType)raw.Type;

            switch ( fieldType ) {
<#
foreach ( var field in MetaFields.Definitions) {
    var parameter = field.Parameter;
    var changables = field.Changable;
#>
            case FieldType.<#= field.Name #>:
                return <#= field.Name #>.Mutable.Create (raw);

<#
}
#>
            default:
                throw new ForgottenToImplementFactoryException ();
            }
        }

	}
}